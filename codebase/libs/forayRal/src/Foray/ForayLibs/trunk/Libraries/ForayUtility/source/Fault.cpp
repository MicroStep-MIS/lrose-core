//
//
//

#include <iostream>
using namespace std;

#include "Fault.h"
using namespace ForayUtility;

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
Fault::Fault(){

    msg_.push_back("Fault\n");

}



//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
Fault::Fault(string msgString){

    // cout << "Fault() \n";

    msg_.push_back(msgString);

}

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
Fault::~Fault(){

    // cout << "~Fault() \n";

}

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
Fault::Fault(const Fault &src){

    // cout << "Fault(const Fault &) \n";

    msg_ = src.msg_;

}

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
Fault & Fault::operator=(const Fault &src){

    // cout << "Fault:: operator= \n";

    msg_ = src.msg_;
    return *this;
}

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
string Fault::msg(){

    return msg("");

}

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
string Fault::msg(string prefix){
    
    string allMsg;

    vector<string>::iterator ii;

    ii = msg_.begin();
    while(ii != msg_.end()){
	allMsg += (prefix + *ii);
	++ii;
    }

    return allMsg;

}

//////////////////////////////////////////////////////////////////////
//
//
//
//////////////////////////////////////////////////////////////////////
void  Fault::add_msg(string msg){
    
    msg_.push_back(msg);
}
