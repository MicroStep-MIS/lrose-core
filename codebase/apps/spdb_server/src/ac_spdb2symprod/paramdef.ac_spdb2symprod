/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.ac_spdb2symprod
 *
 * This file contains the TDRP parameter definitions for
 * ac_spdb2symprod.
 */


/***********************************************************************
 * Debugging
 */

paramdef enum debug_t
{
  p_descr = "debug level";
  p_help = "Level of debug messages to be displayed.";
  p_options = { DEBUG_OFF,
                DEBUG_ERRORS,
                DEBUG_MSGS,
                DEBUG_ROUTINES,
                DEBUG_ALL };
  p_default = { DEBUG_OFF };
} debug;

paramdef long
{
  p_descr = "malloc debug level";
  p_help = "0 = none, 1 = corruption checking, 2 = record all malloc blocks and checks, 3 = printout of all mallocs, etc.";
  p_default = { 0 };
  p_min = { 0 };
  p_max = { 3 };
} malloc_debug_level;


/***********************************************************************
 * Operational parameters
 */

paramdef long
{
  p_descr = "wait msecs";
  p_help = "Number of milliseconds to wait before timing out socket operations.";
  p_default = { 100 };
} wait_msecs;


/***********************************************************************
 * Input parameters
 */

paramdef string
{
  p_descr = "database directory";
  p_help = "Directory containing SPDB database.";
  p_default = { "." };
} database_dir;

paramdef string
{
  p_descr = "product label";
  p_help = "The product label used in the SPDB database to uniquely identify this product.";
  p_default = { "AC_POSN" };
} product_label;

paramdef long
{
  p_descr = "product id";
  p_help = "Number which uniquely identifies this product in the SPDB database.";
  p_default = { 20001 };
} product_id;

/***********************************************************************
 * Output parameters
 */

paramdef long
{
  p_descr = "port";
  p_help = "Server port number.";
  p_default = { 62000 };
} port;

paramdef string
{
  p_descr = "servmap type";
  p_help = "Server mapper type for this server.";
  p_default = { "Spdb" };
} servmap_type;

paramdef string
{
  p_descr = "servmap subtype";
  p_help = "Server mapper subtype for this server.";
  p_default = { "Spdb" };
} servmap_subtype;

paramdef string
{
  p_descr = "servmap instance";
  p_help = "Server mapper instance for this server.";
  p_default = { "Test" };
} servmap_instance;

paramdef boolean
{
  p_descr = "realtime available flag";
  p_help = "Flag indicating if realtime data is available from this server.";
  p_default = { TRUE };
} realtime_avail;

paramdef boolean
{
  p_descr = "display GA aircraft flag";
  p_help = "If TRUE, all aircraft, including GA aircraft, will be displayed.  If FALSE, GA aircraft won't be displayed.  For this purporse, a GA aircraft is assumed to be any aircraft with a number somewhere in the first 3 characters of its callsign.";
  p_default = { TRUE };
} display_ga;


/***********************************************************************
 * Display object parameters
 */

paramdef long
{
  p_default = {1};
  p_min = {1};
  p_descr = "Width of polylines";
} polyline_width;

paramdef boolean
{
  p_descr = "Plot the arrow for direction";
  p_help = "If TRUE, an arrow will be added to the end of the polyline to indicate the direction of travel of the aircraft.\n";
  p_default = { FALSE };
} plot_dirn_arrow;

paramdef double
{
  p_default = {2.0};
  p_min = {0.0};
  p_descr = "Length of head of dirn arrow (km)";
} dirn_arrow_head_len;

paramdef boolean
{
  p_descr = "Option to check space between icons.";
  p_help = "If TRUE, the distance between consecutive icons will be computed.";
  p_default = { FALSE };
} sparse_icons;

paramdef double
{
  p_default = {0.0};
  p_min = {0.0};
  p_descr = "Minimum distance between sparse icons (km).";
  p_help = "Applicable if sparse_icons is TRUE. Icon rendering will be limited so that this minimum distance is exceeded bewteen consecutive icons.";
} sparse_icons_min_distance;

/*************************************
 * props for track before current time
 */

paramdef long
{
  p_descr = "number of seconds of before track";
  p_help = "Number of seconds of track information to display before the current position.";
  p_default = { 0 };
} before_secs;

paramdef boolean
{
  p_descr = "display before icon flag";
  p_help = "If TRUE, the before icon (described in the before_icon parameter) is displayed at each aircraft position before the current position.\n";
  p_default = { TRUE };
} display_before_icon;

paramdef long
{
  p_descr = "before icon";
  p_help = "Array defining the icon to be used for the before positions.  The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon.  You may want to look at an example parameter file to see how this is done.";
} before_icon[];

paramdef string
{
  p_descr = "before icon color";
  p_help = "Name of X color to be used when rendering the before icon(s).";
  p_default = { "yellow" };
} before_icon_color;

paramdef boolean
{
  p_descr = "display before polyline flag";
  p_help = "If TRUE, the before positions will be connected with a polyline.";
  p_default = { FALSE };
} display_before_polyline;

paramdef string
{
  p_descr = "before polyline color";
  p_help = "Name of X color to be used when rendering the before polyline.";
  p_default = { "yellow" };
} before_polyline_color;

/*********************************
 * props for track at current time
 */

paramdef boolean
{
  p_descr = "display current icon flag";
  p_help = "If TRUE, the current icon (described in the current_icon parameter) is displayed at the current position.\n";
  p_default = { TRUE };
} display_current_icon;

paramdef long
{
  p_descr = "current icon";
  p_help = "Array defining the icon to be used for the current position.  The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon.  You may want to look at an example parameter file to see how this is done.";
} current_icon[];

paramdef string
{
  p_descr = "current icon color";
  p_help = "Name of X color to be used when rendering the current icon.";
  p_default = { "yellow" };
} current_icon_color;

paramdef boolean
{
  p_descr = "display label flag";
  p_help = "If TRUE, the callsign of the aircraft will be displayed by the current position icon (or where the current position icon would be if it isn't being displayed.";
  p_default = { FALSE };
} display_label;

paramdef string
{
  p_descr = "label color";
  p_help = "Name of the X color to be used when rendering the aircraft label.";
  p_default = { "yellow" };
} label_color;

paramdef string
{
  p_descr = "label font";
  p_help = "Suggested X font to use for rendering label.";
  p_default = { "8x13" };
} label_font;

paramdef enum label_horiz_align_t
{
  p_descr = "label horizontal alignment";
  p_help = "Desired horizontal alignment for the label.";
  p_options = { HORIZ_ALIGN_LEFT,
                HORIZ_ALIGN_CENTER,
                HORIZ_ALIGN_RIGHT };
  p_default = { HORIZ_ALIGN_CENTER };
} label_horiz_align;

paramdef enum label_vert_align_t
{
  p_descr = "label vertical alignment";
  p_help = "Desired vertical alignment for the label.";
  p_options = { VERT_ALIGN_TOP,
                VERT_ALIGN_CENTER,
                VERT_ALIGN_BOTTOM };
  p_default = { VERT_ALIGN_CENTER };
} label_vert_align;

paramdef struct label_offset_t
{
  p_descr = "label offset";
  p_help = "Pixel offsets for label rendering.  The label is rendered at the given offsets from the current position location.  A positive x_offset moves the label to the right; a positive y_offset moves the label up.";
  p_field_name = { x_offset,
                   y_offset };
  p_field_type = { long,
                   long };
} label_offset;

/************************************
 * props for track after current time
 */

paramdef long
{
  p_descr = "number of seconds of after track";
  p_help = "Number of seconds of track information to display after the current position.  Of course, when displaying realtime aircraft data, there will be no track information after the current position, so this value will be ignored.";
  p_default = { 0 };
} after_secs;

paramdef boolean
{
  p_descr = "display after icon flag";
  p_help = "If TRUE, the after icon (described in the after_icon parameter) is displayed at each aircraft position after the current position.\n";
  p_default = { TRUE };
} display_after_icon;

paramdef long
{
  p_descr = "after icon";
  p_help = "Array defining the icon to be used for the after positions.  The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon.  You may want to look at an example parameter file to see how this is done.";
} after_icon[];

paramdef string
{
  p_descr = "after icon color";
  p_help = "Name of X color to be used when rendering the after icon(s).";
  p_default = { "yellow" };
} after_icon_color;

paramdef boolean
{
  p_descr = "display after polyline flag";
  p_help = "If TRUE, the after positions will be connected with a polyline.";
  p_default = { FALSE };
} display_after_polyline;

paramdef string
{
  p_descr = "after polyline color";
  p_help = "Name of X color to be used when rendering the after polyline.";
  p_default = { "yellow" };
} after_polyline_color;

/***********************************************************************
 * Altitude display parameters
 */

paramdef boolean
{
  p_descr = "Option to set color based on altitude field.";
  p_help = "If TRUE, this option overrides the other color options and sets the color based on the aircraft altitude. The colors used are set in the altitude_color array.";
  p_default = { FALSE };
} color_by_altitude;

paramdef struct altitude_color_scale
{
  p_descr = "Color scale for altitude data - only used if color_by_altitude is TRUE";
  p_help = "This is an array of entries, each of which has min_val, max_val and color for each altitude range selected. Altitude units are meters. If the true altitude is outside this range the color will default to the color which would have been used if color_by_altitude were FALSE.";
  p_field_name = { min_val, max_val, color };
  p_field_type = { double, double, char* };
} altitude_color_scale[];

paramdef boolean
{
  p_descr = "Option to plot altitude as text instead of icon.";
  p_help = "If TRUE, the altitude value is plotted at the aircraft position instead of the icon. The altitude_font is used.";
  p_default = { FALSE };
} plot_altitude_text;

paramdef string
{
  p_descr = "altitude font";
  p_help = "Suggested X font to use for rendering altitude.";
  p_default = { "6x10" };
} altitude_font;


