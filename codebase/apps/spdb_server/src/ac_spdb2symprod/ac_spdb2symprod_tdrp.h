/*******************************************
 * ac_spdb2symprod_tdrp.h
 *
 * TDRP header file for 'ac_spdb2symprod' module.
 *
 * Code for program ac_spdb2symprod
 *
 * This header file has been automatically
 * generated by TDRP, do not modify.
 *
 *******************************************/

#ifndef _ac_spdb2symprod_tdrp_h
#define _ac_spdb2symprod_tdrp_h

#ifdef __cplusplus
extern "C" {
#endif

#include <tdrp/tdrp.h>

/*
 * typedefs
 */

typedef enum {
  DEBUG_OFF = 0,
  DEBUG_ERRORS = 1,
  DEBUG_MSGS = 2,
  DEBUG_ROUTINES = 3,
  DEBUG_ALL = 4
} ac_spdb2symprod_debug_t;

typedef enum {
  HORIZ_ALIGN_LEFT = 0,
  HORIZ_ALIGN_CENTER = 1,
  HORIZ_ALIGN_RIGHT = 2
} ac_spdb2symprod_label_horiz_align_t;

typedef enum {
  VERT_ALIGN_TOP = 0,
  VERT_ALIGN_CENTER = 1,
  VERT_ALIGN_BOTTOM = 2
} ac_spdb2symprod_label_vert_align_t;

typedef struct {
  long x_offset;
  long y_offset;
} ac_spdb2symprod_label_offset_t;

typedef struct {
  double min_val;
  double max_val;
  char* color;
} ac_spdb2symprod_altitude_color_scale;

/*
 * typedef for main struct - ac_spdb2symprod_tdrp_struct
 */

typedef struct {

  size_t struct_size;

  /***** debug *****/

  ac_spdb2symprod_debug_t debug;

  /***** malloc_debug_level *****/

  long malloc_debug_level;

  /***** wait_msecs *****/

  long wait_msecs;

  /***** database_dir *****/

  char* database_dir;

  /***** product_label *****/

  char* product_label;

  /***** product_id *****/

  long product_id;

  /***** port *****/

  long port;

  /***** servmap_type *****/

  char* servmap_type;

  /***** servmap_subtype *****/

  char* servmap_subtype;

  /***** servmap_instance *****/

  char* servmap_instance;

  /***** realtime_avail *****/

  tdrp_bool_t realtime_avail;

  /***** display_ga *****/

  tdrp_bool_t display_ga;

  /***** polyline_width *****/

  long polyline_width;

  /***** plot_dirn_arrow *****/

  tdrp_bool_t plot_dirn_arrow;

  /***** dirn_arrow_head_len *****/

  double dirn_arrow_head_len;

  /***** sparse_icons *****/

  tdrp_bool_t sparse_icons;

  /***** sparse_icons_min_distance *****/

  double sparse_icons_min_distance;

  /***** before_secs *****/

  long before_secs;

  /***** display_before_icon *****/

  tdrp_bool_t display_before_icon;

  /***** before_icon *****/

  struct {
    long *val;
    int len;
  } before_icon;
  long *_before_icon;
  int before_icon_n;

  /***** before_icon_color *****/

  char* before_icon_color;

  /***** display_before_polyline *****/

  tdrp_bool_t display_before_polyline;

  /***** before_polyline_color *****/

  char* before_polyline_color;

  /***** display_current_icon *****/

  tdrp_bool_t display_current_icon;

  /***** current_icon *****/

  struct {
    long *val;
    int len;
  } current_icon;
  long *_current_icon;
  int current_icon_n;

  /***** current_icon_color *****/

  char* current_icon_color;

  /***** display_label *****/

  tdrp_bool_t display_label;

  /***** label_color *****/

  char* label_color;

  /***** label_font *****/

  char* label_font;

  /***** label_horiz_align *****/

  ac_spdb2symprod_label_horiz_align_t label_horiz_align;

  /***** label_vert_align *****/

  ac_spdb2symprod_label_vert_align_t label_vert_align;

  /***** label_offset *****/

  ac_spdb2symprod_label_offset_t label_offset;

  /***** after_secs *****/

  long after_secs;

  /***** display_after_icon *****/

  tdrp_bool_t display_after_icon;

  /***** after_icon *****/

  struct {
    long *val;
    int len;
  } after_icon;
  long *_after_icon;
  int after_icon_n;

  /***** after_icon_color *****/

  char* after_icon_color;

  /***** display_after_polyline *****/

  tdrp_bool_t display_after_polyline;

  /***** after_polyline_color *****/

  char* after_polyline_color;

  /***** color_by_altitude *****/

  tdrp_bool_t color_by_altitude;

  /***** altitude_color_scale *****/

  struct {
    ac_spdb2symprod_altitude_color_scale *val;
    int len;
  } altitude_color_scale;
  ac_spdb2symprod_altitude_color_scale *_altitude_color_scale;
  int altitude_color_scale_n;

  /***** plot_altitude_text *****/

  tdrp_bool_t plot_altitude_text;

  /***** altitude_font *****/

  char* altitude_font;

} ac_spdb2symprod_tdrp_struct;

/*
 * function prototypes
 */

/*************************************************************
 * ac_spdb2symprod_tdrp_load_from_args()
 *
 * Loads up TDRP using the command line args.
 *
 * Check TDRP_usage() for command line actions associated with
 * this function.
 *
 *   argc, argv: command line args
 *
 *   ac_spdb2symprod_tdrp_struct *params: loads up this struct
 * 
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *   char **params_path_p: if non-NULL, this is set to point to
 *                         the path of the params file used.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int ac_spdb2symprod_tdrp_load_from_args(int argc, char **argv,
                                ac_spdb2symprod_tdrp_struct *params,
                                char **override_list,
                                char **params_path_p);

/*************************************************************
 * ac_spdb2symprod_tdrp_load()
 *
 * Loads up TDRP for a given module.
 *
 * This version of load gives the programmer the option to load
 * up more than one module for a single application. It is a
 * lower-level routine than ac_spdb2symprod_tdrp_load_from_args,
 * and hence more flexible, but the programmer must do more work.
 *
 *   char *param_file_path: the parameter file to be read in.
 *
 *   ac_spdb2symprod_tdrp_struct *params: loads up this struct
 *
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *  expand_env: flag to control environment variable
 *                expansion during tokenization.
 *              If TRUE, environment expansion is set on.
 *              If FALSE, environment expansion is set off.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int ac_spdb2symprod_tdrp_load(char *param_file_path,
                      ac_spdb2symprod_tdrp_struct *params,
                      char **override_list,
                      int expand_env, int debug);

/*************************************************************
 * ac_spdb2symprod_tdrp_load_defaults()
 *
 * Loads up defaults for a given module.
 *
 * See ac_spdb2symprod_tdrp_load() for more details.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int ac_spdb2symprod_tdrp_load_defaults(ac_spdb2symprod_tdrp_struct *params,
                               int expand_env);

/*************************************************************
 * ac_spdb2symprod_tdrp_sync()
 *
 * Syncs the user struct data back into the parameter table,
 * in preparation for printing.
 */

extern void ac_spdb2symprod_tdrp_sync(void);

/*************************************************************
 * ac_spdb2symprod_tdrp_print()
 * 
 * Print params file
 *
 * The modes supported are:
 *
 *   PRINT_SHORT:   main comments only, no help or descriptions
 *                  structs and arrays on a single line
 *   PRINT_NORM:    short + descriptions and help
 *   PRINT_LONG:    norm  + arrays and structs expanded
 *   PRINT_VERBOSE: long  + private params included
 */

extern void ac_spdb2symprod_tdrp_print(FILE *out, tdrp_print_mode_t mode);

/*************************************************************
 * ac_spdb2symprod_tdrp_free_all()
 *
 * Frees up all TDRP dynamic memory.
 */

extern void ac_spdb2symprod_tdrp_free_all(void);

/*************************************************************
 * ac_spdb2symprod_tdrp_check_all_set()
 *
 * Return TRUE if all set, FALSE if not.
 *
 * If out is non-NULL, prints out warning messages for those
 * parameters which are not set.
 */

extern int ac_spdb2symprod_tdrp_check_all_set(FILE *out);

/*************************************************************
 * ac_spdb2symprod_tdrp_check_is_set()
 *
 * Return TRUE if parameter is set, FALSE if not.
 *
 */

extern int ac_spdb2symprod_tdrp_check_is_set(char *param_name);

/*************************************************************
 * ac_spdb2symprod_tdrp_array_realloc()
 *
 * Realloc 1D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int ac_spdb2symprod_tdrp_array_realloc(char *param_name,
                              int new_array_n);

/*************************************************************
 * ac_spdb2symprod_tdrp_array2D_realloc()
 *
 * Realloc 2D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int ac_spdb2symprod_tdrp_array2D_realloc(char *param_name,
                                 int new_array_n1,
                                 int new_array_n2);

/*************************************************************
 * ac_spdb2symprod_tdrp_table()
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *ac_spdb2symprod_tdrp_table(void);

/*************************************************************
 * ac_spdb2symprod_tdrp_init()
 *
 * Module table initialization function.
 *
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *ac_spdb2symprod_tdrp_init(ac_spdb2symprod_tdrp_struct *params);

#ifdef __cplusplus
}
#endif

#endif

