/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.tstorms_spdb2symprod
 *
 * This file contains the TDRP parameter definitions for
 * tstorms_spdb2symprod.
 */


/***********************************************************************
 * Debugging
 */

paramdef enum debug_t
{
  p_descr = "debug level";
  p_help = "Debug level: DEBUG_OFF, DEBUG_ERRORS, DEBUG_MSGS, DEBUG_ROUTINES, DEBUG_ALL.";
  p_options = { DEBUG_OFF, DEBUG_ERRORS, DEBUG_MSGS, DEBUG_ROUTINES, DEBUG_ALL };
  p_default = { DEBUG_OFF };
} debug;

paramdef long
{
  p_descr = "malloc debug level";
  p_help = "0 = none, 1 = corruption checking, 2 = record all malloc blocks and checks, 3 = printout of all mallocs, etc.";
  p_default = { 0 };
  p_min = { 0 };
  p_max = { 3 };
} malloc_debug_level;


/***********************************************************************
 * Input parameters
 */

paramdef string
{
  p_descr = "database directory";
  p_help = "Directory containing SPDB database.";
  p_default = { "." };
} database_dir;

paramdef string
{
  p_descr = "product label";
  p_help = "The product label used in the SPDB database to uniquely identify this product.";
  p_default = { "TITAN_STORMS" };
} product_label;

paramdef long
{
  p_descr = "product id";
  p_help = "Number which uniquely identifies this product in the SPDB database.";
  p_default = { 20020 };
} product_id;

/***********************************************************************
 * Output parameters
 */

paramdef long
{
  p_descr = "port";
  p_help = "Server port number.";
  p_default = { 62020 };
} port;

paramdef string
{
  p_descr = "servmap type";
  p_help = "Server mapper type for this server.";
  p_default = { "Spdb" };
} servmap_type;

paramdef string
{
  p_descr = "servmap subtype";
  p_help = "Server mapper subtype for this server.  The type is always Spdb.";
  p_default = { "Tstorms" };
} servmap_subtype;

paramdef string
{
  p_descr = "servmap instance";
  p_help = "Server mapper instance for this server.  The type is always Spdb.";
  p_default = { "Test" };
} servmap_instance;

paramdef boolean
{
  p_descr = "realtime available flag";
  p_help = "Flag indicating if realtime data is available from this server.";
  p_default = { TRUE };
} realtime_avail;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Valid forecasts only flag";
  p_help = "If set, only valid forecasts will be sent. If not, all forecasts will be sent.";
} valid_forecasts_only;

/***********************************************************************
 * Plotting choices
 */

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot current shape flag";
  p_help = "If set, the current storm shape will be sent.";
} plot_current;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot forecast shape flag";
  p_help = "If set, the forecast storm shape will be sent.";
} plot_forecast;

paramdef long
{
  p_default = {1800};
  p_descr = "Forecast lead time (secs).";
  p_help = "Lead time for forecast shapes and positions.";
} forecast_lead_time;

paramdef boolean
{
  p_descr = "Forecast line dashed flag";
  p_help = "If set, the forecast will be rendered using a dashed line rather than a solid line.";
  p_default =  { TRUE };
} forecast_dashed;

paramdef enum storm_shape
{
  p_descr = "Shape type";
  p_help = "Determines the way in which the storm is represented.";
  p_options = { ELLIPSE_SHAPE, POLYGON_SHAPE };
  p_default = { POLYGON_SHAPE };
} storm_shape;

paramdef boolean
{
  p_default = {FALSE};
  p_descr = "Plot trend";
  p_help = "If set, the storm size and intensity trend will be included as text: '+' or '-'.";
} plot_trend;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot speed";
  p_help = "If set, speed is placed at the head of the vector.";
} plot_speed;

typedef enum 
{
  SPEED_KMH, SPEED_KNOTS, SPEED_MPH
} speed_units_t;

paramdef enum speed_units_t
{
  p_default = SPEED_KMH;
  p_descr = "Units for plotting speed.";
  p_help = "The speed is computed in knk. The speed will be converted and plotted in these units.";
} speed_units;

paramdef boolean
{
  p_default = {FALSE};
  p_descr = "Plot speed rounded to nearest 5.";
  p_help = "Default is not rounded.";
} speed_round;

paramdef boolean
{
  p_default = {FALSE};
  p_descr = "Plot top";
  p_help = "If set, top value is placed at the head of the vector.";
} plot_top;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot top value in kilometers";
  p_help = "If FALSE, top value is plotted in 100s of feet.";
} top_km;

/***********************************************************************
 * Polygon smoothing
 */

paramdef boolean
{
  p_default = {FALSE};
  p_descr = "Smooth the storm polygon";
  p_help = "If TRUE and storm_shape is POLYGON_SHAPE, the storm polygon will be "
           "smoothed within the boundaries defined by inner_bnd_multiplier and "
           "outer_bnd_multiplier.";
} hull_smooth;

paramdef double
{
  p_descr = "Inner boundary multiplier for storm smoothing";
  p_help = "Multipliers less than 1.0 produce an inner boundary smaller "
           "than the original storm. Multipliers greater than 1.0 "
           "produce an inner boundary larger than the original storm. "
           "inner_bnd_multiplier must be <= outer_bnd_multiplier";
  p_min = { 0.0 };
  p_default = { 1.0 };
} inner_bnd_multiplier;

paramdef double
{
  p_descr = "Outer boundary multiplier for storm smoothing";
  p_help = "Multipliers less than 1.0 produce an outer boundary smaller "
           "than the original storm. Multipliers greater than 1.0 "
           "produce an outer boundary larger than the original storm. "
           "outer_bnd_multiplier must be >= inner_bnd_multiplier";
  p_min = { 0.0 };
  p_default = { 1.0 };
} outer_bnd_multiplier;

/***********************************************************************
 * Vectors
 */

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot vector flag";
  p_help = "If set, the forecast vector be sent.";
} plot_vectors;

paramdef double
{
  p_descr = "Length of arrow head (km).";
  p_default = { 2.0 };
  p_min = { 0.0 };
} arrow_head_len;

paramdef double
{
  p_descr = "Half angle of arrow head (deg).";
  p_default = { 20.0 };
  p_min = { 0.0 };
  p_max = { 90.0 };
} arrow_head_half_angle;

paramdef boolean
{
  p_default = {FALSE};
  p_descr = "Fixed length arrows flag";
  p_help = "If flag set, direction arrows are of fixed lenght. If not set, arrows are scaled to length for time forecast_lead_time.";
} fixed_length_arrows;

paramdef double
{
  p_descr = "Shaft length arrow head (km).";
  p_help = "This is used if 'fixed_length_arrows' is TRUE.";
  p_default = { 20.0 };
  p_min = { 0.0 };
} arrow_shaft_length;

/***********************************************************************
 * Colors
 */

paramdef string
{
  p_descr = "current color";
  p_help = "Name of color suggested for rendering the current storm.";
  p_default = { "yellow" };
} current_color;

paramdef string
{
  p_descr = "forecast color";
  p_help = "Name of color suggested for rendering the forecast storm.";
  p_default = { "yellow" };
} forecast_color;

paramdef string
{
  p_descr = "motion vector color";
  p_help = "Name of color suggested for rendering the motion vector.";
  p_default = { "yellow" };
} vector_color;

paramdef string
{
  p_descr = "text color";
  p_help = "Name of color suggested for rendering the text.";
  p_default = { "yellow" };
} text_color;

paramdef string
{
  p_descr = "text background color";
  p_help = "Name of color suggested for rendering the background for the text.  Set to blank string (the default) to use the default background color.";
  p_default = { "" };
} text_background_color;

/***********************************************************************
 * Fonts
 */

paramdef string
{
  p_descr = "text font name";
  p_help = "The name of the X font to be used when rendering the text.";
  p_default = { "8x13" };
} text_font;

/***********************************************************************
 * Line styles
 */

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_options = { LINETYPE_SOLID,
                LINETYPE_DASH,
                LINETYPE_DOT_DASH };
  p_default = { LINETYPE_SOLID };
} suggested_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} suggested_line_width;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_options = { CAPSTYLE_BUTT,
                CAPSTYLE_NOT_LAST,
                CAPSTYLE_PROJECTING,
                CAPSTYLE_ROUND };
  p_default = { CAPSTYLE_BUTT };
} suggested_capstyle;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_options = { JOINSTYLE_BEVEL,
                JOINSTYLE_MITER,
                JOINSTYLE_ROUND };
  p_default = { JOINSTYLE_BEVEL };
} suggested_joinstyle;

