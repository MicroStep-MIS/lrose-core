/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.tstorms_spdb2symprod
 *
 * This file contains the TDRP parameter definitions for
 * tstorms_spdb2symprod.
 */


/***********************************************************************
 * Debugging
 */

paramdef enum debug_t
{
  p_descr = "debug level";
  p_help = "Debug level: DEBUG_OFF, DEBUG_ERRORS, DEBUG_MSGS, DEBUG_ROUTINES, DEBUG_ALL.";
  p_options = { DEBUG_OFF, DEBUG_ERRORS, DEBUG_MSGS, DEBUG_ROUTINES, DEBUG_ALL };
  p_default = { DEBUG_OFF };
} debug;

paramdef long
{
  p_descr = "malloc debug level";
  p_help = "0 = none, 1 = corruption checking, 2 = record all malloc blocks and checks, 3 = printout of all mallocs, etc.";
  p_default = { 0 };
  p_min = { 0 };
  p_max = { 3 };
} malloc_debug_level;


/***********************************************************************
 * Input parameters
 */

paramdef string
{
  p_descr = "database directory";
  p_help = "Directory containing SPDB database.";
  p_default = { "." };
} database_dir;

paramdef string
{
  p_descr = "product label";
  p_help = "The product label used in the SPDB database to uniquely identify this product.";
  p_default = { "VERGRID_REGION" };
} product_label;

paramdef long
{
  p_descr = "product id";
  p_help = "Number which uniquely identifies this product in the SPDB database.";
  p_default = { 20500 };
} product_id;

/***********************************************************************
 * Output parameters
 */

paramdef long
{
  p_descr = "port";
  p_help = "Server port number.";
  p_default = { 67100 };
} port;

paramdef string
{
  p_descr = "servmap type";
  p_help = "Server mapper type for this server.";
  p_default = { "Spdb" };
} servmap_type;

paramdef string
{
  p_descr = "servmap subtype";
  p_help = "Server mapper subtype for this server.  The type is always Spdb.";
  p_default = { "Symprod" };
} servmap_subtype;

paramdef string
{
  p_descr = "servmap instance";
  p_help = "Server mapper instance for this server.  The type is always Spdb.";
  p_default = { "VerGrid" };
} servmap_instance;

paramdef boolean
{
  p_descr = "realtime available flag";
  p_help = "Flag indicating if realtime data is available from this server.";
  p_default = { TRUE };
} realtime_avail;

/***********************************************************************
 * Plotting choices
 */

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot product associated with truth data.";
  p_help = "The product comprises a dashed circle for each region for which the coverage of truth data exceeds the truth_percentage_threshold. If plot_text is TRUE, the actual percentage is also shown at the center of the region.";
} plot_truth;

paramdef double
{
  p_default = {20.0};
  p_descr = "Truth percentage threshold (%).";
  p_help = "If the coverage of truth data exceeds this threshold, the circle and optional text are plotted.";
} truth_percentage_threshold;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot product associated with forecast data.";
  p_help = "The product comprises a dashed circle for each region for which the coverage of forecast data exceeds the forecast_percentage_threshold. If plot_text is TRUE, the actual percentage is also shown at the center of the region.";
} plot_forecast;

paramdef double
{
  p_default = {20.0};
  p_descr = "Forecast percentage threshold (%).";
  p_help = "If the coverage of forecast data exceeds this threshold, the circle and optional text are plotted.";
} forecast_percentage_threshold;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot text at region center.";
  p_help = "If set, the actual coverage percentages will be plotted at the center of each region.";
} plot_text;

paramdef boolean
{
  p_default = {FALSE};
  p_descr = "Put time string at bottom of circle.";
  p_help = "This is intended as a debugging option, so that the user can view the product time.";
} plot_time;

/***********************************************************************
 * Colors
 */

paramdef string
{
  p_descr = "Color for truth product.";
  p_help = "Name of color suggested for rendering circles and text associated with truth data.";
  p_default = { "red" };
} truth_color;

paramdef string
{
  p_descr = "Color for forecast product.";
  p_help = "Name of color suggested for rendering circles and text associated with forecast data.";
  p_default = { "orange" };
} forecast_color;

paramdef string
{
  p_descr = "Color for product time.";
  p_help = "Name of color suggested for rendering time string.";
  p_default = { "white" };
} time_color;

paramdef string
{
  p_descr = "text background color";
  p_help = "Name of color suggested for rendering the background for the text.  Set to blank string (the default) to use the default background color.";
  p_default = { "black" };
} text_background_color;

/***********************************************************************
 * Fonts
 */

paramdef string
{
  p_descr = "text font name";
  p_help = "The name of the X font to be used when rendering the text.";
  p_default = { "8x13" };
} text_font;

/***********************************************************************
 * Line styles
 */

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_options = { LINETYPE_SOLID,
                LINETYPE_DASH,
                LINETYPE_DOT_DASH };
  p_default = { LINETYPE_SOLID };
} suggested_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} suggested_line_width;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_options = { CAPSTYLE_BUTT,
                CAPSTYLE_NOT_LAST,
                CAPSTYLE_PROJECTING,
                CAPSTYLE_ROUND };
  p_default = { CAPSTYLE_BUTT };
} suggested_capstyle;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_options = { JOINSTYLE_BEVEL,
                JOINSTYLE_MITER,
                JOINSTYLE_ROUND };
  p_default = { JOINSTYLE_BEVEL };
} suggested_joinstyle;

