/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.bdry_spdb2symprod
 *
 * This file contains the TDRP parameter definitions for
 * bdry_spdb2symprod.
 */


/***********************************************************************
 * Debugging
 */

paramdef enum debug_t
{
  p_descr = "debug level";
  p_help = "Debug level: DEBUG_OFF, DEBUG_ERRORS, DEBUG_MSGS, DEBUG_ROUTINES, DEBUG_ALL.";
  p_options = { DEBUG_OFF, DEBUG_ERRORS, DEBUG_MSGS, DEBUG_ROUTINES, DEBUG_ALL };
  p_default = { DEBUG_OFF };
} debug;

paramdef long
{
  p_descr = "malloc debug level";
  p_help = "0 = none, 1 = corruption checking, 2 = record all malloc blocks and checks, 3 = printout of all mallocs, etc.";
  p_default = { 0 };
  p_min = { 0 };
  p_max = { 3 };
} malloc_debug_level;


/***********************************************************************
 * Operational parameters
 */

paramdef long
{
  p_descr = "wait msecs";
  p_help = "Number of milliseconds to wait before timing out socket operations.";
  p_default = { 100 };
} wait_msecs;

paramdef double
{
  p_descr = "vertex latitude shift";
  p_help = "This value is added to the latitude of each vertex in each boundary to shift the boundaries relative to a new location.";
  p_default = { 0.0 };
} latitude_shift;

paramdef double
{
  p_descr = "vertex longitude shift";
  p_help = "This value is added to the longitude of each vertex in each boundary to shift the boundaries relative to a new location.";
  p_default = { 0.0 };
} longitude_shift;


/***********************************************************************
 * Input parameters
 */

paramdef string
{
  p_descr = "database directory";
  p_help = "Directory containing SPDB database.";
  p_default = { "." };
} database_dir;

paramdef string
{
  p_descr = "product label";
  p_help = "The product label used in the SPDB database to uniquely identify this product.";
  p_default = { "Boundary Data" };
} product_label;

paramdef long
{
  p_descr = "product id";
  p_help = "Number which uniquely identifies this product in the SPDB database.";
  p_default = { 300 };
} product_id;

/***********************************************************************
 * Output parameters
 */

paramdef long
{
  p_descr = "port";
  p_help = "Server port number.";
  p_default = { 62000 };
} port;

paramdef string
{
  p_descr = "servmap type";
  p_help = "Server mapper type for this server.";
  p_default = { "Spdb" };
} servmap_type;

paramdef string
{
  p_descr = "servmap subtype";
  p_help = "Server mapper subtype for this server.  The type is always Spdb.";
  p_default = { "Symprod" };
} servmap_subtype;

paramdef string
{
  p_descr = "servmap instance";
  p_help = "Server mapper instance for this server.  The type is always Spdb.";
  p_default = { "Test" };
} servmap_instance;

paramdef boolean
{
  p_descr = "realtime available flag";
  p_help = "Flag indicating if realtime data is available from this server.";
  p_default = { TRUE };
} realtime_avail;

/***********************************************************************
 * Display parameters
 */

paramdef boolean
{
  p_descr = "display detection flag";
  p_help = "If FALSE, the detections will not be displayed.";
  p_default = { true };
} display_detections;

paramdef string
{
  p_descr = "detection color";
  p_help = "Name of color suggested for rendering the detection polyline.";
  p_default = { "purple" };
} detection_color;

paramdef boolean
{
  p_descr = "display extrapolation flag";
  p_help = "If FALSE, the extrapolations will not be displayed.";
  p_default = { true };
} display_extrapolations;

paramdef string
{
  p_descr = "extrapolation color";
  p_help = "Name of color suggested for rendering the extrapolation polyline.";
  p_default = { "blue" };
} extrapolation_color;

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_options = { LINETYPE_SOLID,
                LINETYPE_DASH,
                LINETYPE_DOT_DASH };
  p_default = { LINETYPE_SOLID };
} display_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} display_line_width;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_options = { CAPSTYLE_BUTT,
                CAPSTYLE_NOT_LAST,
                CAPSTYLE_PROJECTING,
                CAPSTYLE_ROUND };
  p_default = { CAPSTYLE_BUTT };
} display_capstyle;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_options = { JOINSTYLE_BEVEL,
                JOINSTYLE_MITER,
                JOINSTYLE_ROUND };
  p_default = { JOINSTYLE_BEVEL };
} display_joinstyle;

paramdef boolean
{
  p_descr = "display label flag";
  p_help = "If TRUE, the boundary label will be displayed with the boundary.";
  p_default = { TRUE };
} display_label;

paramdef enum label_source
{
  p_descr = "label source flag";
  p_help = "Label indicating where to get the label for the boundary.  For COLIDE boundaries, the label should come from the description field in the shape.  For other boundaries, I would expect the label to come from within the polyline itself since each shape is allowed to contain more than one polyline.";
  p_options = { LABEL_DESCRIP,
                LABEL_POLYLINE };
  p_default = { LABEL_POLYLINE };
} label_source;

paramdef string
{
  p_descr = "label font name";
  p_help = "The name of the X font to be used when rendering the label.";
  p_default = { "8x13" };
} label_font;

paramdef boolean
{
  p_descr = "display vector flag";
  p_help = "If TRUE, the motion vector will be displayed with the boundary.";
  p_default = { FALSE };
} display_vector;

paramdef string
{
  p_descr = "motion vector color";
  p_help = "Name of color suggested for rendering the motion vector.";
  p_default = { "purple" };
} vector_color;

paramdef long
{
  p_descr = "extrapolation seconds to use when rendering the motion vector";
  p_help = "Since we are now extrapolating the boundaries upon request, we don't know the extrapolation time period anymore.  So, we must now supply it.";
  p_default = { 0 };
  p_min = { 0 };
} extrap_secs;

paramdef double
{
  p_descr = "Vector arrowhead length in km";
  p_default = { 5.0 };
} head_length;

paramdef double
{
  p_descr = "Vector arrowhead half angle in degrees";
  p_help = "This is the angle between the arrowhead line and the vector line.";
  p_default = { 45.0 };
} head_half_angle;

paramdef boolean
{
  p_descr = "calculate extrapolations flag";
  p_help = "If TRUE, the server will calculate the extrapolation polylines rather than using the extrapolations in the database.";
  p_default = { FALSE };
} calc_extrapolations;

paramdef boolean 
{
  p_descr = "use point motion extrapolation method";
  p_help = "If TRUE, and calc_extrapolations is TRUE, extrapolate each point of the boundary based on speed of the boundary at that point.  If FALSE, the average motion vector will be used to calculate the extrapolation";
  p_default = {FALSE};
} point_extrapolations;
