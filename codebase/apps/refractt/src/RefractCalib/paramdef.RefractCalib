/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.RefractCalib
 *
 * This file contains the TDRP parameter definitions for
 * RefractCalib
 */


commentdef
{
  p_header = "RefractCalib";
  p_text = "This program creates the calibration file used by Refract.";
};

paramdef boolean
{
  p_descr = "Flag indicating whether to write debug MDV files";
  p_default = false;
} write_debug_mdv_files;

paramdef string
{
  p_descr = "Debug MDV file URL";
  p_default = "mdvp:://localhost::mdv/debug/RefractCalib";
} debug_mdv_url;


paramdef boolean
{
  p_descr = "Flag indicating whether to use a file list for input data, or a range of times";
  p_help = "TRUE means use the file list, FALSE means use a range of times.";
  p_default = true;
} file_list_inputs;

paramdef string
{
  p_descr = "Host on which target files are found";
  p_default = "localhost";
} target_files_host;

paramdef string
{
  p_descr = "Host on which calibration files are found";
  p_default = "localhost";
} calibration_files_host;

paramdef string
{
  p_descr = "List of files to use for target identification, when file_list_inputs=true";
  p_default = { "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804183718.KFTG_RVP.0.0.4_SUR_v368",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804183832.KFTG_RVP.0.0.4_SUR_v370",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804184738.KFTG_RVP.0.0.4_SUR_v375",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804185329.KFTG_RVP.0.0.4_SUR_v383",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804185919.KFTG_RVP.0.0.4_SUR_v391",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804190509.KFTG_RVP.0.0.4_SUR_v399",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804191100.KFTG_RVP.0.0.4_SUR_v407",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804191650.KFTG_RVP.0.0.4_SUR_v415",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804192240.KFTG_RVP.0.0.4_SUR_v423",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804192830.KFTG_RVP.0.0.4_SUR_v431",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804193420.KFTG_RVP.0.0.4_SUR_v439",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804194010.KFTG_RVP.0.0.4_SUR_v447",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804194600.KFTG_RVP.0.0.4_SUR_v455",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804195150.KFTG_RVP.0.0.4_SUR_v463",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804195740.KFTG_RVP.0.0.4_SUR_v471",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804200330.KFTG_RVP.0.0.4_SUR_v479",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804200919.KFTG_RVP.0.0.4_SUR_v487",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804201508.KFTG_RVP.0.0.4_SUR_v495",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804202058.KFTG_RVP.0.0.4_SUR_v503",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804202647.KFTG_RVP.0.0.4_SUR_v511",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804210134.KFTG_RVP.0.0.4_SUR_v517",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804210207.KFTG_RVP.0.0.4_SUR_v518",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804210756.KFTG_RVP.0.0.4_SUR_v526",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804211346.KFTG_RVP.0.0.4_SUR_v534",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/target_id/swp.1060804211936.KFTG_RVP.0.0.4_SUR_v542" };
} target_id_file_list[];

paramdef string
{
  p_descr = "List of files to use for calibration, when file_list_inputs=true";
  p_default = { "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807000458.KFTG_RVP.0.0.5_SUR_v8",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807000602.KFTG_RVP.0.0.6_SUR_v10",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807001047.KFTG_RVP.0.0.5_SUR_v16",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807001635.KFTG_RVP.0.0.5_SUR_v24",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807002224.KFTG_RVP.0.0.5_SUR_v32",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807002813.KFTG_RVP.0.0.5_SUR_v40",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807003401.KFTG_RVP.0.0.5_SUR_v48",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807003950.KFTG_RVP.0.0.5_SUR_v56",
                "$(RAP_DATA_DIR)/apps/refractt/src/RefractCalib/KFTG/raw/calib/swp.1060807004539.KFTG_RVP.0.0.5_SUR_v64" };
} calibration_file_list[];

typedef struct
{
  int year;
  int month;
  int day;
  int hour;
  int min;
  int sec;
} Time_t;

paramdef string
{
  p_descr = "Path with files to use for target identification when file_list_inputs = false, can be relative to $RAP_DATA_DIR";
  p_default = "./data";
} target_files_path;

paramdef struct Time_t
{
  p_descr = "Starting/ending time for target identification data when file_list_inputs = false";
  p_default = {{2017, 3, 21, 0, 0, 0}, {2017, 3, 22, 0, 0, 0}};
} target_files_time_range[2];

paramdef string
{
  p_descr = "Path with files to use for calibration when file_list_inputs = false, can be relative to $RAP_DATA_DIR";
  p_default = "./data";
} calibration_files_path;

paramdef struct Time_t
{
  p_descr = "Starting/ending time for calibration data when file_list_inputs = false";
  p_default = {{2017, 3, 21, 0, 0, 0}, {2017, 3, 22, 0, 0, 0}};
} calibration_files_time_range[2];

/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

paramdef string
{
  p_descr = "Reference file path";
  p_help = "Full path for the file containing calibration information.  "
           "This is the file that is created by the calibration and used "
           "as input to the Refract algorithm.";
  p_default = "";
} ref_file_path;

paramdef string
{
  p_descr = "Reference file url";
  p_help = "Second path in which time stamped MDV is written so as to be useful in display";
  p_default = "";
} ref_url;

paramdef double
{
  p_descr = "Antenna beam width in degrees";
  p_default = 0.92;
} beam_width;

paramdef long
{
  p_descr = "Min range gate of ground echo";
  p_min = 1;
  p_default = 4;
} r_min;

paramdef double
{
  p_descr = "Side lobe power";
  p_help = "Echoes below this value of integrated power are considered "
           "to be from sidelobes.";
  p_max = -10.0;
  p_default = -75.0;
} side_lobe_pow;

typedef enum
{
  ENTER_N,
  ENTER_P_T_TD
} entry_type_t;

paramdef enum entry_type_t
{
  p_descr = "Type of data entry for the calibration calculation.";
  p_help = "\tENTER_N - N is entered directly in the calib_n parameter.\n"
           "\tENTER_P_T_TD - Pressure is entered in the calib_pressure "
           "parameter, temperature is entered in the calib_temperature "
           "parameter and dew point temperature is entered in the "
           "calib_dewpoint_temperature paramtere.\n";
  p_default = ENTER_N;
} entry_type;

paramdef double
{
  p_descr = "N value to use in the calibration.";
  p_help = "Used only if entry_type is set to ENTER_N.";
  p_default = 1.0;
} calib_n;

paramdef double
{
  p_descr = "Pressure value to use in the calibration.";
  p_help = "This is the station pressure, NOT the sea level pressure. "
           "Used only if entry_type is set to ENTER_P_T_TD.";
  p_default = 260.0;
} calib_pressure;

paramdef double
{
  p_descr = "Temperature value to use in the calibration.";
  p_help = "Used only if entry_type is set to ENTER_P_T_TD.";
  p_default = 1.0;
} calib_temperature;

paramdef double
{
  p_descr = "Dewpoint temperature to use in the calibration.";
  p_help = "Unsed only if entry_type is set to ENTER_P_T_TD.";
  p_default = 1.0;
} calib_dewpoint_temperature;


/***********************************************************************
 * Colorscale parameters.
 */

commentdef
{
  p_header = "COLORSCALE PARAMETERS";
  p_text = "These colorscale files can be generated as a convenience to the "
           "user. "
           "They are not required for the calculating of the calibration.";
};

paramdef boolean
{
  p_descr = "Flag indicating whether to create the strength colorscale "
            "file.";
  p_help = "This creates a CIDD colorscale file that matches the colors "
           "used by Frederic Fabry in his original n_viewcalib program.";
  p_default = false;
} create_strength_colorscale;

paramdef string
{
  p_descr = "Full path for the strength colorscale file.";
  p_help = "Used only if create_strength_colorscale is set to true.";
  p_default = "colorscales/strength.colors";
} strength_colorscale_path;

paramdef boolean
{
  p_descr = "Flag indicating whether to create the quality colorscale file.";
  p_help = "This creates a CIDD colorscale file that matches the colors "
           "used by Frederic Fabry in his original n_viewcalib program.";
  p_default = false;
} create_quality_colorscale;

paramdef string
{
  p_descr = "Full path for the quality colorscale file.";
  p_help = "Used only if create_quality_colorscale is set to true.";
  p_default = "colorscales/quality.colors";
} quality_colorscale_path;
