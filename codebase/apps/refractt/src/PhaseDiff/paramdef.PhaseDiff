/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.PhaseDiff
 *
 * This file contains the TDRP parameter definitions for
 * PhaseDiff.
 */


commentdef
{
  p_header = "PhaseDiff";
  p_text = "This program calculates the phase difference between two radar "
           "scans. "
           "It is used to evaluate scans for use in calibrating the "
           "refractivity algorithm.";
};

/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_default = false;
} debug;

paramdef boolean
{
  p_descr = "verbose debug flag";
  p_help = "If true, verbose debug messages will be printed.";
  p_default = false;
} verbose;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process triggering.
 */

commentdef
{
  p_header = "PROCESS TRIGGERING PARAMETERS";
  p_text = "Parameters describing the process triggering.";
};

typedef enum
{
  TIME_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In TIME_LIST mode, the program operates on every input file "
           "between the start and end times specified on the command line.\n";
  p_default = TIME_LIST;
} trigger_mode;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

paramdef string
{
  p_descr = "Input URL";
  p_default = "mdvp:://localhost::mdv/radar";
} input_url;

paramdef boolean
{
  p_descr = "Flag indicating whether the raw I and Q values are included in "
            "the input stream.";
  p_help = "If true, the raw fields will be read from the input stream. "
           "If false, the raw fields will be calculated from the NIQ/AIQ "
           "values which must be inluded in the input stream instead.";
  p_default = true;
} raw_iq_in_input;

paramdef string
{
  p_descr = "Raw I field name in the input stream.";
  p_help = "Used only if raw_iq_in_input is set to TRUE.";
  p_default = "MeanI";
} raw_i_field_name;

paramdef string
{
  p_descr = "Raw Q field name in the input stream.";
  p_help = "Used only if raw_iq_in_input is set to TRUE.";
  p_default = "MeanQ";
} raw_q_field_name;

paramdef string
{
  p_descr = "NIQ field name in the input stream.";
  p_help = "Used only if raw_iq_in_input is set to FALSE.";
  p_default = "NIQ";
} niq_field_name;

paramdef double
{
  p_descr = "Input NIQ scale value";
  p_help = "The NIQ value from the input source is multiplied by this "
           "value before the data is used. "
           "For most radars this value should be 0.1. "
           "For SPOL this value should be 0.025.";
  p_default = 0.1;
} input_niq_scale;

paramdef boolean
{
  p_descr = "Flag indicating whether to invert the sign of the target angles.";
  p_help = "This fix should be done upstream, but is added here "
           "just in case.\n"
           "Used only if raw_iq_in_input is set to FALSE.";
  p_default = false;
} invert_target_angle_sign;

paramdef string
{
  p_descr = "AIQ field name in the input stream.";
  p_help = "Used only if raw_iq_in_input is set to FALSE.";
  p_default = "AIQ";
} aiq_field_name;

paramdef boolean
{
  p_descr = "Flag indicating whether the SNR field is included in "
            "the input stream.";
  p_help = "If true, the SNR field will be read from the input stream. "
           "If false, the SNR field will be calculated from the "
           "power field which must be inluded in the input stream.\n"
           "The SNR field is only needed if the raw I/Q values are not "
           "included in the input files and so must be calculated from the "
           "NIQ/AIQ values.";
  p_default = true;
} snr_in_input;

paramdef string
{
  p_descr = "Signal-to-noise ratio field name in the input stream.";
  p_default = "SNR";
} snr_field_name;

paramdef string
{
  p_descr = "Power field name in the input stream.";
  p_default = "DM";
} power_field_name;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::apps/refract/src/PhaseDiff/TiMREX/output";
} output_url;


/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

paramdef long
{
  p_descr = "Lookback period in seconds";
  p_help = "This is the length of time to look back to find the radar "
           "file to use for differencing. "
           "This should generally be set somewhere between 30 and 60 minutes.";
  p_default = 1800;
} lookback_secs;

paramdef long
{
  p_descr = "Lookback search margin in seconds.";
  p_help = "If there is no radar file within this number of seconds of the "
           "trigger file time minus lookback_secs, no output file will be "
           "produced.";
  p_default = 300;
} lookback_search_margin;

paramdef long
{
  p_descr = "Index of the tilt we are processing in the radar volume";
  p_min = 0;
  p_default = 0;
} elevation_num;


/***********************************************************************
 * Colorscale parameters.
 */

commentdef
{
  p_header = "COLORSCALE PARAMETERS";
  p_text = "These colorscale files can be generated as a convenience to the "
           "user. "
           "They are not required for the calculating of the phase "
           "difference fields.";
};

paramdef boolean
{
  p_descr = "Flag indicating whether to create the phase diff colorscale "
            "file.";
  p_help = "This creates a CIDD colorscale file that matches the colors "
           "used by Frederic Fabry in his original phase_diff program.";
  p_default = false;
} create_phase_diff_colorscale;

paramdef string
{
  p_descr = "Full path for the phase diff colorscale file.";
  p_help = "Used only if create_phase_diff_colorscale is set to true.";
  p_default = "colorscales/phase_diff.colors";
} phase_diff_colorscale_path;

paramdef boolean
{
  p_descr = "Flag indicating whether to create the NIQ colorscale file.";
  p_help = "This creates a CIDD colorscale file that matches the colors "
           "used by Frederic Fabry in his original phase_diff program.";
  p_default = false;
} create_niq_colorscale;

paramdef string
{
  p_descr = "Full path for the NIQ colorscale file.";
  p_help = "Used only if create_niq_colorscale is set to true.";
  p_default = "colorscales/niq.colors";
} niq_colorscale_path;
