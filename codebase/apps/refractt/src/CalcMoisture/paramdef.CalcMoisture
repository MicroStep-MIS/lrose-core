/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.CalcMoisture
 *
 * This file contains the TDRP parameter definitions for
 * CalcMoisture
 */


commentdef
{
  p_header = "CalcMoisture";
  p_text = "This program calculates water vapor pressure (e) and "
           "dew point temperature based on the refractivity N field and "
           "the mean temperature and pressure values from a group of "
           "weather stations.";
};

/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = false;
} debug;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process triggering.
 */

commentdef
{
  p_header = "PROCESS TRIGGERING PARAMETERS";
  p_text = "Parameters describing the process triggering.";
};

typedef enum
{
  LATEST_DATA,
  TIME_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In LATEST_DATA mode, the program waits for N field data before "
           "doing any processing.\n"
           "In TIME_LIST mode, the program operates on archive data as "
           "specified in the time_list_trigger parameter.\n";
  p_default = "LATEST_DATA";
} trigger_mode;

typedef struct
{
  string start_time;
  string end_time;
} time_list_trigger_t;

paramdef struct time_list_trigger_t
{
  p_descr = "Trigger information used when using the TIME_LIST trigger";
  p_help = "\tstart_time specifies the archive start time in any format "
           "recognized by the DateTime class.\n"
           "\tend_time specifies the archive end time in any format "
           "recognized by the DateTime class.";
  p_default = { "2001/1/1 00:00:00",
                "2002/1/2 00:00:00" };
} time_list_trigger;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef struct
{
  string url;
  boolean use_field_name;
  string field_name;
  long field_num;
} input_info_t;

paramdef struct input_info_t
{
  p_descr = "Field which contains the calculated N values";
  p_help = "\turl - URL for the N field.\n"
           "\tuse_field_name - Flag indicating whether to use the field name "
           "or the field number to identify the N field.\n"
           "\tfield_name - Field name for the N field in the MDV file. "
           "Used only if use_field_name is set to true.\n"
           "\tfield_num - Field number for the N field in the MDV file. "
           "Used only if use_field_name is set to false.\n";
  p_default = { "mdvp:://localhost::mdv/refract", true, "N", 0 };
} n_field;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::mdv/moisture";
} output_url;

paramdef boolean
{
  p_descr = "Flag indicating whether to compress the calculated fields "
            "before writing them to the output file.";
  p_default = true;
} compress_output_fields;


/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

paramdef string
{
  p_descr = "URL of SPDB database containing station information";
  p_default = "spdbp:://localhost::spdb/stations";
} station_url;

typedef struct
{
  string name;
  double elevation;
} station_info_t;

paramdef struct station_info_t
{
  p_descr = "List of stations to use for calculating the mean temperature "
            "and pressure values.";
  p_help = "\tname is the name of the station as it appears in the database.\n"
           "\televation is the elevation of the station in meters. "
           "This elevation value is only used if get_elevation_from_data "
           "is set to false.\n";
  p_default = { { "KTAD", 1756 },
                { "KCTD", 2146 }, 
                { "KBIT", 2160 },
                { "KBVR", 2072 } };
} station_list[];

paramdef boolean
{
  p_descr = "Flag indicating whether to get the station elevations from the "
            "data or from the station_list parameter.";
  p_help = "If set to TRUE, the station elevations are taken from the database. "
           "If set to FALSE, the station elevations are taken from the "
           "station_list parameter.\n"
           "This allows you to override the station elevation values in the "
           "data if they are wrong for some reason.";
  p_default = true;
} get_elevation_from_data;

paramdef long
{
  p_descr = "Maximum valid time for station information in seconds.";
  p_help = "If a station hasn't reported temperature and pressure values "
           "within this number of seconds before the N field time stamp, "
           "the station will not be included in the mean temperature and "
           "pressure calculations.";
  p_default = 3600;
} max_station_valid_secs;
