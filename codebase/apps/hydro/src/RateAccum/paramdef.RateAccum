/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for RateAccum
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * May 2015
 * 
 * RateAccum accumulates precip depth from rate data in MDV files
 */

commentdef {
  p_text = "RateAccum calculates accumulated precipitation depth from rate data in MDV format. The 2-D precipitation fields are written out to MDV files.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the "
  "appropriate level of detail.";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
  p_text = "Modes and trigger mechanism.";
}

typedef enum {
  ARCHIVE, REALTIME
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive, and realtime. In realtime mode, the analysis is performed for each volume scan as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;

typedef enum {
  TIME_TRIGGER, FILE_TRIGGER
} trigger_t;

paramdef enum trigger_t {
  p_default = TIME_TRIGGER;
  p_descr = "Trigger mechanism. REALTIME mode only.";
  p_help = "TIME_TRIGGER: the program is triggered at constant time intervals - see time_trigger_interval. FILE_TRIGGER: the program watches the first input_dir and triggers based on data in that directory.";
} trigger;

paramdef int {
  p_min = 0;
  p_default = 300;
  p_descr = "Interval for TIME_TRIGGER - secs.";
  p_help = "For TIME_TRIGGER, this is the interval between trigger events. In REALTIME mode, a time trigger always occurs on the hour, and at constant intervals thereafter. In ARCHIVE mode the trigger starts at start_time and at constant intervals thereafter.";
} time_trigger_interval;

paramdef int {
  p_min = 0;
  p_default = 600;
  p_descr = "Max time diff for searching for files relative to the trigger time - secs.";
  p_help = "When matching files up with the trigger time, the difference between the trigger time and file time must be less than this margin. This value is also used as the max age of the latest data info file when in REALTIME mode with FILE_TRIGGER.";
} trigger_time_margin;

commentdef {
  p_header = "INPUT DATA.";
}

paramdef string {
  p_default = "./input";
  p_descr = "Directory for input data.";
  p_help = "Input data is in MDV format, and contains precip rate(s).";
} input_dir;

typedef struct {
  string rate_name;
  string accum_name;
  boolean input_is_depth;
} field_name_t;

paramdef struct field_name_t {
  p_default = {
    { "rate1", "accum1", false },
    { "rate2", "accum2", false }
  };
  p_descr = "Names of rate field(s) in input MDV files, and corresponding names for output fields.";
  p_help = "You must specify at least 1 field. If the input field has already been converted into depth, set input_is_depth to true.";
} field_names[];

paramdef int  {
  p_default = 900;
  p_descr = "Maximum allowed input volume duration (secs)";
  p_help = "If a volume exceeds this duration, it will be set to the median duration instead.";
} max_vol_duration;

commentdef {
  p_header = "ACCUMULATION METHOD.";
}

typedef enum {
  RUNNING_ACCUM, 
  DAILY_ACCUM, 
  TOTAL_ACCUM
} accum_method_t;

paramdef enum accum_method_t {
  p_default = RUNNING_ACCUM;
  p_descr = "Accumulation method.";
  p_help =
  "\nRUNNING_ACCUM: perform a running accumulation over a given period "
  "prior to the trigger time.\n "
  "\nDAILY_ACCUM: perform an accumulation from a given time of "
  "day until the trigger time. When the selected time of day is reached, "
  "the accumulation resets to zero. The time of day is stored in "
  "an array, so that multiple restarts may be set for each day.\n"
  "\nTOTAL_ACCUM: accumulate for the entire period, output result at the "
  "end of the period. ARCHIVE mode only.\n";
} accum_method;

commentdef {
  p_header = "RUNNING ACCUMULATION.";
}

typedef struct {
  int period_secs;
  string output_url;
} running_accum_t;

paramdef struct running_accum_t {
  p_default = {
    { 3600, "/tmp/running_accum_1hr" },
    { 7200, "/tmp/running_accum_2hr" },
    { 10400, "/tmp/running_accum_3hr" }
  };
  p_descr = "Control for running accumulations.";
  p_help = "Specify the durations in ascending order, and the associated URL for the output MDV files.";
} running_accums[];

commentdef {
  p_header = "TIME OF DAY ACCUMULATION.";
}

typedef struct {
  int hour;
  int min;
  int sec;
} restart_time_of_day_t;

paramdef struct restart_time_of_day_t {
  p_default = {{0, 0, 0}};
  p_descr = "The times in the day (UCT/GMT) at which accumulation restart occurs.";
  p_help = "For ACCUM_FROM_TIME_OF_DAY method only. The program cycles through the times of day, zeroing out the accumulation at each specified time.";
} restart_time_of_day[];

paramdef string {
  p_default = "/tmp/tod_accum";
  p_descr = "URL for output data for time-of-day accumulation.";
  p_help = "An mdv url is of the form mdvp:://hostname:port:dir.";
} tod_accum_output_url;

commentdef {
  p_header = "TOTAL ACCUMULATION.";
}

paramdef string {
  p_default = "/tmp/total_accum";
  p_descr = "URL for output data for total accumulation.";
  p_help = "An mdv url is of the form mdvp:://hostname:port:dir.";
} total_accum_output_url;

commentdef {
  p_header = "DATA LIMITS.";
}

paramdef double {
  p_default = 9999;
  p_descr = "Max precip depth (mm).";	
  p_help = "Depths greater than this will be truncated at this value.";
} max_precip_depth;

paramdef double {
  p_default = 0.1;
  p_descr = "Min precip depth (mm).";	
  p_help = "Values less than this will be set to missing.";
} min_precip_depth;

commentdef {
  p_header = "FILE LABEL DETAILS";
}

paramdef string {
  p_default = "Precipitation accumulation.";
  p_descr = "Data set name.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_name;

paramdef string {
  p_default = "Computed by RateAccum, accumulating rate over time to give depth.";
  p_descr = "Data set source details.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_source;

