// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
// ** Copyright UCAR (c) 1992 - 2016
// ** University Corporation for Atmospheric Research(UCAR)
// ** National Center for Atmospheric Research(NCAR)
// ** Boulder, Colorado, USA
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program MosFcastAdjust
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("MosFcastAdjust reads actual metars and adjusts the\npseudo-model metars accordingly. Niles Oien.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'TriggerUrl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("TriggerUrl");
    tt->descr = tdrpStrDup("URL to trigger off, typically of the form\nspdbp:://host.domain:[port]:dir/dir");
    tt->help = tdrpStrDup("Program runs when new metar data appear here.");
    tt->val_offset = (char *) &TriggerUrl - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/Metars");
    tt++;
    
    // Parameter 'UseStationIDs'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("UseStationIDs");
    tt->descr = tdrpStrDup("If set, use the list of stations specified by\nthe station_ids parameter.");
    tt->help = tdrpStrDup("This makes the program a lot more efficient.");
    tt->val_offset = (char *) &UseStationIDs - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'station_ids'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("station_ids");
    tt->descr = tdrpStrDup("Station ids");
    tt->help = tdrpStrDup("List of the station ids for which the MOS forecastsshould be made.");
    tt->array_offset = (char *) &_station_ids - &_start_;
    tt->array_n_offset = (char *) &station_ids_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("KCTP");
    tt++;
    
    // Parameter 'ModelUrl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ModelUrl");
    tt->descr = tdrpStrDup("Model URL");
    tt->help = tdrpStrDup("Pseudo-metar model data are stored here and this\nprogram will adjust them using the actual metars.");
    tt->val_offset = (char *) &ModelUrl - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/ExtractedFromModel");
    tt++;
    
    // Parameter 'OutUrl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("OutUrl");
    tt->descr = tdrpStrDup("Output URL");
    tt->help = tdrpStrDup("Forecast spdb files are written here.");
    tt->val_offset = (char *) &OutUrl - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/MosForecasts");
    tt++;
    
    // Parameter 'SaveCorrections'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("SaveCorrections");
    tt->descr = tdrpStrDup("Set to TRUE to save out correction factors/offsets\nused to correct model pseudo-metars given an\nactual metar.");
    tt->help = tdrpStrDup("Set to something unique.");
    tt->val_offset = (char *) &SaveCorrections - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'OutDeltaUrl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("OutDeltaUrl");
    tt->descr = tdrpStrDup("Output URL for correction factors/offsets.");
    tt->help = tdrpStrDup("Correction factors/offsets are written to this URL\nusing the METAR structure to store the information.\nThey are best thought of as Delta Metars, since\nthe structures contain not weather information per se\nbut the information used to adjust model weather information\nto an actual METAR value.\n\nA field in these Delta Metars\nmay be an offset or a bias depending on the settings used\nin this params file. Only relevant if SaveCorrections is TRUE.");
    tt->val_offset = (char *) &OutDeltaUrl - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/DeltaMetars");
    tt++;
    
    // Parameter 'Instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("Instance");
    tt->descr = tdrpStrDup("Instance to check in to Procmap with");
    tt->help = tdrpStrDup("Set to something unique.");
    tt->val_offset = (char *) &Instance - &_start_;
    tt->single_val.s = tdrpStrDup("primary");
    tt++;
    
    // Parameter 'Mode'
    // ctype is '_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("Mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Archive mode automatically invoked by -interval option.");
    tt->val_offset = (char *) &Mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'LookBack'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("LookBack");
    tt->descr = tdrpStrDup("Look back time, seconds.");
    tt->help = tdrpStrDup("Program will look back by this time from trigger time\nwhen looking for actual METAR data.");
    tt->val_offset = (char *) &LookBack - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'LookAhead'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("LookAhead");
    tt->descr = tdrpStrDup("Look ahead time, seconds.");
    tt->help = tdrpStrDup("Program will look ahead by this time from trigger time\nwhen looking for actual METAR data.");
    tt->val_offset = (char *) &LookAhead - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'TriggerInterval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("TriggerInterval");
    tt->descr = tdrpStrDup("Trigger interval, seconds.");
    tt->help = tdrpStrDup("Program will trigger regularly at this interval.");
    tt->val_offset = (char *) &TriggerInterval - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'MaxLeadTime'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("MaxLeadTime");
    tt->descr = tdrpStrDup("Maximum lead time, hours.");
    tt->help = tdrpStrDup("When a real METAR comes in, the program will look\nfor pseudo METARS from the model data, starting at the time\nof the real metar and ending at the real metar plus this lead\ntime. This effectively sets the limit on the lead time\nof the MOS forcasts.");
    tt->val_offset = (char *) &MaxLeadTime - &_start_;
    tt->single_val.i = 36;
    tt++;
    
    // Parameter 'TimeBeforeExpire'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("TimeBeforeExpire");
    tt->descr = tdrpStrDup("Time before data expire, seconds");
    tt->help = tdrpStrDup("Forecasts expire at the valid time + TimeBeforeExpire ");
    tt->val_offset = (char *) &TimeBeforeExpire - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'PMU_String'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PMU_String");
    tt->descr = tdrpStrDup("PMU registration string.");
    tt->help = tdrpStrDup("While waiting for data the program registers with this string.");
    tt->val_offset = (char *) &PMU_String - &_start_;
    tt->single_val.s = tdrpStrDup("Waiting for data");
    tt++;
    
    // Parameter 'Debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("Debug");
    tt->descr = tdrpStrDup("Debug flag.");
    tt->help = tdrpStrDup("Set for more verbose output.");
    tt->val_offset = (char *) &Debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ClearVisibility'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ClearVisibility");
    tt->descr = tdrpStrDup("Value to use for visibility if no clouds found, Km");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ClearVisibility - &_start_;
    tt->single_val.d = 3.6576;
    tt++;
    
    // Parameter 'ClearCeiling'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ClearCeiling");
    tt->descr = tdrpStrDup("Value to use for ceiling if no clouds found, Km");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ClearCeiling - &_start_;
    tt->single_val.d = 9.999;
    tt++;
    
    // Parameter 'AdjustmentType'
    // ctype is '_adjust_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("AdjustmentType");
    tt->descr = tdrpStrDup("Method to use when adjusting variables\nADJUST_LINEAR or ADJUST_SIGMOID.");
    tt->help = tdrpStrDup("Program will adjust using either a linear or sigmoid persistence.");
    tt->val_offset = (char *) &AdjustmentType - &_start_;
    tt->enum_def.name = tdrpStrDup("adjust_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ADJUST_LINEAR");
      tt->enum_def.fields[0].val = ADJUST_LINEAR;
      tt->enum_def.fields[1].name = tdrpStrDup("ADJUST_SIGMOID");
      tt->enum_def.fields[1].val = ADJUST_SIGMOID;
    tt->single_val.e = ADJUST_LINEAR;
    tt++;
    
    // Parameter 'TempAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("TempAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust temp model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &TempAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'HumidityAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("HumidityAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust humidity model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &HumidityAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'WindSpeedAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("WindSpeedAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust wind speed model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &WindSpeedAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'WindDirAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("WindDirAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust wind dir model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &WindDirAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'PressureAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PressureAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust pressure model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &PressureAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'VisibilityAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("VisibilityAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust visibility model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &VisibilityAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'CeilingAdjustSec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("CeilingAdjustSec");
    tt->descr = tdrpStrDup("Persistence adjustment interval, seconds.");
    tt->help = tdrpStrDup("Program will adjust ceiling model forecasts within this many seconds of the METAR valid time.");
    tt->val_offset = (char *) &CeilingAdjustSec - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
