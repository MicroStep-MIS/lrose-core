/**********************************************************************
 * TDRP params for NidsRadial2Mdv
 **********************************************************************/

//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//   DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
//
//

debug = DEBUG_OFF;

///////////// malloc_debug_level //////////////////////
//
// Malloc debug level.
// 0 - none, 1 - corruption checking, 2 - records all malloc blocks and 
//   checks, 3 - printout of all mallocs etc.
// Minimum val: 0
// Maximum val: 3
// Type: int
//

malloc_debug_level = 0;

///////////// no_threads //////////////////////////////
//
// No threads option. Forces single-threaded operation.
// For debugging purposes. Note that the program will handle only a 
//   single data directory in single-threaded operation.
// Type: boolean
//

no_threads = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// PROGRAM MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In realtime mode, storm_ident waits for a new input file. In archive 
//   mode, it moves through the files between the times set by the user.
//
// Type: enum
// Options:
//   ARCHIVE, REALTIME
//
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// realtime_data_sets //////////////////////
//
// Array of data sets to be processed.
// The program starts a thread for each input directory. Incoming data 
//   is processed and written to the individual radar subdirectory output 
//   directory. Note that the output_dir is only used if 
//   'specify_individual_output_dirs' is set TRUE. See 
//   specify_individual_output_dirs for more details.
//
// Type: struct
//   typedef struct {
//      string input_dir;
//      string output_dir;
//      string radar_name;
//      boolean is_dbz;
//   }
//
// 1D array - variable length - 21 elements.
//

realtime_data_sets = {
  { "/amnt/nids/raw/nids/OKX/BREF1", "output/okx", "okx", TRUE},
  { "/amnt/nids/raw/nids/DIX/BREF1", "output/dix", "dix", TRUE},
  { "/amnt/nids/raw/nids/ENX/BREF1", "output/enx", "enx", TRUE},
  { "/amnt/nids/raw/nids/DOX/BREF1", "output/dox", "dox", TRUE},
  { "/amnt/nids/raw/nids/LWX/BREF1", "output/lwx", "lwx", TRUE},
  { "/amnt/nids/raw/nids/CCX/BREF1", "output/ccx", "ccx", TRUE},
  { "/amnt/nids/raw/nids/BOX/BREF1", "output/box", "box", TRUE},
  { "/amnt/nids/raw/nids/LOT/BREF1", "output/lot", "lot", TRUE},
  { "/amnt/nids/raw/nids/MKX/BREF1", "output/mkx", "mkx", TRUE},
  { "/amnt/nids/raw/nids/FTG/BREF1", "output/ftg", "ftg", TRUE},
  { "/amnt/nids/raw/nids/CLE/BREF1", "output/cle", "cle", TRUE},
  { "/amnt/nids/raw/nids/MPX/BREF1", "output/mpx", "mpx", TRUE},
  { "/amnt/nids/raw/nids/MTX/BREF1", "output/mtx", "mtx", TRUE},
  { "/amnt/nids/raw/nids/PBZ/BREF1", "output/pbz", "pbz", TRUE},
  { "/amnt/nids/raw/nids/ILN/BREF1", "output/iln", "iln", TRUE},
  { "/amnt/nids/raw/nids/IND/BREF1", "output/ind", "ind", TRUE},
  { "/amnt/nids/raw/nids/ATX/BREF1", "output/atx", "atx", TRUE},
  { "/amnt/nids/raw/nids/NDA/BREF1", "output/nda", "nda", TRUE},
  { "/amnt/nids/raw/nids/LVX/BREF1", "output/lvx", "lvx", TRUE},
  { "/amnt/nids/raw/nids/FWS/BREF1", "output/fws", "fws", TRUE},
  { "/amnt/nids/raw/nids/PDT/BREF1", "output/pdt", "pdt", TRUE}
};

///////////// archive_data_set ////////////////////////
//
// Archive data sets to be processed.
// The input_dir is ignored, since the file paths to be processed are 
//   specified on the command line.
//
// Type: struct
//   typedef struct {
//      string input_dir;
//      string output_dir;
//      string radar_name;
//      boolean is_dbz;
//   }
//
//

archive_data_set = { ".", "output/ftg", "ftg", TRUE };

///////////// max_realtime_data_age ///////////////////
//
// Max age (in seconds) of input data for it to be valid.
// Only used in realtime mode.
// Type: long
//

max_realtime_data_age = 360;

///////////// use_latest_data_info ////////////////////
//
// Option to use latest_data_info file to trigger input. REALTIME mode 
//   only.
// Some upstream processes, such as WsiNidsIngest, will generate 
//   latest_data_infor files. Others, such as the LDM, do not. If this 
//   option is on, each thread triggers off the lates_data_info file. If 
//   the option is off, the thread watches the directory for new files.
// Type: boolean
//

use_latest_data_info = FALSE;

///////////// get_latest_file_only ////////////////////
//
// Option to only get the latest valid file, rather than all the files 
//   younger than max_realtime_data_age.
// Only used in realtime mode and if use_latest_data_info is FALSE. If 
//   set, only the latest file will be processed. If not set, all files 
//   younger than  max_input_data_age will be processed.
// Type: boolean
//

get_latest_file_only = TRUE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// specify_individual_output_dirs //////////
//
// Option to specify the output dir for each radar.
// If true, the data will be written to the output_dir specified in the 
//   'data_sets' parameter. If false, the output_dir will be computed from 
//   the output_dir and the radar_name as follows: 
// 	output_dir = output_dir/radar_name.
// Type: boolean
//

specify_individual_output_dirs = FALSE;

///////////// global_output_dir ///////////////////////
//
// Output directory. Individual radars will be output to separate 
//   subdirectories of this directory.
// This is used if specify_individual_output_dirs is false. The program 
//   will create a subdirectory for each radar, using the radar name in 
//   lower case.
// Type: string
//

global_output_dir = "global_output";

///////////// output_grid /////////////////////////////
//
// Output grid dimensions.
// The grid origin will be at the radar site.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      float minx;
//      float miny;
//      float dx;
//      float dy;
//   }
//
//

output_grid = { 460, 460, -229.5, -229.5, 1, 1 };

