/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for NidsRadial2Mdv
 *
 * Mike Dixon, RAP, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * March 1999
 */

commentdef {
  p_header = "Read NIDS level 3 data in polar radar coordinates, convert to an XY grid, write out to MDV.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = {DEBUG_OFF};
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef int {
  p_default = 0;
  p_min = 0;
  p_max = 3;
  p_descr = "Malloc debug level";
  p_help = "0 - none, 1 - corruption checking, 2 - records all malloc blocks and checks, 3 - printout of all mallocs etc.";
} malloc_debug_level;

paramdef boolean
{
  p_default = FALSE;
  p_descr = "No threads option. Forces single-threaded operation.";
  p_help = "For debugging purposes. Note that the program will handle only a single data directory in single-threaded operation.";
} no_threads;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODE OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In realtime mode, storm_ident waits for a new input file. In archive mode, it moves through the files between the times set by the user.";
} mode;

commentdef {
  p_header = "DATA INPUT.";
}

typedef struct {
  string input_dir;
  string output_dir;
  string radar_name;
  boolean is_dbz;
} data_set_t;

paramdef struct data_set_t {
  p_default = {{".", "output", "no-name", true}};
  p_descr = "Array of data sets to be processed.";
  p_help = "The program starts a thread for each input directory. Incoming data is processed and written to the individual radar subdirectory output directory. Note that the output_dir is only used if 'specify_individual_output_dirs' is set TRUE. See specify_individual_output_dirs for more details.";
} realtime_data_sets[];

paramdef struct data_set_t {
  p_default = {".", "output", "no-name", true};
  p_descr = "Archive data sets to be processed.";
  p_help = "The input_dir is ignored, since the file paths to be processed are specified on the command line.";
} archive_data_set;

paramdef long {             
  p_default = 360;
  p_descr = "Max age (in seconds) of input data for it to be valid";
  p_help = "Only used in realtime mode.";
} max_realtime_data_age;

paramdef boolean {
  p_default = true;
  p_descr = "Option to use latest_data_info file to trigger input. REALTIME mode only";
  p_help = "Some upstream processes, such as WsiNidsIngest, will generate latest_data_infor files. Others, such as the LDM, do not. If this option is on, each thread triggers off the lates_data_info file. If the option is off, the thread watches the directory for new files.";
} use_latest_data_info;

paramdef boolean {
  p_default = true;
  p_descr = "Option to only get the latest valid file, rather than all the files younger than max_realtime_data_age.";
  p_help = "Only used in realtime mode and if use_latest_data_info is FALSE. If set, only the latest file will be processed. If not set, all files younger than  max_input_data_age will be processed.";
} get_latest_file_only;

commentdef {
  p_header = "DATA OUTPUT.";
}
paramdef boolean {
  p_default = false;
  p_descr = "Option to specify the output dir for each radar.";
  p_help = "If true, the data will be written to the output_dir specified in the 'data_sets' parameter. If false, the output_dir will be computed from the output_dir and the radar_name as follows: \n"
    "\toutput_dir = output_dir/radar_name.";
} specify_individual_output_dirs;

paramdef string {
  p_default = "output";
  p_descr = "Output directory. Individual radars will be output to separate subdirectories of this directory.";
  p_help = "This is used if specify_individual_output_dirs is false. The program will create a subdirectory for each radar, using the radar name in lower case.";
} global_output_dir;

typedef struct {
  int nx;
  int ny;
  float minx;
  float miny;
  float dx;
  float dy;
} output_grid_t;

paramdef struct output_grid_t {
  p_default = {460, 460, -229.5, -229.5, 1.0, 1.0};
  p_descr = "Output grid dimensions.";
  p_help = "The grid origin will be at the radar site.";
} output_grid;

paramdef boolean {             
  p_default = FALSE;
  p_descr = "By default, if the parameter is_dbz is TRUE then the"
            " output mdv field name will be dbz. Otherwise it will"
	    " be vel. If this parameter is set to TRUE then the"
            " p[arameter specified_fieldname will be used in the"
            " output MDV.";
  p_help = "Set to TRUE if your field is not dbz or vel and then set"
           " specified_fieldname appropriately.";
} use_specified_fieldname;

paramdef string {
  p_default = "someFieldName";
  p_descr = "Field name to use in output MDV data.";
  p_help = "Used if use_specified_fieldname is TRUE.";
} specified_fieldname;
