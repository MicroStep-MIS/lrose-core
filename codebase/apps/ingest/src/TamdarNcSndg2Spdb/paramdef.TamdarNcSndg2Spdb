/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.TamdarNcSndg2Spdb
 *
 * This file contains the TDRP parameter definitions for
 * TamdarNcSndg2Spdb
 */

commentdef
{
  p_header = "TamdarNcSndg2Spdb";
  p_text = "This program converts netCDF sweep files into MDV format.";
};


/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = false;
} debug;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef enum
{
  LATEST_DATA,
  FILE_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In LATEST_DATA mode, the program waits for the _latest_data_info "
           "file in the given input_dir to be updated and then processes the "
           "file specified there.\n"
           "In TIME_LIST mode, the program operates on archive data as "
           "specified in the time_list_trigger parameter.";
  p_default = "FILE_LIST";
} trigger_mode;

paramdef string
{
  p_descr = "Input directory";
  p_default = "$(RAP_DATA_DIR)/raw/sweepNetCDF";
} input_dir;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::mdv/sweepNetCDF";
} output_url;


/***********************************************************************
 * netCDF file parameters
 */

commentdef
{
  p_header = "NETCDF FILE PARAMETERS";
};

commentdef
{
  p_header = "Dimension names";
};

paramdef string
{
  p_descr = "String used for num records dimension name in netCDF file";
  p_default = "recNum";
} num_recs_dim_name;

paramdef string
{
  p_descr = "String used for tail number length dimension name in netCDF file";
  p_default = "tailLen";
} tail_len_dim_name;

commentdef
{
  p_header = "Attribute names";
};

paramdef string
{
  p_descr = "String used for missing data value attribute name in netCDF file";
  p_help = "It is assumed that all of the variables in the netCDF file use "
           "the same attribute name for missing data values. "
           "The missing data value attribute is ignored for the tail number, "
           "data source, sounding flag and launch times variables.";
  p_default = "_FillValue";
} missing_data_value_att_name;

commentdef
{
  p_header = "Variable names";
};

paramdef string
{
  p_descr = "String used for latitude variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in degree_N.";
  p_default = "latitude";
} latitude_var_name;

paramdef string
{
  p_descr = "String used for longitude variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in degree_E.";
  p_default = "longitude";
} longitude_var_name;

paramdef string
{
  p_descr = "String used for altitude variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in meters (pressure altitude, msl).";
  p_default = "altitude";
} altitude_var_name;

paramdef string
{
  p_descr = "String used for temperature variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in K.";
  p_default = "temperature";
} temperature_var_name;

paramdef string
{
  p_descr = "String used for wind direction variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in degree_true.";
  p_default = "windDir";
} wind_dir_var_name;

paramdef string
{
  p_descr = "String used for wind speed variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in m/s.";
  p_default = "windSpeed";
} wind_speed_var_name;

paramdef string
{
  p_descr = "String used for relative humidity variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in %.";
  p_default = "relHumidity";
} rel_hum_var_name;

paramdef string
{
  p_descr = "String used for dew point variable name in netCDF file";
  p_help = "These values are assumed to be stored in the netCDF file "
           "in K.";
  p_default = "dewpoint";
} dew_point_var_name;

paramdef string
{
  p_descr = "String used for tail number variable name in netCDF file";
  p_default = "tailNumber";
} tail_number_var_name;

paramdef string
{
  p_descr = "String used for data source variable name in netCDF file";
  p_default = "dataSource";
} data_source_var_name;

paramdef string
{
  p_descr = "String used for sounding flag variable name in netCDF file";
  p_default = "sounding_flag";
} sounding_flag_var_name;

paramdef string
{
  p_descr = "String used for lanuch times variable name in netCDF file";
  p_default = "soundingSecs";
} launch_times_var_name;


/***********************************************************************
 * Algorithm parameters
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

paramdef boolean
{
  p_descr = "Flag indicating whether to sort the sounding points on output";
  p_help = "If true, the points for each sounding will be sorted by "
           "pressure, descending.";
  p_default = FALSE;
} sort_points_on_output;
