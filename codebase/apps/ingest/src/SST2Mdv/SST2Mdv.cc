// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// SST2Mdv
//
// Author:  Curtis Caravone
// Date:    6/20/2003
//
// Takes an SSTData and writes to a MDV file.
//
//

#include <stdio.h>
#include <dataport/port_types.h>
#include <Mdv/Mdvx.hh>
#include <Mdv/MdvxField.hh>
#include <toolsa/str.h>

#include "SSTData.hh"
#include "SST2Mdv.hh"

//#define COMPRESSION_TYPE Mdvx::COMPRESSION_RLE
#define COMPRESSION_TYPE Mdvx::COMPRESSION_LZO

/********
 * Writes the given Sea Surface Temperature data to MDV format.
 */
int sst2mdv(SSTData &data, Mdvx &mdvFile, si32 dataStartTime, si32 dataEndTime) {

    // Create the master header
    Mdvx::master_header_t master_hdr;
    memset(&master_hdr, 0, sizeof(master_hdr));

    si32 time_centroid = (dataStartTime + dataEndTime) / 2;

    master_hdr.time_gen = time(0);
    master_hdr.time_begin = dataStartTime;
    master_hdr.time_end = dataEndTime;
    master_hdr.time_centroid = time_centroid;
    master_hdr.time_expire = dataEndTime;

    master_hdr.data_dimension = 2;
    master_hdr.data_collection_type = Mdvx::DATA_MEASURED;
    master_hdr.vlevel_included = 0;
    master_hdr.grid_orientation = Mdvx::ORIENT_SN_WE;
    master_hdr.data_ordering = Mdvx::ORDER_XYZ;
    STRncopy(master_hdr.data_set_info, "Generated by SST2Mdv", MDV_INFO_LEN);
    STRncopy(master_hdr.data_set_name, "NAVOCEANO MCSST L3", MDV_NAME_LEN);
    STRncopy(master_hdr.data_set_source, "NAVOCEANO MCSST L3", MDV_NAME_LEN);

    // Set the master header
    mdvFile.setMasterHeader(master_hdr);


    // Create generic vlevel header for a 2d field
    Mdvx::vlevel_header_t vlevel_hdr;
    memset(&vlevel_hdr, 0, sizeof(vlevel_hdr));


    // Set up Mdv data fields

    // Sea Surface Temperature field
    Mdvx::field_header_t sst_field_hdr
    = _createFieldHeader(time_centroid, "Sea Surface Temperature", "C");

    sst_field_hdr.field_code = 1;
    sst_field_hdr.scale = SST_SLOPE;
    sst_field_hdr.bias = SST_INT;

    mdvFile.addField(new MdvxField(sst_field_hdr, vlevel_hdr, data.getRawSST()));

    // Number of Points field
    Mdvx::field_header_t numpts_field_hdr
    = _createFieldHeader(time_centroid, "Number of Points per Bin", "");

    numpts_field_hdr.field_code = 2;
    numpts_field_hdr.scale = 1;
    numpts_field_hdr.bias = 0;

    mdvFile.addField(new MdvxField(numpts_field_hdr, vlevel_hdr, data.getRawNumPoints()));

    // SST Anomaly field
    Mdvx::field_header_t anomaly_field_hdr
    = _createFieldHeader(time_centroid, "SST Anomaly", "C");

    anomaly_field_hdr.field_code = 3;
    anomaly_field_hdr.scale = ANOMALY_SLOPE;
    anomaly_field_hdr.bias = ANOMALY_INT;

    mdvFile.addField(new MdvxField(anomaly_field_hdr, vlevel_hdr, data.getRawSSTAnomaly()));

    if (data.interpAvailable()) {

        // Interpolated Sea Surface Temperature field
        Mdvx::field_header_t interp_sst_hdr
        = _createFieldHeader(time_centroid, "Interpolated SST", "C");

        interp_sst_hdr.field_code = 4;
        interp_sst_hdr.scale = SST_SLOPE;
        interp_sst_hdr.bias = SST_INT;

        mdvFile.addField(new MdvxField(interp_sst_hdr, vlevel_hdr, data.getRawInterpSST()));

        // Interpolated Sea Surface Temperature Anomaly
        Mdvx::field_header_t interp_anom_hdr
        = _createFieldHeader(time_centroid, "Interpolated SST Anomaly", "C");

        interp_anom_hdr.field_code = 5;
        interp_anom_hdr.scale = ANOMALY_SLOPE;
        interp_anom_hdr.bias = ANOMALY_INT;

        mdvFile.addField(new MdvxField(
        interp_anom_hdr, vlevel_hdr, data.getRawInterpSSTAnomaly()));
    }

    int numFields = mdvFile.getNFields();
    for (int i = 0; i < numFields; i++) {
        mdvFile.getField(i)->compress(COMPRESSION_TYPE);
    }

}

// Sets up all the common elements in the field header
// After this call the following header fields still need to be set:
//
// field_code
// scale
// bias
//
Mdvx::field_header_t _createFieldHeader(si32 time_centroid, char *field_name, char *units) {
    Mdvx::field_header_t field_hdr;
    memset(&field_hdr, 0, sizeof(field_hdr));

    field_hdr.forecast_delta = 0;
    field_hdr.forecast_time = time_centroid;

    field_hdr.nx = SST_COLUMNS;
    field_hdr.ny = SST_ROWS;
    field_hdr.nz = 1;
    field_hdr.proj_type = Mdvx::PROJ_LATLON;

    field_hdr.encoding_type = Mdvx::ENCODING_INT8;
    field_hdr.data_element_nbytes = sizeof(ui08);
    field_hdr.volume_size = SST_ROWS * SST_COLUMNS * sizeof(ui08);
    field_hdr.compression_type = Mdvx::COMPRESSION_NONE;
    field_hdr.transform_type = Mdvx::SCALING_SPECIFIED;

    field_hdr.proj_origin_lat = -90;
    field_hdr.proj_origin_lon = 0;
    field_hdr.grid_dx = 1;
    field_hdr.grid_dy = 1;
    field_hdr.grid_minx = 0;
    field_hdr.grid_miny = 0;

    field_hdr.bad_data_value = 0;
    field_hdr.missing_data_value = 0;

    STRncopy(field_hdr.field_name_long, field_name, MDV_LONG_FIELD_LEN);
    STRncopy(field_hdr.field_name, field_name, MDV_SHORT_FIELD_LEN);
    STRncopy(field_hdr.units, units, MDV_UNITS_LEN);

    return field_hdr;
}

