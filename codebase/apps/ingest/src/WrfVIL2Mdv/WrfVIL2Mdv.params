/**********************************************************************
 * TDRP params for WrfVIL2Mdv
 **********************************************************************/

//======================================================================
//
// WrfVIL2Mdv reads netcdf files from the WRF and 
// write to mdv.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

///////////// mode ////////////////////////////////////
//
// Operation mode.
// Program may be run in two modes, archive and realtime. In realtime 
//   mode, the conversion is performed for each input file as it becomes 
//   available. In archive mode, the file list is obtained from the 
//   command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = REALTIME;

//======================================================================
//
// INPUT/OUTPUT.
//
//======================================================================
 
///////////// InDir ///////////////////////////////////
//
// Input directory.
// Directory path for nssl netCDF data files.
// Type: string
//

InDir = "./";

///////////// fileExtension ///////////////////////////
//
// Input file extension.
// If string is NULL, all extensions are valid.
// Type: string
//

fileExtension = "";

///////////// max_realtime_valid_age //////////////////
//
// Max age of input data.
// For realtime only - max age of input data for it to be valid.
// Type: int
//

max_realtime_valid_age = 3600;

///////////// writeAsForecast /////////////////////////
//
// Write output to forecast directory structure.
// Set to FALSE to write to the flat directory structure.
// Type: boolean
//

writeAsForecast = TRUE;

///////////// outUrl //////////////////////////////////
//
// Output URL to write MDV data to, in form:
// mdvp:://host.dom::dir/dir.
// Set to where output MDV data should be written.
// Type: string
//

outUrl = "/scratch/hardt/test";

///////////// Expiry //////////////////////////////////
//
// Time before data expire, seconds.
// Default is half an hour.
// Type: int
//

Expiry = 1800;

//======================================================================
//
// FILE TYPE SPECIFICATIONS.
//
//======================================================================
 
///////////// input_field_list ////////////////////////
//
// List of input fields to process.
// Type: string
// 1D array - variable length.
//

input_field_list = {
 "VIL"
};

//======================================================================
//
// REMAPPING PARAMETERS.
//
//======================================================================
 
///////////// remapToFlat /////////////////////////////
//
// Option to remap to flat earth grid from internal lat/lon grid.
// AreaIngest uses an internal lat/lon grid specified by the Dx, Dy, 
//   lonMin, lonMax, latMin, and latMax parameters above. This option 
//   allows the data to be remapped to a flat earth grid. If this option 
//   is selected, the flatEarthGrid parameters below are utilized. It 
//   should not be used in conjunction with remapToLambert.
// Type: boolean
//

remapToFlat = FALSE;

///////////// flatEarthGrid ///////////////////////////
//
// Grid parameters for flat earth.
// Used only if remapToFlat is TRUE.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//      double origin_lat;
//      double origin_lon;
//      double rotation;
//   }
//
//

flatEarthGrid = {
    nx = 500,
    ny = 500,
    minx = -250,
    miny = -250,
    dx = 1,
    dy = 1,
    origin_lat = 37,
    origin_lon = -98,
    rotation = 0
};

///////////// remapToLatlon ///////////////////////////
//
// Option to remap to latlon earth grid from internal lat/lon grid.
// AreaIngest uses an internal lat/lon grid specified by the Dx, Dy, 
//   lonMin, lonMax, latMin, and latMax parameters above. This option 
//   allows the data to be remapped to a latlon earth grid. If this option 
//   is selected, the latlonEarthGrid parameters below are utilized. It 
//   should not be used in conjunction with remapToFlat.
// Type: boolean
//

remapToLatlon = FALSE;

///////////// latlonEarthGrid /////////////////////////
//
// Grid parameters for lambert conformal grid.
// Used only if remapToLambert is TRUE.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
//

latlonEarthGrid = {
    nx = 126,
    ny = 92,
    minx = -85.5451,
    miny = 34.432,
    dx = 0.1,
    dy = 0.1
};

