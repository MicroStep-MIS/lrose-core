/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for CWB_FortranBinary2Mdv
 *
 * Dan Megenhardt, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * August 2010
 * 
 * CWB_FortranBinary2Mdv takes an unformated fortran binary
 * file and writes it to MDV. The data time is pulled from 
 * the filename which is what might make this application
 * unique to the CWB data. Otherwise, it should work on 
 * any unformatted fortan binary file, skipping the first
 * and last 4 bytes of the data.
 */

commentdef {
  p_header = 
 "CWB_FortranBinary2Mdv takes an unformated fortran binary\n"
 "file and writes it to MDV. The data time is pulled from \n"
 "the filename which is what might make this application\n"
 "unique to the CWB data. Otherwise, it should work on \n"
 "any unformatted fortan binary file, skipping the first\n"
 "and last 4 bytes of the data.\n";
}

/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef enum debug_t
{
  p_options = { DEBUG_OFF,
                DEBUG_WARNINGS,
                DEBUG_NORM,
                DEBUG_EXTRA };
  p_default = { DEBUG_OFF };
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug_level;

/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef char* 
{
  p_default = { "Test" };
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

/***********************************************************************
 * Input/output parameters
 */

commentdef
{
  p_header = "INPUT/OUTPUT PARAMETERS";
};

typedef enum
{
  REALTIME,
  FILE_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In FILE_LIST mode, the program operates on the input files "
           "specified on the command line.\n"
           "In REALTIME mode, the realtimeInput, InputDir is watched for "
           "new incoming files.\n";
  p_default = REALTIME;
} trigger_mode;

typedef struct {
	string InputDir;
	string IncludeSubString;
	string ExcludeSubString;
	boolean ProcessOldFiles;
} realtimeInput_t;

paramdef struct realtimeInput_t {
  p_default = { "/d1/data/raw", "", "", FALSE };
  p_descr = "If mode is REALTIME then use these parameters.";
  p_help = "Directory to watch, substring in filenames to include,\n"
	   "substring in filenames to exclude, and boolean \n"
           "indicating if old files should be processed.";
} realtimeInput;

paramdef enum data_type_t
{
  p_options = { SATELLITE,
                CLIMATOLOGY };
  p_default = { SATELLITE };
  p_descr = "Input date set type";
  p_help = "Takes into account differences in the data ordering, filename, and \n"
           "output encoding. The date and time are retrieved from the filename. \n"
           "The YYYYMMDD defaults to 20110801 for climatologies. The Output \n"
           "encoding is set to float for the frequency climatologies.";
} data_type;

paramdef string 
{
  p_default = { "." };
  p_descr = "Output url";
} output_url;

paramdef long
{
  p_descr = "file start time offset";
  p_help = "The number of seconds to be subtracted from the Unisys data time "
           "to get the MDV file start time.  "
           "Use a negative value if the start time should be later than the "
           "data time.";
  p_default = { 300 };
} start_time_offset;

paramdef long
{
  p_descr = "file centroid time offset";
  p_help = "The number of seconds to be added to the Unisys data time to get "
           "the MDV file centroid time.  "
           "Use a negative number if the file centroid time should precede "
           "the Unisys data time.";
  p_default = { 0 };
} mid_time_offset;

paramdef long
{
  p_descr = "file end time offset";
  p_help = "The number of seconds to be added to the Unisys data time to get "
           "the MDV file end time.  "
           "Use a negative number if the file end time should precede the "
           "Unisys data time.";
  p_default = { 150 };
} end_time_offset;

paramdef long 
{
  p_min = { 60 };
  p_default = { 300 };
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_input_data_age;

paramdef long 
{
  p_min = { 0 };
  p_max = { 300 };
  p_default = { 10 };
  p_descr = "Delay before processing incoming file (sec)";
  p_help = "Delay between finding new file and processing it - realtime only (sec)";
} processing_delay;

paramdef string
{
  p_descr = "field name for data -- long form";
  p_help = "This value is put in the MDV field header.";
  p_default = { "Refectivity" };
} data_field_name_long;

paramdef string
{
  p_descr = "field name for data -- short form";
  p_help = "This value is put in the MDV field header.";
  p_default = { "refl" };
} data_field_name;

paramdef boolean {
  p_descr = "Flag indicating whether the scaling_info parameter will be used.";
  p_help = "If TRUE, the scale and bias values in the scaling_info parameter "
           "will be used to scale the output field. If FALSE, the scale and "
           "bias values will be dynamically calculated. This parameter is "
           "not used if data type is set to CLIMATOLOGY.";
  p_default = false;
} use_scaling_info;

typedef struct {
  double scale;
  double bias;
} scaling_info_t;

paramdef struct scaling_info_t {
  p_descr = "Scaling information to be used for the output field.";
  p_help = "This parameter gives a scale and bias to be used for the "
           "output field.  This parameter is only used if use_scaling_info "
           "is set to TRUE.";
  p_default = { 0.5, -32.0 };
} scaling_info;

paramdef boolean
{
  p_descr = "Flag indicating if data units are converted to Celsius";
  p_help  = "If true, 273.16 is subtracted from the data value";
  p_default = false;
} ConvertKelvin2Celsius;

paramdef string
{
  p_descr = "data units";
  p_help = "This value is put in the MDV field header.";
  p_default = { "dBZ" };
} data_units;

paramdef double
{
  p_descr = "Bad data value.";
  p_help = "Data with this value (BEFORE applying scale and bias) not valid.";
  p_default = { -99.0 };
} bad_data_value;

paramdef double
{
  p_descr = "Missing data value.";
  p_help = "Data with this value (BEFORE applying scale and bias) not measured.";
  p_default = { -98.0 };
} missing_data_value;

paramdef boolean
{
  p_descr = "Flag indicating if data is big endian or little endian";
  p_help  = "If true, the data is assumed to be big endian";
  p_default = true;
} is_bigend;


typedef enum
{
 PROJ_TYPE_LAT_LON,
 PROJ_TYPE_FLAT
}proj_type_t;

typedef struct
{
 proj_type_t proj_type;
 double minx;
 double miny;
 double minz;
 double dx;
 double dy;
 double dz;
 long   nx;
 long   ny;
 long   nz;
 double origin_lat;
 double origin_lon;
 double rotation;
} proj_info_t;

paramdef struct proj_info_t
{
  p_descr = "Projection information for data coming in";
  p_default = { PROJ_TYPE_LAT_LON,-124.995, 32.005, 0.5, .01, .01, 0.5, 1501, 1201, 21, 0.0, 0.0, 0.0  }; 
} input_proj;

paramdef boolean
{
  p_descr = "Assign your own vlevels to the data";
  p_help = "Use the Vlevels below to assign to the output mdv data."
           "If false, Vlevels are determined by the minz,nz,dz values in "
           "the proj_info above.";
  p_default = false;
}AssignVlevelValues;

paramdef double
{
  p_descr = "Vlevels to assign to output data";
  p_help = "Useful when dealing with irregular level, i.e. radar data.";
  p_default = {0.5, 1.0, 1.5, 2.0, 2.5, 3.0};
} Vlevels[];


