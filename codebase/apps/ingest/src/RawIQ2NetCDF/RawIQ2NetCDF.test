/**********************************************************************
 * TDRP params for RawIQ2NetCDF
 **********************************************************************/

//======================================================================
//
// Program name: RawIQ2NetCDF.
//
// RawIQ2NetCDF reads raw IQ data from a file, and writes it to a netCDF 
//   file.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the list of file names specified on the 
//   command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input data files.
// This is used in REALTIME mode only. In ARCHIVE mode, the file paths 
//   are specified on the command line.
// Type: string
//

input_dir = "$(HOME)/data/iq/raw";

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 360;

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

//======================================================================
//
// FILE CONVERSION.
//
//======================================================================
 
///////////// ngates //////////////////////////////////
//
// Number of dates in data set.
// This number is needed in order to be able to split the data into 
//   individual beams.
// Type: int
//

ngates = 3;

///////////// start_gate //////////////////////////////
//
// The start gate number in the data set.
// Type: int
//

start_gate = 1;

///////////// start_az ////////////////////////////////
//
// The starting azimuith for the data (deg).
// Type: double
//

start_az = 30;

///////////// delta_az ////////////////////////////////
//
// The delta azimuth between samples (deg).
// Type: double
//

delta_az = 0.01;

///////////// elevation ///////////////////////////////
//
// The elevation angle of the data (deg).
// Type: double
//

elevation = 0.5;

///////////// delta_time //////////////////////////////
//
// The delta time between samples (sec).
// Type: double
//

delta_time = 0.001;

///////////// prt /////////////////////////////////////
//
// The PRT of the data (miscro-secs).
// Type: int
//

prt = 988;

//======================================================================
//
// OUTPUT FILE.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory for NetCDF files.
// Type: string
//

output_dir = "./output";

///////////// write_ldata_info_file ///////////////////
//
// Option to write _latest_data_info file in output dir.
// If TRUE, _latest_data_info is written to the output directory.
// Type: boolean
//

write_ldata_info_file = FALSE;

