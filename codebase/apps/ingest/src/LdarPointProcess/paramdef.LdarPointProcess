/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */


commentdef {
  p_header = "LdarPointProcess is a simple program to ingest ltg data from\n"
  "the Kennedy Space Center's LDAR system.\n"
  "Files are ASCII with (roughly) the following format :\n\n"
  "The following Lightning Detection and Ranging (LDAR) and Cloud to Ground Lightning\n"
  "Surveillance (CGLSS) data sets are displayed in a tab delimited format:\n"
  "\n"
  "The EVENT TYPE field will display the data type as an LDAR EVENT, GGLSS EVENT or\n"
  "CAL EVENT. A CAL EVENT is a locally generated simulated lightning event used to\n"
  "validate the operation status of the Kennedy Space Center's LDAR System.\n"
  "\n"
  "The X, Y and Z coordinates are in reference to the Kennedy Space Center's LDAR\n"
  "Central Site located at Latitude 28 32 18.55N and Longitude 80 38 33.48W\n"
  "\n"
  "JDAY	TIME(UTC)       	X(M)     	Y(M)      	Z(M)  	EVENT TYPE\n"
  "\n"
  "109	03:00:00:010007  	+0050431	+0047426	+13249	LDAR EVENT\n"
  "109	03:00:00:018755  	+0049489	+0047438	+08848	4DLSS EVENT\n"
  "109	03:00:00:020457  	+0049351	+0046647	+12848	4DLSS EVENT\n"
  "\n\n";
}

paramdef enum op_outputType{
  p_options = {SPDB};
  p_default = SPDB;
  p_descr = "Format of the output file.";
} outputType;

paramdef string {
  p_default = "spdbp:://localhost::./spdb/LdarPoints";
  p_descr = "Output url, of form spdbp:://host.domain:[port]:dir/dir ";
  p_help = "Data are written here.";
} output_url;

paramdef string {
 p_default = "";
 p_descr = "Output location if writing wscii output.";
 p_help =  "Data are written here.";
}ascii_output_dir;

paramdef string {
  p_default = "./";
  p_descr = "Input directory.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef string {
  p_default = ".txt";
  p_descr = "Input file extension.";
} fileExtension;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}


paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;


paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME, TIME_INTERVAL};
  p_default = REALTIME;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;

paramdef long {
  p_descr = "How long the data are valid, seconds.";
  p_help = "Depends on input frequency. Given that these data can come in\n"
  "very quickly, it having them age off a display system equally quickly\n"
  "can avoid a lot of clutter.";
  p_default = 30;
} Expiry;
 
typedef struct {
	double latOrigin;
	double lonOrigin;
} LDAR_Central_Site_Loc_t;

paramdef struct LDAR_Central_Site_Loc_t {
        p_descr = "Latitude and Longitude of the LDAR.";
        p_help = "Used to compute the Lat and Lon of the\n"
	         "strokes.";
        p_default = { 28.538486, -80.642633 };
} LDAR_Central_Site_Loc;

commentdef {
  p_header = "Options to select a subregion to ingest (the whole thing may\n"
  "be a pretty big database). The limits on altitude may allow you to\n"
  "effectively select cloud-to-cloud ltg.";
}

paramdef double {
  p_descr = "Minimum latitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = -90.0;
} minLat;
 
paramdef double {
  p_descr = "Maximum latitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = 90.0;
} maxLat;
 
paramdef double {
  p_descr = "Minimum longitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = -180.0;
} minLon;
 
paramdef double {
  p_descr = "Maximum longitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = 180.0;
} maxLon;
 
paramdef double {
  p_descr = "Minimum altitude to accept, m.";
  p_help = "Set to define the ingest region.";
  p_default = 0.0;
} minAlt;
 
paramdef double {
  p_descr = "Maximum altitude to accept, m.";
  p_help = "Set to define the ingest region. May also be used for\n"
  "quality control - occasionally data with clearly erroneously high\n"
  "altitudes come in.";
  p_default = 20000.0;
} maxAlt;
 
paramdef boolean {
  p_descr = "Set to TRUE to only accept strikes close to the\n"
  "location defined by the centralPoint parameter.";
  p_help = "Cuts down on the number of ingested strikes, which\n"
  "could otherwise be so large as to be unmanagable.";
  p_default = FALSE;
} applyClosenessCriteria;

typedef struct {
  double lat;
  double lon;
  double maxRangeKm;
} centralPoint_t;

paramdef struct centralPoint_t {
  p_descr = "Defines the location and maximum distance to test for if\n"
  "we are applying a closeness criteria test.";
  p_help = "Relevant only if applyClosenessCriteria is TRUE.";
  p_default = { 28.538486, -80.642633, 300.0 };
} centralPoint;

paramdef double {
  p_descr = "The maximum allowable distance, Km,\n"
	"between succesive points for LDAR entries to\n"
  "be bundled into the same event.";
  p_help = "May be horizontal distance only, or may be 3D distance,\n"
  "depending on the setting of considerVerticalDistance.";
  p_default = 30.0;
} maxAllowedDist;

paramdef double {
  p_descr = "The maximum allowable time, seconds, betwen successive\n"
	"points, for LDAR entries to\n"
  "be bundled into the same event.";
  p_help = "The default seemed to work well for the STEPS case the program\n"
  "was tested on.";
  p_default = 1.5;
} maxAllowedTime;

typedef struct {
	boolean applyLimit;
	double limit;
} optionalLimit_t;

paramdef struct optionalLimit_t {
  p_descr = "The maximum allowable distance, Km,\n"
	"from the first point for LDAR entries to\n"
  "be bundled into the same event.";
  p_help = "May be horizontal distance only, or may be 3D distance,\n"
  "depending on the setting of considerVerticalDistance.";
  p_default = {FALSE, 100.0};
} totalMaxAllowedDist;

paramdef struct optionalLimit_t {
  p_descr = "The maximum allowable time, seconds,\n"
	"from the first point for LDAR entries to\n"
  "be bundled into the same event.";
  p_help = "The default seemed to work well for the STEPS case the program\n"
  "was tested on.";
  p_default = {FALSE, 10};
} totalMaxAllowedTime;

paramdef boolean {
  p_descr = "Option to consider the vertical component in the\n"
  "calculation of distance. Default is not to do this.";
  p_help = "For the STEPS data I have, it turned out not to make much\n"
  "difference anyway.";
  p_default = FALSE;
} considerVerticalDistance;

paramdef int {
  p_descr = "The minimum number of LDAR entires in a bundle for that\n"
   "bundle to be written out as an SPDB GenPoint.";
  p_help = "The default was developed for a STEPS case in which there\n"
  "was a lot of ltg activity, so it might be a bit high. The danger in\n"
  "making it too low is that too much data results.";
  p_default = 20;
} minNumEntries;

paramdef boolean {
  p_descr = "Option to use the lat,lon and time of the first LDAR entry.";
  p_help = "If set to FALSE then the last lat, lon and time are used.";
  p_default = TRUE;
} saveBasedOnFirstPoint;

paramdef boolean {
  p_descr = "Option to save altitude files. This is a research option.";
  p_help = "By default, all the output goes to the GenPt SPDB database,\n"
  "which saves statistics about the altitudes. This option allows ASCII\n"
  "files of actual altitude to be written (.alt extension). File names\n"
  "are NumEntries_lat*100_lon*100_unixTime.alt";
  p_default = FALSE;
} saveAltFiles;

paramdef boolean {
  p_descr = "Option to save the data to traditional_ltg_url in the\n"
  "newer ltg struct which includes an altitude component.";
  p_default = FALSE;
} saveTraditional;

paramdef string {
  p_default = "spdbp:://localhost::./spdb/LdarPoints";
  p_descr = "Output url, of form spdbp:://host.domain:[port]:dir/dir\n"
  "for traditional ltg structure output (2D).";
  p_help = "Only used if saveTraditional is TRUE.";
} traditional_ltg_url;

paramdef enum in_format {
  p_options = {FORMAT_ONE};
  p_default = FORMAT_ONE;
  p_descr = "Input data file format.";
  p_help = "See comments at top of param file.";
} format;
  
