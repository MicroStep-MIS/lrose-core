// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program LdarFlashExtent
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("LdarPointProcess is a simple program to ingest ltg data from\nthe Kennedy Space Center's LDAR system.\nFiles are ASCII with (roughly) the following format :\n\nThe following Lightning Detection and Ranging (LDAR) and Cloud to Ground Lightning\nSurveillance (CGLSS) data sets are displayed in a tab delimited format:\n\nThe EVENT TYPE field will display the data type as an LDAR EVENT, GGLSS EVENT or\nCAL EVENT. A CAL EVENT is a locally generated simulated lightning event used to\nvalidate the operation status of the Kennedy Space Center's LDAR System.\n\nThe X, Y and Z coordinates are in reference to the Kennedy Space Center's LDAR\nCentral Site located at Latitude 28 32 18.55N and Longitude 80 38 33.48W\n\nJDAY	TIME(UTC)       	X(M)     	Y(M)      	Z(M)  	EVENT TYPE\n\n109	03:00:00:010007  	+0050431	+0047426	+13249	LDAR EVENT\n109	03:00:00:018755  	+0049489	+0047438	+08848	4DLSS EVENT\n109	03:00:00:020457  	+0049351	+0046647	+12848	4DLSS EVENT\n\n\n");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output url, of form mdvp:://host.domain:[port]:dir/dir ");
    tt->help = tdrpStrDup("Data are written here.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::./mdv/LdarFlashExtent");
    tt++;
    
    // Parameter 'timeStamp'
    // ctype is '_output_timestamp'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("timeStamp");
    tt->descr = tdrpStrDup("Time stamp given to output file.");
    tt->help = tdrpStrDup("Defines what timestamp is given based on the outputInterval. If the interval start time is 04:00 and the outputInterval is 300 seconds, then a timeStamp set to END, will give 04:05:00, a timeStamp set to BEGIN will give 04:00:00, and a timeStamp set to MIDDLE will give a time of 04:02:30.");
    tt->val_offset = (char *) &timeStamp - &_start_;
    tt->enum_def.name = tdrpStrDup("output_timestamp");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("BEGIN");
      tt->enum_def.fields[0].val = BEGIN;
      tt->enum_def.fields[1].name = tdrpStrDup("MIDDLE");
      tt->enum_def.fields[1].val = MIDDLE;
      tt->enum_def.fields[2].name = tdrpStrDup("END");
      tt->enum_def.fields[2].val = END;
    tt->single_val.e = END;
    tt++;
    
    // Parameter 'InDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("InDir");
    tt->descr = tdrpStrDup("Input directory.");
    tt->help = tdrpStrDup("Directory path for input data files.");
    tt->val_offset = (char *) &InDir - &_start_;
    tt->single_val.s = tdrpStrDup("./");
    tt++;
    
    // Parameter 'fileExtension'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fileExtension");
    tt->descr = tdrpStrDup("Input file extension.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fileExtension - &_start_;
    tt->single_val.s = tdrpStrDup(".txt");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debugRejects'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debugRejects");
    tt->descr = tdrpStrDup("Debug rejection option");
    tt->help = tdrpStrDup("If set, print messages about why data are being rejected.");
    tt->val_offset = (char *) &debugRejects - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_op_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line. In TIME_INTERVAL mode, a list of files is gathered between start and end times.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("op_mode");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_INTERVAL");
      tt->enum_def.fields[2].val = TIME_INTERVAL;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'LDAR_Central_Site_Loc'
    // ctype is '_LDAR_Central_Site_Loc_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("LDAR_Central_Site_Loc");
    tt->descr = tdrpStrDup("Latitude and Longitude of the LDAR.");
    tt->help = tdrpStrDup("Used to compute the Lat and Lon of the\nstrokes.");
    tt->val_offset = (char *) &LDAR_Central_Site_Loc - &_start_;
    tt->struct_def.name = tdrpStrDup("LDAR_Central_Site_Loc_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("latOrigin");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &LDAR_Central_Site_Loc.latOrigin - (char *) &LDAR_Central_Site_Loc;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lonOrigin");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &LDAR_Central_Site_Loc.lonOrigin - (char *) &LDAR_Central_Site_Loc;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 28.5385;
      tt->struct_vals[1].d = -80.6426;
    tt++;
    
    // Parameter 'minAlt'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minAlt");
    tt->descr = tdrpStrDup("Minimum altitude to accept, m.");
    tt->help = tdrpStrDup("Set to define the ingest region.");
    tt->val_offset = (char *) &minAlt - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'maxAlt'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxAlt");
    tt->descr = tdrpStrDup("Maximum altitude to accept, m.");
    tt->help = tdrpStrDup("Set to define the ingest region. May also be used for\nquality control - occasionally data with clearly erroneously high\naltitudes come in.");
    tt->val_offset = (char *) &maxAlt - &_start_;
    tt->single_val.d = 20000;
    tt++;
    
    // Parameter 'maxAllowedDist'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxAllowedDist");
    tt->descr = tdrpStrDup("The maximum allowable distance, Km,\nbetween succesive points for LDAR entries to\nbe bundled into the same event.");
    tt->help = tdrpStrDup("May be horizontal distance only, or may be 3D distance,\ndepending on the setting of considerVerticalDistance.");
    tt->val_offset = (char *) &maxAllowedDist - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'maxAllowedTime'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxAllowedTime");
    tt->descr = tdrpStrDup("The maximum allowable time, seconds, betwen successive\npoints, for LDAR entries to\nbe bundled into the same event.");
    tt->help = tdrpStrDup("The default seemed to work well for the STEPS case the program\nwas tested on.");
    tt->val_offset = (char *) &maxAllowedTime - &_start_;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'maxDuration'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxDuration");
    tt->descr = tdrpStrDup("The maximum allowable time duration (in seconds) for \na flash .");
    tt->help = tdrpStrDup("If the time between the first point and current point exceeds\nthis threshold, the current point will be considered the start\nof a new flash.");
    tt->val_offset = (char *) &maxDuration - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'considerVerticalDistance'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("considerVerticalDistance");
    tt->descr = tdrpStrDup("Option to consider the vertical component in the\ncalculation of distance. Default is not to do this.");
    tt->help = tdrpStrDup("For the STEPS data I have, it turned out not to make much\ndifference anyway.");
    tt->val_offset = (char *) &considerVerticalDistance - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'useZeroForMissing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useZeroForMissing");
    tt->descr = tdrpStrDup("Option to use 0 as the bad/missing value.");
    tt->help = tdrpStrDup("Good for the display. If FALSE then -1.0 is used.");
    tt->val_offset = (char *) &useZeroForMissing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'minNumEntries'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("minNumEntries");
    tt->descr = tdrpStrDup("The minimum number of LDAR entires in a bundle for that\nbundle to be written out.");
    tt->help = tdrpStrDup("The default was developed for a STEPS case in which there\nwas a lot of ltg activity, so it might be a bit high. The danger in\nmaking it too low is that too much data results.");
    tt->val_offset = (char *) &minNumEntries - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'outputInterval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("outputInterval");
    tt->descr = tdrpStrDup("Output interval, seconds.");
    tt->help = tdrpStrDup("MDV output happens over this interval.");
    tt->val_offset = (char *) &outputInterval - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'format'
    // ctype is '_in_format'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("format");
    tt->descr = tdrpStrDup("Input data file format.");
    tt->help = tdrpStrDup("See comments at top of param file.");
    tt->val_offset = (char *) &format - &_start_;
    tt->enum_def.name = tdrpStrDup("in_format");
    tt->enum_def.nfields = 1;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FORMAT_ONE");
      tt->enum_def.fields[0].val = FORMAT_ONE;
    tt->single_val.e = FORMAT_ONE;
    tt++;
    
    // Parameter 'gridDef'
    // ctype is '_gridDef_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("gridDef");
    tt->descr = tdrpStrDup("Definition of MDV grid.");
    tt->help = tdrpStrDup("The grid can be either a cartesian grid with\nthe minx, miny, dx and dy in Km\nor a lat/lon grid with the minx, miny, and dx,\nand dy in degrees and the extent determined by\nnx,ny,dx and dy. See the useLatlon parameter.");
    tt->val_offset = (char *) &gridDef - &_start_;
    tt->struct_def.name = tdrpStrDup("gridDef_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &gridDef.nx - (char *) &gridDef;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &gridDef.ny - (char *) &gridDef;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("dx");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &gridDef.dx - (char *) &gridDef;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("dy");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &gridDef.dy - (char *) &gridDef;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("latOrigin");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &gridDef.latOrigin - (char *) &gridDef;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("lonOrigin");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &gridDef.lonOrigin - (char *) &gridDef;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("minx");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &gridDef.minx - (char *) &gridDef;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("miny");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &gridDef.miny - (char *) &gridDef;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 400;
      tt->struct_vals[1].i = 400;
      tt->struct_vals[2].d = 1;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 28.5385;
      tt->struct_vals[5].d = -80.6426;
      tt->struct_vals[6].d = -200;
      tt->struct_vals[7].d = -200;
    tt++;
    
    // Parameter 'useLatlon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useLatlon");
    tt->descr = tdrpStrDup("Option to use a latlon grid rather than a flat one.");
    tt->help = tdrpStrDup("See comments for the gridDef parameter.");
    tt->val_offset = (char *) &useLatlon - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'normSpatial'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("normSpatial");
    tt->descr = tdrpStrDup("Option to normalize spatially.");
    tt->help = tdrpStrDup("If TRUE, output values are divided by grid size, that\nis, val = val / (dx*dy). Can be used in conjunction with\nnormTemporal");
    tt->val_offset = (char *) &normSpatial - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'normTemporal'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("normTemporal");
    tt->descr = tdrpStrDup("Option to normalize temporally.");
    tt->help = tdrpStrDup("If TRUE, output values are divided by output interval, that\nis, val = val / (outputInterval). Can be used in\nconjunction with normSpatial");
    tt->val_offset = (char *) &normTemporal - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'minLat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minLat");
    tt->descr = tdrpStrDup("Minimum latitude to accept, decimal degrees.");
    tt->help = tdrpStrDup("Set to define the ingest region.");
    tt->val_offset = (char *) &minLat - &_start_;
    tt->single_val.d = -90;
    tt++;
    
    // Parameter 'maxLat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxLat");
    tt->descr = tdrpStrDup("Maximum latitude to accept, decimal degrees.");
    tt->help = tdrpStrDup("Set to define the ingest region.");
    tt->val_offset = (char *) &maxLat - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'minLon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minLon");
    tt->descr = tdrpStrDup("Minimum longitude to accept, decimal degrees.");
    tt->help = tdrpStrDup("Set to define the ingest region.");
    tt->val_offset = (char *) &minLon - &_start_;
    tt->single_val.d = -180;
    tt++;
    
    // Parameter 'maxLon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxLon");
    tt->descr = tdrpStrDup("Maximum longitude to accept, decimal degrees.");
    tt->help = tdrpStrDup("Set to define the ingest region.");
    tt->val_offset = (char *) &maxLon - &_start_;
    tt->single_val.d = 180;
    tt++;
    
    // Parameter 'ldata_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ldata_available");
    tt->descr = tdrpStrDup("Flag to indicate availability of latest data info files");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ldata_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
