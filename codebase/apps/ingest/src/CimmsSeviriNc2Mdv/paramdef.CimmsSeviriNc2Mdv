/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.CimmsSeviriNc2Mdv
 *
 * This file contains the TDRP parameter definitions for
 * CimmsSeviriNc2Mdv
 */

commentdef
{
  p_header = "CimmsSeviriNc2Mdv";
  p_text = "This program converts the CIMMS Seviri netCDF files "
           "into MDV format.";
};


/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_default = false;
} debug;

paramdef boolean
{
  p_descr = "verbose debug flag";
  p_default = false;
} verbose;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef enum
{
  FILE_LIST,
  INPUT_DIR,
  INPUT_DIR_RECURSE,
  LATEST_DATA
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "\tIn FILE_LIST mode, the program operates on the files specified "
           "on the command line.\n"
           "\tIn INPUT_DIR mode, the program will process new files as they "
           "appear in the input_dir directory.\n"
           "\tIn INPUT_DIR_RECURSE mode, the program will process new files "
           "as they appear in the input_dir directory or in any "
           "subdirectory.\n"
           "\tIn LATEST_DATA mode, the program will process new files as they "
           "appear in the _latest_data_info file in the input_dir directory.\n";
  p_default = "FILE_LIST";
} trigger_mode;

paramdef string
{
  p_descr = "Input directory";
  p_default = "$(RAP_DATA_DIR)/raw/seviri";
} input_dir;

paramdef string
{
  p_descr = "Input filename substring";
  p_help = "Used only if trigger_mode is set to INPUT_DIR or INPUT_DIR_RECURSE. "
           "The program will only process files whose name contains "
           "this substring. "
           "Set to \"\" to process all files in the input directory.\n";
  p_default = "";
} input_substring;

paramdef string
{
  p_descr = "Input filename exclude substring";
  p_help = "Used only if trigger_mode is set to INPUT_DIR or INPUT_DIR_RECURSE. "
           "The program will not process files whose name contains "
           "this substring. "
           "Set to \"\" to process all files in the input directory.\n";
  p_default = "";
} exclude_substring;

paramdef long
{
  p_descr = "Maximum number of seconds input files are valid.";
  p_help = "Used only if trigger_mode is set to LATEST_DATA.";
  p_default = 600;
} max_valid_secs;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::mdv/seviri";
} output_url;

typedef enum
{
  PROJ_FLAT,
  PROJ_LATLON,
  PROJ_LC2
} proj_type_t;

typedef struct
{
  proj_type_t proj_type;
  double minx;
  double miny;
  int nx;
  int ny;
  double dx;
  double dy;
  double origin_lat;
  double origin_lon;
  double rotation;
  double lat1;
  double lat2;
} proj_t;

paramdef struct proj_t
{
  p_descr = "Output projection";
  p_default = { PROJ_FLAT, 0.0, 0.0, 0, 0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0 };
} output_proj;

paramdef int
{
  p_descr = "GRIB code for these bands.";
  p_help = "Needed if you are going to run SatParallax on this data.\n"
           "Set to 11 for IR bands and to 84 for visible bands. "
           "I am assuming that all bands in a given CIMMS file are of the "
           "same type. "
           "If we get a file with bands of different types, this code will "
           "have to be updated.";
  p_default = 11;
} output_grib_code;

typedef enum
{
  MAP_LATEST,
  MAP_NEAREST_NEIGHBOR,
  MAP_MEAN
} mapping_type_t;

paramdef enum mapping_type_t
{
  p_descr = "Method to use for mapping the satellite data points onto the "
            "MDV grid.";
  p_help = "\tMAP_LATEST - The data values in the DMSP file are mapped into "
           "the MDV fields as they are encountered. "
           "Thus, if two DMSP values map to the same grid square, the last "
           "value in the DMSP file is used. "
           "This is the fastest, cheapest mapping method.\n"
           "\tMAP_NEAREST_NEIGHBOR - For each square in the MDV grid, the "
           "DMSP value that falls within the defined radius_of_influence "
           "that is closest to "
           "the center of the grid square will be used.\n"
           "\tMAP_MEAN - For each square in the MDV grid, the value will be "
           "the mean of all DMSP values within the radius_of_influence of "
           "the grid square center. "
           "For the surface type data, each grid square in the MDV grid will "
           "contain the value of the nearest DMSP value within the defined "
           "radius_of_influence.\n";
  p_default = MAP_LATEST;
} mapping_type;

paramdef double
{
  p_descr = "Radius of influence for value mapping in kilometers.";
  p_help = "Used only if mapping_type is set to MAP_MEAN.";
  p_default = 100.0;
} radius_of_influence;
