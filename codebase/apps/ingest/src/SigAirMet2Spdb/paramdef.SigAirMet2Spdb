/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions for SigAirMet2Spdb
//
// Mike Dixon, RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// Jan 2003
//

commentdef {
  p_header = "Program name: SigAirMet2Spdb";
  p_text = "SigAirMet2Spdb reads SIGMET and AIRMET data from text files and stores in SPDB in ASCII and/or decoded format.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print decoding problems to stderr.";
  p_help = "Turn this on if you want to log these problems in detail or if you want to run SigAirMet2Spdb.pl to generate statistics.";
} print_decode_problems_to_stderr;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "OPERATIONAL MODE.";
}

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operational mode";
  p_help = "REALTIME mode - waits for new data. ARCHIVE mode - finds files between start and end times. FILELIST mode - uses file list from -f on command line.";
} mode;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "raw/aftn";
  p_descr = "Name of input data directory.";
  p_help = "ASCII input files are stored in this directory.";
} input_dir_path;

paramdef int {
  p_default = 300;
  p_descr = "Max age of input data";
  p_help = "For REALTIME only - max age of input data for it to be valid";
} max_realtime_valid_age;

paramdef boolean {
  p_default = true;
  p_descr = "Decode SIGMETs.";
  p_help = "Turn this on to decode SIGMETs from the input_dir_path. Turn off to not decode SIGMETs; they will also not be saved to the output URL(s)";
} decode_sigmets;

paramdef boolean {
  p_default = true;
  p_descr = "Decode AIRMETs.";
  p_help = "Turn this on to decode AIRMETs from the input_dir_path. Turn off to not decode AIRMETs; they will also not be saved to the output URL(s)";
} decode_airmets;

paramdef char* {
  p_default = {"./station_location.txt"};
  p_descr = "Path to station location file.";
  p_help = "Used to determine the location of station identifiers. The station location file should contain a station identification followed by the latitude and longitude for each station.";
} st_location_path;

paramdef char* {
  p_default = {"./fir_list.txt"};
  p_descr = "Path to FIR location file.";
  p_help = "Used to determine the location of FIRs. The FIR file should contain the FIR/UIR/CTA name. Lat,lon are not yet supported for FIRs.";
} fir_location_path;

paramdef char* {
  p_default = {"./us_states.txt"};
  p_descr = "Path to US states abbreviations file.";
  p_help = "Used to determine the US States abbreviations. The file should contain the state name a comma and then the 2-letter abbreviation.";
} us_states_location_path;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to store in ascii format in SPDB.";
  p_help = "If TRUE, ascii data is stored using the ascii_url.";
} store_ascii_format;

paramdef string {
  p_descr = "Output SPDB URL for ascii data.";
  p_help = "Used if 'store_ascii_format' is TRUE.";
  p_default = "spdb/ascii_sigmet";
} ascii_output_url;

paramdef boolean {
  p_default = false;
  p_descr = "Option to include header with the SIGMET.";
  p_help = "Sometimes there is a header at the start of a SIG/AIRMET block. If store_header is true, the header is added to the start of the SIG/AIRMET message before storing it.";
} store_ascii_header;

paramdef int {
  p_descr = "Data expire seconds - ASCII data";
  p_help = "Number of seconds the data is valid before it should be expired.";
  p_default = 10800;
} ascii_expire_secs;

paramdef boolean {
  p_default = true;
  p_descr = "Option to store in decoded format in SPDB.";
  p_help = "If TRUE, decoded data is stored using the decoded_url.";
} store_decoded_format;

paramdef string {
  p_descr = "Output SPDB URL for decoded data.";
  p_help = "Used if 'store_decoded_format' is TRUE.";
  p_default = "spdb/sigmet";
} decoded_output_url;

paramdef string {
  p_descr = "Input URL for cancelling.";
  p_help = "To cancel a sigmet we read in from this URL, set the cancel flag, and then overwrite to decoded_output_url. This is done because the output_url may sometimes be a distribution URL, and we do not want to read from those.";
  p_default = "spdb/sigmet";
} cancel_input_url;

commentdef {
  p_header = "DECODING SPECIFICS";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to try to generate polyons as modifications from FIR boundary";
  p_help = "Only valid when cannot generate a polygon from the SIG/AIRMET but SIG/AIRMET text does refer to an FIR. If TRUE, and the SIG/AIRMET text contains modifications to the FIR, will attempt to generate a polygon as a subset of the FIR. If FALSE, will return the FIR boundary with no subsetting.";
} modify_fir_boundary;

paramdef string {
  p_descr = "List of bogus stations.";
  p_help = "Only used in station decoding.";
  p_default = { "ABV", "AND", "AREA", "AT", "BLO", "BLW", "BOT", "BOUNDED", 
        "BTN", "BUT", "BY", "CHG", "CTA", "DUE",
        "FROM", "GND", "ICING", "INTSF", "KMH", "KTS", "LIN", "LINE", 
        "METEO-SAT", "MOV", 
        "OBS", "OBS/FCST", "OF", "ON", "OR", "OVER", "SAN", "SLW",
        "STNR", "THE", "TO", "TOP", "TOPS", "UNTIL", "UTC", "VALID", 
        "WHOLE", "WKN", "WTN" };
} bogus_stations [];

typedef struct {
  string message_text;
  string standard_text;
} wx_translator_t;

paramdef struct wx_translator_t {
  p_default = {
  { "TROPICAL STORM", "TC"},
  { "TROPICAL CYCLONE", "TC"},
  { "TYPHOON", "TC"},
  { "HURRICANE", "TC"},
  { "TC", "TC"},
  { "VOLCANIC", "VA"},
  { "VOLCANIC ASH", "VA"},
  { "VA", "VA"},
  { "ERUPTION", "VA"},
  { "OBSC TS HVYGR", "OBSC TS HVYGR"},
  { "EMBD TS HVYGR", "EMBD TS HVYGR"},
  { "FRQ TS HVYGR", "FRQ TS HVYGR"},
  { "SQL TS HVYGR", "SQL TS HVYGR"},
  { "ISOL TS GR", "ISOL TS GR"},
  { "OCNL TS GR", "OCNL TS GR"},
  { "TSGR", "TS GR"},
  { "ISOL TS", "ISOL TS"},
  { "OCNL TS", "OCNL TS"},
  { "OBSC TS", "OBSC TS"},
  { "EMBD TS", "EMBD TS"},
  { "EMBD TS/CB", "EMBD TS"},
  { "FRQ TS", "FRQ TS"},
  { "FRQ TSRA", "FRQ TS"},
  { "SQL TS", "SQL TS"},
  { "LN TS", "LN TS"},
  { "LN DVLPG TS", "LN TS"},
  { "TS", "TS"},
  { "EMBD CB", "EMBD CB"},
  { "EMBD CB/TS", "EMBD TS"},
  { "ISOL CB", "ISOL CB"},
  { "ISOL CB/TS", "ISOL TS"},
  { "ISOL/OCNL CB", "ISOL CB"},
  { "OCNL CB", "OCNL CB"},
  { "FRQ CB", "FRQ CB"},
  { "LN CB", "LN CB"},
  { "CB/TS", "TS"},
  { "SEV ICE(FZRA)", "SEV ICE(FZRA)"},
  { "FZRA", "SEV ICE(FZRA)"},
  { "SEV ICE", "SEV ICE"},
  { "SEV ICG", "SEV ICE"},
  { "SEV ICING", "SEV ICE"},
  { "SEV/MOD ICE", "SEV ICE"},
  { "MOD-SEV ICE", "SEV ICE"},
  { "MDT-SEV ICE", "SEV ICE"},
  { "MOD/SEV ICE", "SEV ICE"},
  { "MDT/SEV ICE", "SEV ICE"},
  { "MOD-SEV ICING", "SEV ICE" },
  { "MDT-SEV ICING", "SEV ICE" },
  { "MOD/SEV ICING", "SEV ICE" },
  { "MDT/SEV ICING", "SEV ICE" },
  { "SEV MXD ICGICIP", "SEV ICE"},
  { "SEV MXD ICGIC", "SEV ICE"},
  { "SEV MXD/CLR ICGICIP", "SEV ICE"},
  { "SEV MXD ICG/TURB" , "SEV ICE"},
  { "MDT ICE", "MOD ICE"},
  { "MOD ICE", "MOD ICE"},
  { "SEV TURB", "SEV TURB"},
  { "SEV TRB", "SEV TURB"},
  { "SEVERE TURB", "SEV TURB"},
  { "SEVERE TURBULENCE", "SEV TURB" },
  { "MODERATE TO SEVERE TURBULENCE", "SEV TURB" },
  { "MOD-SEV TURB", "SEV TURB"},
  { "MDT-SEV TURB", "MOD TURB"},
  { "MOD/SEV TURB", "SEV TURB"},
  { "MDT/SEV TURB", "SEV TURB"},
  { "SEV/MOD TURB", "SEV TURB"},
  { "SEV-MOD TURB", "SEV TURB"},
  { "SEV/MDT TURB", "SEV TURB"},
  { "SEV-MDT TURB", "SEV TURB"},
  { "MODERATE TURBULENCE", "MOD TURB" },
  { "MOD TURB", "MOD TURB"},
  { "MDT TURB", "MOD TURB"},
  { "TURB MOD", "MOD TURB"},
  { "SEV CAT", "SEV TURB"},
  { "MOD-SEV CAT", "SEV TURB"},
  { "MDT-SEV CAT", "SEV TURB"},
  { "MOD CAT", "MOD TURB"},
  { "MDT CAT", "MOD TURB"},
  { "MDT-SEV MECH/LLJ", "SEV TURB"},
  { "MDT-SEV MECH", "SEV TURB"},
  { "SEV MTW", "SEV MTW"},
  { "MOD MTW", "MOD MTW"},
  { "HVY DS", "HVY DS"},
  { "HVY SS", "HVY SS"},
  { "SFC WSPD", "SFC WSPD"},
  { "SFC VIS", "SFC VIS"},
  { "BKN CLD", "BKN CLD"},
  { "OVC CLD", "OVC CLD"},
  { "MT OBSC", "MT OBSC"},
  { "GR", "GR"},
  {"RDOACT CLD","RDOACT CLD"}
  };
  p_descr = "Translation of message wx text into official text.";
  p_help = "Some messages contain non-standard weather text. For example, the message may contain the text MDT TURB instead of MOD TURB. This array allows for the translation of message text into standard text. This list should include all the standard wx types as well as non-standard ones.";
} wx_translator[];

paramdef int {
  p_default = -1;
  p_descr = "Threshold to consider a CNL sigmet for processing.";
  p_help = "Some SIGMETs have a new sigmet, with a CNL for the old SIGMET appended to the end.  This threshold can be used to differentiate between these new compound SIGMETs and regular CNL SIGMETs.  If the SIGMET has a CNL, and has at least this many tokens, it will continue to be processed as a normal SIGMET, allowing compound SIGMETs to be decoded correctly.\nFrom our limited investigation, we think a value around 25 should produce correct results.\nLeave the default value of -1 to not process any CNL SIGMETs as compound SIGMETs.";
} token_threshold_for_cancel;

commentdef {
  p_header = "QUALITY CONTROL";
}

paramdef double {
  p_default = 7500.0;
  p_descr = "Maximum distance to a station (km).";
  p_help = "When searching for a station closest to a point, the station will only be accepted if the distance to the station is less than this value.";
} max_distance_to_closest_station;

paramdef boolean {
  p_default = true;
  p_descr = "Option to check polygon for reasonable size and shape.";
  p_help = "If TRUE, test the vertices to make sure they are reasonable. There are 2 tests: (a) max_valid_polygon_distance: the maximum distance between adjacent vertices; (b) min_valid_angle: minimum angle enclosed between adjacent sides of the polygon.";
} check_polygon_size_and_shape;

paramdef double {
  p_default = 5000.0;
  p_descr = "Maximum polygon side distance (km).";
  p_help = "If the length of two adjacent sides in a polygon exceeds this value, the vertex between the two sides is discarded. Only applies if check_polygon_size_and_shape is true.";
} max_valid_polygon_distance;

paramdef double {
  p_default = 10.0;
  p_descr = "Minumum angle between polygon sides (deg).";
  p_help = "If the angle between two adjacent sides in a polygon is less than this value, the vertex between the two sides is discarded. Only applies if check_polygon_size_and_shape is true.";
} min_valid_polygon_angle;

paramdef int {
  p_default = 21600;
  p_descr = "Maximum SIGMET duration - secs.";
  p_help = "The maximum duration of a SIGMET. If the duration exceeds this value, the start and expire times are set to the issue time. That way the SIGMET will have no effect, but will still be in the data base.";
} sigmet_max_duration;

paramdef int {
  p_default = 86400;
  p_descr = "Maximum AIRMET duration - secs.";
  p_help = "The maximum duration of an AIRMET. If the duration exceeds this value, the start and expire times are set to the issue time. That way the AIRMET will have no effect, but will still be in the data base.";
} airmet_max_duration;

