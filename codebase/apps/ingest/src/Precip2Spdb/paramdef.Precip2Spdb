/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/******************************************************************
 *
 * Parameter definitions for Precip2Spdb
 *
 */

commentdef {
  p_header = "Precip2Spdb reads precip accumulation data from ASCII files, and saves them out to SPDB using XML in the WxObs format.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the appropriate level of detail.";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In this mode it is optional to watch for a latest_data_info file. In ARCHIVE mode, it processes all of the data files in the input directory between the start and end times set on the command line. In FILELIST mode, it processes all of the files in the list specified on the command line. In FILELIST mode paths must be fully qualified with respect to the date and time - so if each date has a separate subdirectory the date part of the path must be included.";
} mode;

commentdef {
  p_header = "DATA FILES";
}

paramdef string {
  p_default = "/tmp/step_precip";
  p_descr = "Input directory";
  p_help = "Directory where input data files can be found.";
} input_dir;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set to true if there is a latest_data_info file available in the input directory.";
  p_help = "REALTIME mode only.";
} latest_data_info_avail;

paramdef int {
  p_default = 3600;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

paramdef boolean {
  p_default = FALSE;
  p_descr = "When set, only checks input_dir for subdirs of the form YYYYMMDD";
  p_help = "Only in REALTIME mode with latest_data_info_avail FALSE.";
} strict_subdir_check;

paramdef boolean {
  p_default = FALSE;
  p_descr = "When set, check file name contains specified sub-string.";
  p_help = "See file_match_string.";
} file_name_check;

paramdef string {
  p_default = "txt";
  p_descr = "Input filename match string";
  p_help = "Files must contain this string to be processed";
} file_match_string;

commentdef {
  p_header = "INTERPRETING THE INPUT DATA";
}

typedef enum {
  RAL_STEP_ASCII, RAL_NCDC_CSV
} input_format_t;

paramdef enum input_format_t {
  p_default = RAL_STEP_ASCII;
  p_descr = "Format for input ASCII data";
  p_help = "RAL_STEP_ASCII: precip accumulation data in the RAL STEP format, from Kyoko Ikeda. RAL_NCDC_CSV: comma-separated data from NCDC translated by Andy Newman at RAL.";
} input_format;

paramdef string {
  p_default = " ";
  p_descr = "Delimiter for data in ASCII input files";
  p_help = "Normally columns are space-delimited or comma-delimited";
} data_column_delimiter;

paramdef string {
  p_default = "#";
  p_descr = "Character in first position to indicate a comment line.";
  p_help = "Normally comment lines begin with #";
} comment_character;

commentdef {
  p_header = "USE BOUNDING BOX";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to limit data to within a given bounding box.";
  p_help = "If true, only stations within the box will be accepted.";
} constrain_using_bounding_box;

paramdef double {
  p_default = -90;
  p_descr = "Minimum latitude for bounding box.";
} bounding_box_min_lat;

paramdef double {
  p_default = 90;
  p_descr = "Maximum latitude for bounding box.";
} bounding_box_max_lat;

paramdef double {
  p_default = -180;
  p_descr = "Minimum longitude for bounding box.";
} bounding_box_min_lon;

paramdef double {
  p_default = 180;
  p_descr = "Maximum longitude for bounding box.";
} bounding_box_max_lon;

commentdef {
  p_header = "TIME CORRECTION";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to adjust the observed time.";
  p_help = "This is normally done to correct from local to UTC time.";
} adjust_observed_time;

paramdef int {
  p_default = 0;
  p_descr = "This is added to the observed time.";
  p_help = "See 'adjust_observed_time'.";
} time_correction_secs;

paramdef int {
  p_default = 07;
  p_descr = "This hour of the day is used if missing in the data.";
  p_help = "Applies to RAL_NCDC_CSV data, in which the hour is sometimes missing.";
} hour_if_time_missing;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "spdbp:://localhost::spdb/precip_accum";
  p_descr = "Output URL for precip data.";
  p_help = "See the DIDSS docs for details on URL usage.";
} output_url;

paramdef int {
  p_default = 21600;
  p_descr = "Expire time in seconds for each metar";
  p_help = "This value will be added to the metar time to determine the expire time for the metar";
} expire_seconds;

