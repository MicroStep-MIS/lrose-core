/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for gfsIngest
 *
 */

commentdef {
  p_header = "gfsIngest PARAMETER FILE";
  p_text = "gfsIngest creates MDV from GFS data files.  "
           "Grib data files are described on the Web at\n\n"
           "       http://maps.fsl.noaa.gov/ruc2.tpb.html\n";
}

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

paramdef boolean {
  p_default = {FALSE};
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed";
} debug;

paramdef char* {
  p_default = {"Test"};
  p_descr = "Instance";
  p_help = "Process instance for registration with process mapper";
} instance;

paramdef char* {
  p_default = {"./"};
  p_descr = "Input directory";
  p_help = "Directory which contains input GFS files. Used only "
           "if files are not specified on the command line";
} input_dir;

paramdef char* {
  p_default = {""};
  p_descr = "Input file suffix";
  p_help = "Input file suffixes will be checked against this string. "
           "Used only if files are not specified on the command line";
} input_suffix;

paramdef long {             
  p_min = {60};
  p_default = {10800};
  p_descr = "Max age (in seconds) of input data";
  p_help = "Used only if files are not specified on the command line";
} max_input_data_age;

commentdef {
  p_header = "GFS OUTPUT PARAMETERS";
}

paramdef boolean {
  p_default = {TRUE};
  p_descr = "Write mdv files in a forecast directory structure";
  p_help = "If this is true, mdv files will be written in the "
           "rap forecast directory structure.  Note that if "
           "write_non_forecast is also set to true, two mdv "
           "files will be written";
} write_forecast;

paramdef char* {
  p_default = {"mdvp:://localhost::./mdv"};
  p_descr = "Url for mdv files in forecast structure";
  p_help = "";
} forecast_mdv_url;

paramdef boolean {
  p_default = {FALSE};
  p_descr = "Write mdv files in a non-forecast directory structure";
  p_help = "If this is true, mdv files will be written in the "
           "regular (non-forecast) rap directory structure.  Note "
           "that if write_forecast is also set to true, two mdv "
           "files will be written.  Note also that this option allows "
           "for overwriting files, since the forecast time will be "        
           "used as the data time in this case.  This is a temporary "
           "option to allow for easier display of the data";
} write_non_forecast;

paramdef char* {
  p_default = {"mdvp:://localhost::./mdv"};
  p_descr = "Url for mdv files in non-forecast structure";
  p_help = "";
} non_forecast_mdv_url;

typedef enum { 
  TIMESTAMP_GEN_TIME, TIMESTAMP_FCAST_TIME
} timestamp_t;

paramdef enum timestamp_t {
  p_default = {TIMESTAMP_FCAST_TIME};
  p_descr = "This parameter allows user to timestamp non-forecast mdv files based "
	"on the model's run time or the forecast time.";
  p_help = "The choices are TIMESTAMP_GEN_TIME and TIMESTAMP_FCAST_TIME";
} non_forecast_timestamp;

paramdef string {
  p_default = "This MDV file was created from GFS.";
  p_descr = "Data set info.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_info;

paramdef string {
  p_default = "GFS model output.";
  p_descr = "Data set name.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_name;

paramdef string {
  p_default = "GFS output.";
  p_descr = "Data set source details.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_source;

typedef enum { 
  OUTPUT_PROJ_FLAT, OUTPUT_PROJ_LATLON, OUTPUT_PROJ_LAMBERT_CONF, OUTPUT_PROJ_NATIVE 
} projection_t;

paramdef enum projection_t {
  p_default = {OUTPUT_PROJ_FLAT};
  p_descr = "Projection type for the output mdv files";
  p_help = "";
} mdv_proj_type;

typedef struct {
  double lat;
  double lon;
} output_origin_t;

paramdef struct output_origin_t {
  p_descr = "Origin of output grid.";
  p_help = "Used with OUTPUT_PROJ_FLAT and OUTPUT_PROJ_LAMBERT_CONF.";
  p_default = {40.0, -104.0};
} output_origin;

paramdef float {
  p_descr = "rotation of output grid.";
  p_help = "Used with OUTPUT_PROJ_FLAT only.";
  p_default = {0.0};
} output_rotation;

typedef struct {
  double lat1;
  double lat2;
} output_parallel_t;

paramdef struct output_parallel_t {
  p_descr = "Standard parallels of output projection.";
  p_help = "Used with OUTPUT_PROJ_LAMBERT_CONF only.";
  p_default = {25.0, 25.0};
} output_parallel;

typedef struct {
  int nx;
  int ny;
  int nz;
  double minx;
  double miny;
  double minz;
  double dx;
  double dy;
  double dz;
} output_grid_t;

paramdef int {
  p_descr = "Number of forecasts to be output.";
  p_help = "Dicast saves all forecasts in one file.  This parameter allows "
           "the user to define how many consecutive forecasts will process in the "
           "file.  For example 4 means that files will be written for the 0, 3, 6, "
           "and 9 forecast within the model run. "
           "in degrees; otherwise they are in km";
  p_default = {3};
} num_forecasts;

paramdef struct output_grid_t {
  p_descr = "Output grid parameters.";
  p_help = "The grid params for the output grid.  Note that the units "
           "of minz and dz will depend on the type of output levels selected."
           "  If natural levels are selected, the units will in level numbers, "
           "and the value of dz will be overridden.  Note also that if the "
           "output grid is lat/lon, the units of minx, miny, dx and dy are "
           "in degrees; otherwise they are in km";
  p_default = {151, 113, 40, -3000.0, -3000.0, 0.0, 40.0, 40.0, 1.0};
} output_grid;

typedef enum { UNKNOWN, PRES=1, PRMSL=2, PRESSURE_TENDENCY=3, HGT=7, CLOUD_HEIGHT=8, TOZNE=10,
  TMP=11, POT=13, EQUIVALENT_POTENTIAL_TEMP=14, MAX_TEMP=15, MIN_TEMP=16,
  DEW_POINT_TEMPERATURE=17, DEW_POINT_DEPRESSION=18, VISIBILITY=20, GPA=27,
  UGRD=33, VGRD=34, VVEL=39, ABSV=41, SPFH=51,
  RH=52, HUMIDITY_MIXING_RATIO=53, PWAT=54,
  PRECIPITATION_RATE=59, TOTAL_PRECIPITATION=61, LARGE_SCALE_PRECIPITATION=62,
  CONVECTIVE_PRECIPITATION=63, WEASD=65, SNOW_DEPTH=66, TCDC=71,
  LOW_CLOUD_COVER=73, MED_CLOUD_COVER=74, HIGH_CLOUD_COVER=75, CWAT=76,
  BEST_LIFTED_INDEX=77, LAND=81, ALBEDO=84, SOIL_TEMPERATURE=85, SOIL_MOISTURE_CONTENT=86,
  WATER_RUNOFF=90,
  SNOW_MELT=99, SHORTWAVE_RAD_AT_SURFACE=111, LONGWAVE_RAD_AT_SURFACE=112,
  ICEC=91, SHORTWAVE_RAD_AT_TOP=113, LONGWAVE_RAD_AT_TOP=114, LATENT_HEAT_FLUX=121,
  SENSIBLE_HEAT_FLUX=122, ZONAL_MOMENTUM_FLUX=124,
  MEAN_SEA_LEVEL_PRESS_SAR=128, MEAN_SEA_LEVEL_PRESS_MAPS=129,
  LFTX=131, FOUR_LFTX=132, HORZ_MOISTURE_CONVERGENCE=135, VWSH=136, CATEGORICAL_RAIN=140,
  CATEGORICAL_FREEZING_RAIN=141, CATEGORICAL_ICE_PELLETS=142, CATEGORICAL_SNOW=143,
  SOILW=144, POTENTIAL_EVAP_RATE=145, CLD_WORK_FUNC=146, ZONAL_GRAVITY_WAVE_STRESS=147,
  POTENTIAL_VORTICITY=149, CLWMR=153,
  O3MR=154, GND_HEAT_FLUX=155, CIN=156, CAPE=157,
  TURBULENT_KINETIC_ENERGY=158, RAIN_WATER_MIXING_RATIO=170, SNOW_MIXING_RATIO=171,
  MOMENTUM_FLUX=172, ICE_MIXING_RATIO=178, GRAUPEL_MIXING_RATIO=179,
  //WATER_VAPOR_MIXING_RATIO=185,
  TURB_SIGMET_AIRMET=185, ICING_SIGMET_AIRMET=186, LIGHTNING=187,
  RATE_WATER_CANOPY2GROUND=188, VIRTUAL_POTENTIAL_TEMP=189, STORM_RELATIVE_HELICITY=190,
  U_STORM_MOTION=196, V_STORM_MOTION=197, NUM_CONCEN_ICE_PARTICLES=198,
  DIRECT_EVAPORATION_BARE_SOIL=199, DOWN_SHORTWAVE_RAD_FLUX=204,
  DOWN_LONGWAVE_RAD_FLUX=205, UP_SHORTWAVE_RAD_FLUX=211, UP_LONGWAVE_RAD_FLUX=212, CONV_PRECP_RATE=214,
  HPBL=221, FIVE_WAVH=222, PLANT_CANOPY_SURFACE_WATER=223, SOIL_TYPE=224, VEGETATION_TYPE=225,
  SNOW_PHASE_CHANGE_HEAT_FLUX=229, FIVE_WAVA=230, BASEFLOW_GRDWATER_RUNOFF=234,
  STORM_SURFACE_RUNOFF=235, SNOW_TEMPERATURE=239, DRAG_COEFFICIENT=253, GUST_WIND_SPEED=255
} param_id_t;

typedef struct {
  param_id_t param_id;
  int level_id;
} out_field_t;

paramdef boolean {
  p_default = {TRUE};
  p_descr = "process all fields";
  p_help = "If set, all fields will be processed, some programming may need to be added"
           "if fields and or level types aren't defined in the out_field list. ";
} process_everything;

paramdef struct out_field_t {
  p_descr = "List of output fields, which are descibed by the field parameter, vertical level type. \n";
  p_help = "To determine the output fields and level, use the command line argument -printSummary -file [filename]\n"
  "No Mdv output is created, the user will simply be given a list of fields and associated levels contained"
  "in the GRIB files.\n"
  "For a detailed description of the GRIB fields and types of vertical levels see the listings "
  " at http://www.wmo.ch/web/www/WDM/Guides/Guide-binary-2.html."
  "Select the entries that represent fields of interest to the project.  Set process_everything to"
  "FALSE and the output field list will be used."
  "Default behavior is to process everything";
} output_fields[];
