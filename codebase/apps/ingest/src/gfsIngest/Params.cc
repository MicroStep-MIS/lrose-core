// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program gfsIngest
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("gfsIngest PARAMETER FILE");
    tt->comment_text = tdrpStrDup("gfsIngest creates MDV from GFS data files.  Grib data files are described on the Web at\n\n       http://maps.fsl.noaa.gov/ruc2.tpb.html\n");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODES OF OPERATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Instance");
    tt->help = tdrpStrDup("Process instance for registration with process mapper");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory");
    tt->help = tdrpStrDup("Directory which contains input GFS files. Used only if files are not specified on the command line");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./");
    tt++;
    
    // Parameter 'input_suffix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_suffix");
    tt->descr = tdrpStrDup("Input file suffix");
    tt->help = tdrpStrDup("Input file suffixes will be checked against this string. Used only if files are not specified on the command line");
    tt->val_offset = (char *) &input_suffix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_input_data_age'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_input_data_age");
    tt->descr = tdrpStrDup("Max age (in seconds) of input data");
    tt->help = tdrpStrDup("Used only if files are not specified on the command line");
    tt->val_offset = (char *) &max_input_data_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 60;
    tt->single_val.l = 10800;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("GFS OUTPUT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_forecast'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_forecast");
    tt->descr = tdrpStrDup("Write mdv files in a forecast directory structure");
    tt->help = tdrpStrDup("If this is true, mdv files will be written in the rap forecast directory structure.  Note that if write_non_forecast is also set to true, two mdv files will be written");
    tt->val_offset = (char *) &write_forecast - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'forecast_mdv_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("forecast_mdv_url");
    tt->descr = tdrpStrDup("Url for mdv files in forecast structure");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &forecast_mdv_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::./mdv");
    tt++;
    
    // Parameter 'write_non_forecast'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_non_forecast");
    tt->descr = tdrpStrDup("Write mdv files in a non-forecast directory structure");
    tt->help = tdrpStrDup("If this is true, mdv files will be written in the regular (non-forecast) rap directory structure.  Note that if write_forecast is also set to true, two mdv files will be written.  Note also that this option allows for overwriting files, since the forecast time will be used as the data time in this case.  This is a temporary option to allow for easier display of the data");
    tt->val_offset = (char *) &write_non_forecast - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'non_forecast_mdv_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("non_forecast_mdv_url");
    tt->descr = tdrpStrDup("Url for mdv files in non-forecast structure");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &non_forecast_mdv_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::./mdv");
    tt++;
    
    // Parameter 'non_forecast_timestamp'
    // ctype is '_timestamp_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("non_forecast_timestamp");
    tt->descr = tdrpStrDup("This parameter allows user to timestamp non-forecast mdv files based on the model's run time or the forecast time.");
    tt->help = tdrpStrDup("The choices are TIMESTAMP_GEN_TIME and TIMESTAMP_FCAST_TIME");
    tt->val_offset = (char *) &non_forecast_timestamp - &_start_;
    tt->enum_def.name = tdrpStrDup("timestamp_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIMESTAMP_GEN_TIME");
      tt->enum_def.fields[0].val = TIMESTAMP_GEN_TIME;
      tt->enum_def.fields[1].name = tdrpStrDup("TIMESTAMP_FCAST_TIME");
      tt->enum_def.fields[1].val = TIMESTAMP_FCAST_TIME;
    tt->single_val.e = TIMESTAMP_FCAST_TIME;
    tt++;
    
    // Parameter 'data_set_info'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_info");
    tt->descr = tdrpStrDup("Data set info.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_info - &_start_;
    tt->single_val.s = tdrpStrDup("This MDV file was created from GFS.");
    tt++;
    
    // Parameter 'data_set_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_name");
    tt->descr = tdrpStrDup("Data set name.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_name - &_start_;
    tt->single_val.s = tdrpStrDup("GFS model output.");
    tt++;
    
    // Parameter 'data_set_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_source");
    tt->descr = tdrpStrDup("Data set source details.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_source - &_start_;
    tt->single_val.s = tdrpStrDup("GFS output.");
    tt++;
    
    // Parameter 'mdv_proj_type'
    // ctype is '_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mdv_proj_type");
    tt->descr = tdrpStrDup("Projection type for the output mdv files");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &mdv_proj_type - &_start_;
    tt->enum_def.name = tdrpStrDup("projection_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_PROJ_FLAT");
      tt->enum_def.fields[0].val = OUTPUT_PROJ_FLAT;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_PROJ_LATLON");
      tt->enum_def.fields[1].val = OUTPUT_PROJ_LATLON;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_PROJ_LAMBERT_CONF");
      tt->enum_def.fields[2].val = OUTPUT_PROJ_LAMBERT_CONF;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_PROJ_NATIVE");
      tt->enum_def.fields[3].val = OUTPUT_PROJ_NATIVE;
    tt->single_val.e = OUTPUT_PROJ_FLAT;
    tt++;
    
    // Parameter 'output_origin'
    // ctype is '_output_origin_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_origin");
    tt->descr = tdrpStrDup("Origin of output grid.");
    tt->help = tdrpStrDup("Used with OUTPUT_PROJ_FLAT and OUTPUT_PROJ_LAMBERT_CONF.");
    tt->val_offset = (char *) &output_origin - &_start_;
    tt->struct_def.name = tdrpStrDup("output_origin_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_origin.lat - (char *) &output_origin;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_origin.lon - (char *) &output_origin;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40;
      tt->struct_vals[1].d = -104;
    tt++;
    
    // Parameter 'output_rotation'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("output_rotation");
    tt->descr = tdrpStrDup("rotation of output grid.");
    tt->help = tdrpStrDup("Used with OUTPUT_PROJ_FLAT only.");
    tt->val_offset = (char *) &output_rotation - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'output_parallel'
    // ctype is '_output_parallel_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_parallel");
    tt->descr = tdrpStrDup("Standard parallels of output projection.");
    tt->help = tdrpStrDup("Used with OUTPUT_PROJ_LAMBERT_CONF only.");
    tt->val_offset = (char *) &output_parallel - &_start_;
    tt->struct_def.name = tdrpStrDup("output_parallel_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat1");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_parallel.lat1 - (char *) &output_parallel;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lat2");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_parallel.lat2 - (char *) &output_parallel;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 25;
      tt->struct_vals[1].d = 25;
    tt++;
    
    // Parameter 'num_forecasts'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("num_forecasts");
    tt->descr = tdrpStrDup("Number of forecasts to be output.");
    tt->help = tdrpStrDup("Dicast saves all forecasts in one file.  This parameter allows the user to define how many consecutive forecasts will process in the file.  For example 4 means that files will be written for the 0, 3, 6, and 9 forecast within the model run. in degrees; otherwise they are in km");
    tt->val_offset = (char *) &num_forecasts - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'output_grid'
    // ctype is '_output_grid_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_grid");
    tt->descr = tdrpStrDup("Output grid parameters.");
    tt->help = tdrpStrDup("The grid params for the output grid.  Note that the units of minz and dz will depend on the type of output levels selected.  If natural levels are selected, the units will in level numbers, and the value of dz will be overridden.  Note also that if the output grid is lat/lon, the units of minx, miny, dx and dy are in degrees; otherwise they are in km");
    tt->val_offset = (char *) &output_grid - &_start_;
    tt->struct_def.name = tdrpStrDup("output_grid_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_grid.nx - (char *) &output_grid;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_grid.ny - (char *) &output_grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("nz");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &output_grid.nz - (char *) &output_grid;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("minx");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &output_grid.minx - (char *) &output_grid;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("miny");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &output_grid.miny - (char *) &output_grid;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("minz");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &output_grid.minz - (char *) &output_grid;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("dx");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &output_grid.dx - (char *) &output_grid;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("dy");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &output_grid.dy - (char *) &output_grid;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("dz");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &output_grid.dz - (char *) &output_grid;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 151;
      tt->struct_vals[1].i = 113;
      tt->struct_vals[2].i = 40;
      tt->struct_vals[3].d = -3000;
      tt->struct_vals[4].d = -3000;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 40;
      tt->struct_vals[7].d = 40;
      tt->struct_vals[8].d = 1;
    tt++;
    
    // Parameter 'process_everything'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_everything");
    tt->descr = tdrpStrDup("process all fields");
    tt->help = tdrpStrDup("If set, all fields will be processed, some programming may need to be addedif fields and or level types aren't defined in the out_field list. ");
    tt->val_offset = (char *) &process_everything - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_out_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("List of output fields, which are descibed by the field parameter, vertical level type. \n");
    tt->help = tdrpStrDup("To determine the output fields and level, use the command line argument -printSummary -file [filename]\nNo Mdv output is created, the user will simply be given a list of fields and associated levels containedin the GRIB files.\nFor a detailed description of the GRIB fields and types of vertical levels see the listings  at http://www.wmo.ch/web/www/WDM/Guides/Guide-binary-2.html.Select the entries that represent fields of interest to the project.  Set process_everything toFALSE and the output field list will be used.Default behavior is to process everything");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(out_field_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("out_field_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("param_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("param_id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->param_id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("param_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 103;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("UNKNOWN");
        tt->struct_def.fields[0].enum_def.fields[0].val = UNKNOWN;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("PRES");
        tt->struct_def.fields[0].enum_def.fields[1].val = PRES;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("PRMSL");
        tt->struct_def.fields[0].enum_def.fields[2].val = PRMSL;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("PRESSURE_TENDENCY");
        tt->struct_def.fields[0].enum_def.fields[3].val = PRESSURE_TENDENCY;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("HGT");
        tt->struct_def.fields[0].enum_def.fields[4].val = HGT;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("CLOUD_HEIGHT");
        tt->struct_def.fields[0].enum_def.fields[5].val = CLOUD_HEIGHT;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("TOZNE");
        tt->struct_def.fields[0].enum_def.fields[6].val = TOZNE;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("TMP");
        tt->struct_def.fields[0].enum_def.fields[7].val = TMP;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("POT");
        tt->struct_def.fields[0].enum_def.fields[8].val = POT;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("EQUIVALENT_POTENTIAL_TEMP");
        tt->struct_def.fields[0].enum_def.fields[9].val = EQUIVALENT_POTENTIAL_TEMP;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("MAX_TEMP");
        tt->struct_def.fields[0].enum_def.fields[10].val = MAX_TEMP;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("MIN_TEMP");
        tt->struct_def.fields[0].enum_def.fields[11].val = MIN_TEMP;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("DEW_POINT_TEMPERATURE");
        tt->struct_def.fields[0].enum_def.fields[12].val = DEW_POINT_TEMPERATURE;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("DEW_POINT_DEPRESSION");
        tt->struct_def.fields[0].enum_def.fields[13].val = DEW_POINT_DEPRESSION;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("VISIBILITY");
        tt->struct_def.fields[0].enum_def.fields[14].val = VISIBILITY;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("GPA");
        tt->struct_def.fields[0].enum_def.fields[15].val = GPA;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("UGRD");
        tt->struct_def.fields[0].enum_def.fields[16].val = UGRD;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("VGRD");
        tt->struct_def.fields[0].enum_def.fields[17].val = VGRD;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("VVEL");
        tt->struct_def.fields[0].enum_def.fields[18].val = VVEL;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("ABSV");
        tt->struct_def.fields[0].enum_def.fields[19].val = ABSV;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("SPFH");
        tt->struct_def.fields[0].enum_def.fields[20].val = SPFH;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("RH");
        tt->struct_def.fields[0].enum_def.fields[21].val = RH;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("HUMIDITY_MIXING_RATIO");
        tt->struct_def.fields[0].enum_def.fields[22].val = HUMIDITY_MIXING_RATIO;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("PWAT");
        tt->struct_def.fields[0].enum_def.fields[23].val = PWAT;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("PRECIPITATION_RATE");
        tt->struct_def.fields[0].enum_def.fields[24].val = PRECIPITATION_RATE;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("TOTAL_PRECIPITATION");
        tt->struct_def.fields[0].enum_def.fields[25].val = TOTAL_PRECIPITATION;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("LARGE_SCALE_PRECIPITATION");
        tt->struct_def.fields[0].enum_def.fields[26].val = LARGE_SCALE_PRECIPITATION;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("CONVECTIVE_PRECIPITATION");
        tt->struct_def.fields[0].enum_def.fields[27].val = CONVECTIVE_PRECIPITATION;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("WEASD");
        tt->struct_def.fields[0].enum_def.fields[28].val = WEASD;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("SNOW_DEPTH");
        tt->struct_def.fields[0].enum_def.fields[29].val = SNOW_DEPTH;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("TCDC");
        tt->struct_def.fields[0].enum_def.fields[30].val = TCDC;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("LOW_CLOUD_COVER");
        tt->struct_def.fields[0].enum_def.fields[31].val = LOW_CLOUD_COVER;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("MED_CLOUD_COVER");
        tt->struct_def.fields[0].enum_def.fields[32].val = MED_CLOUD_COVER;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("HIGH_CLOUD_COVER");
        tt->struct_def.fields[0].enum_def.fields[33].val = HIGH_CLOUD_COVER;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("CWAT");
        tt->struct_def.fields[0].enum_def.fields[34].val = CWAT;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("BEST_LIFTED_INDEX");
        tt->struct_def.fields[0].enum_def.fields[35].val = BEST_LIFTED_INDEX;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("LAND");
        tt->struct_def.fields[0].enum_def.fields[36].val = LAND;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("ALBEDO");
        tt->struct_def.fields[0].enum_def.fields[37].val = ALBEDO;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("SOIL_TEMPERATURE");
        tt->struct_def.fields[0].enum_def.fields[38].val = SOIL_TEMPERATURE;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("SOIL_MOISTURE_CONTENT");
        tt->struct_def.fields[0].enum_def.fields[39].val = SOIL_MOISTURE_CONTENT;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("WATER_RUNOFF");
        tt->struct_def.fields[0].enum_def.fields[40].val = WATER_RUNOFF;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("SNOW_MELT");
        tt->struct_def.fields[0].enum_def.fields[41].val = SNOW_MELT;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("SHORTWAVE_RAD_AT_SURFACE");
        tt->struct_def.fields[0].enum_def.fields[42].val = SHORTWAVE_RAD_AT_SURFACE;
        tt->struct_def.fields[0].enum_def.fields[43].name = tdrpStrDup("LONGWAVE_RAD_AT_SURFACE");
        tt->struct_def.fields[0].enum_def.fields[43].val = LONGWAVE_RAD_AT_SURFACE;
        tt->struct_def.fields[0].enum_def.fields[44].name = tdrpStrDup("ICEC");
        tt->struct_def.fields[0].enum_def.fields[44].val = ICEC;
        tt->struct_def.fields[0].enum_def.fields[45].name = tdrpStrDup("SHORTWAVE_RAD_AT_TOP");
        tt->struct_def.fields[0].enum_def.fields[45].val = SHORTWAVE_RAD_AT_TOP;
        tt->struct_def.fields[0].enum_def.fields[46].name = tdrpStrDup("LONGWAVE_RAD_AT_TOP");
        tt->struct_def.fields[0].enum_def.fields[46].val = LONGWAVE_RAD_AT_TOP;
        tt->struct_def.fields[0].enum_def.fields[47].name = tdrpStrDup("LATENT_HEAT_FLUX");
        tt->struct_def.fields[0].enum_def.fields[47].val = LATENT_HEAT_FLUX;
        tt->struct_def.fields[0].enum_def.fields[48].name = tdrpStrDup("SENSIBLE_HEAT_FLUX");
        tt->struct_def.fields[0].enum_def.fields[48].val = SENSIBLE_HEAT_FLUX;
        tt->struct_def.fields[0].enum_def.fields[49].name = tdrpStrDup("ZONAL_MOMENTUM_FLUX");
        tt->struct_def.fields[0].enum_def.fields[49].val = ZONAL_MOMENTUM_FLUX;
        tt->struct_def.fields[0].enum_def.fields[50].name = tdrpStrDup("MEAN_SEA_LEVEL_PRESS_SAR");
        tt->struct_def.fields[0].enum_def.fields[50].val = MEAN_SEA_LEVEL_PRESS_SAR;
        tt->struct_def.fields[0].enum_def.fields[51].name = tdrpStrDup("MEAN_SEA_LEVEL_PRESS_MAPS");
        tt->struct_def.fields[0].enum_def.fields[51].val = MEAN_SEA_LEVEL_PRESS_MAPS;
        tt->struct_def.fields[0].enum_def.fields[52].name = tdrpStrDup("LFTX");
        tt->struct_def.fields[0].enum_def.fields[52].val = LFTX;
        tt->struct_def.fields[0].enum_def.fields[53].name = tdrpStrDup("FOUR_LFTX");
        tt->struct_def.fields[0].enum_def.fields[53].val = FOUR_LFTX;
        tt->struct_def.fields[0].enum_def.fields[54].name = tdrpStrDup("HORZ_MOISTURE_CONVERGENCE");
        tt->struct_def.fields[0].enum_def.fields[54].val = HORZ_MOISTURE_CONVERGENCE;
        tt->struct_def.fields[0].enum_def.fields[55].name = tdrpStrDup("VWSH");
        tt->struct_def.fields[0].enum_def.fields[55].val = VWSH;
        tt->struct_def.fields[0].enum_def.fields[56].name = tdrpStrDup("CATEGORICAL_RAIN");
        tt->struct_def.fields[0].enum_def.fields[56].val = CATEGORICAL_RAIN;
        tt->struct_def.fields[0].enum_def.fields[57].name = tdrpStrDup("CATEGORICAL_FREEZING_RAIN");
        tt->struct_def.fields[0].enum_def.fields[57].val = CATEGORICAL_FREEZING_RAIN;
        tt->struct_def.fields[0].enum_def.fields[58].name = tdrpStrDup("CATEGORICAL_ICE_PELLETS");
        tt->struct_def.fields[0].enum_def.fields[58].val = CATEGORICAL_ICE_PELLETS;
        tt->struct_def.fields[0].enum_def.fields[59].name = tdrpStrDup("CATEGORICAL_SNOW");
        tt->struct_def.fields[0].enum_def.fields[59].val = CATEGORICAL_SNOW;
        tt->struct_def.fields[0].enum_def.fields[60].name = tdrpStrDup("SOILW");
        tt->struct_def.fields[0].enum_def.fields[60].val = SOILW;
        tt->struct_def.fields[0].enum_def.fields[61].name = tdrpStrDup("POTENTIAL_EVAP_RATE");
        tt->struct_def.fields[0].enum_def.fields[61].val = POTENTIAL_EVAP_RATE;
        tt->struct_def.fields[0].enum_def.fields[62].name = tdrpStrDup("CLD_WORK_FUNC");
        tt->struct_def.fields[0].enum_def.fields[62].val = CLD_WORK_FUNC;
        tt->struct_def.fields[0].enum_def.fields[63].name = tdrpStrDup("ZONAL_GRAVITY_WAVE_STRESS");
        tt->struct_def.fields[0].enum_def.fields[63].val = ZONAL_GRAVITY_WAVE_STRESS;
        tt->struct_def.fields[0].enum_def.fields[64].name = tdrpStrDup("POTENTIAL_VORTICITY");
        tt->struct_def.fields[0].enum_def.fields[64].val = POTENTIAL_VORTICITY;
        tt->struct_def.fields[0].enum_def.fields[65].name = tdrpStrDup("CLWMR");
        tt->struct_def.fields[0].enum_def.fields[65].val = CLWMR;
        tt->struct_def.fields[0].enum_def.fields[66].name = tdrpStrDup("O3MR");
        tt->struct_def.fields[0].enum_def.fields[66].val = O3MR;
        tt->struct_def.fields[0].enum_def.fields[67].name = tdrpStrDup("GND_HEAT_FLUX");
        tt->struct_def.fields[0].enum_def.fields[67].val = GND_HEAT_FLUX;
        tt->struct_def.fields[0].enum_def.fields[68].name = tdrpStrDup("CIN");
        tt->struct_def.fields[0].enum_def.fields[68].val = CIN;
        tt->struct_def.fields[0].enum_def.fields[69].name = tdrpStrDup("CAPE");
        tt->struct_def.fields[0].enum_def.fields[69].val = CAPE;
        tt->struct_def.fields[0].enum_def.fields[70].name = tdrpStrDup("TURBULENT_KINETIC_ENERGY");
        tt->struct_def.fields[0].enum_def.fields[70].val = TURBULENT_KINETIC_ENERGY;
        tt->struct_def.fields[0].enum_def.fields[71].name = tdrpStrDup("RAIN_WATER_MIXING_RATIO");
        tt->struct_def.fields[0].enum_def.fields[71].val = RAIN_WATER_MIXING_RATIO;
        tt->struct_def.fields[0].enum_def.fields[72].name = tdrpStrDup("SNOW_MIXING_RATIO");
        tt->struct_def.fields[0].enum_def.fields[72].val = SNOW_MIXING_RATIO;
        tt->struct_def.fields[0].enum_def.fields[73].name = tdrpStrDup("MOMENTUM_FLUX");
        tt->struct_def.fields[0].enum_def.fields[73].val = MOMENTUM_FLUX;
        tt->struct_def.fields[0].enum_def.fields[74].name = tdrpStrDup("ICE_MIXING_RATIO");
        tt->struct_def.fields[0].enum_def.fields[74].val = ICE_MIXING_RATIO;
        tt->struct_def.fields[0].enum_def.fields[75].name = tdrpStrDup("GRAUPEL_MIXING_RATIO");
        tt->struct_def.fields[0].enum_def.fields[75].val = GRAUPEL_MIXING_RATIO;
        tt->struct_def.fields[0].enum_def.fields[76].name = tdrpStrDup("TURB_SIGMET_AIRMET");
        tt->struct_def.fields[0].enum_def.fields[76].val = TURB_SIGMET_AIRMET;
        tt->struct_def.fields[0].enum_def.fields[77].name = tdrpStrDup("ICING_SIGMET_AIRMET");
        tt->struct_def.fields[0].enum_def.fields[77].val = ICING_SIGMET_AIRMET;
        tt->struct_def.fields[0].enum_def.fields[78].name = tdrpStrDup("LIGHTNING");
        tt->struct_def.fields[0].enum_def.fields[78].val = LIGHTNING;
        tt->struct_def.fields[0].enum_def.fields[79].name = tdrpStrDup("RATE_WATER_CANOPY2GROUND");
        tt->struct_def.fields[0].enum_def.fields[79].val = RATE_WATER_CANOPY2GROUND;
        tt->struct_def.fields[0].enum_def.fields[80].name = tdrpStrDup("VIRTUAL_POTENTIAL_TEMP");
        tt->struct_def.fields[0].enum_def.fields[80].val = VIRTUAL_POTENTIAL_TEMP;
        tt->struct_def.fields[0].enum_def.fields[81].name = tdrpStrDup("STORM_RELATIVE_HELICITY");
        tt->struct_def.fields[0].enum_def.fields[81].val = STORM_RELATIVE_HELICITY;
        tt->struct_def.fields[0].enum_def.fields[82].name = tdrpStrDup("U_STORM_MOTION");
        tt->struct_def.fields[0].enum_def.fields[82].val = U_STORM_MOTION;
        tt->struct_def.fields[0].enum_def.fields[83].name = tdrpStrDup("V_STORM_MOTION");
        tt->struct_def.fields[0].enum_def.fields[83].val = V_STORM_MOTION;
        tt->struct_def.fields[0].enum_def.fields[84].name = tdrpStrDup("NUM_CONCEN_ICE_PARTICLES");
        tt->struct_def.fields[0].enum_def.fields[84].val = NUM_CONCEN_ICE_PARTICLES;
        tt->struct_def.fields[0].enum_def.fields[85].name = tdrpStrDup("DIRECT_EVAPORATION_BARE_SOIL");
        tt->struct_def.fields[0].enum_def.fields[85].val = DIRECT_EVAPORATION_BARE_SOIL;
        tt->struct_def.fields[0].enum_def.fields[86].name = tdrpStrDup("DOWN_SHORTWAVE_RAD_FLUX");
        tt->struct_def.fields[0].enum_def.fields[86].val = DOWN_SHORTWAVE_RAD_FLUX;
        tt->struct_def.fields[0].enum_def.fields[87].name = tdrpStrDup("DOWN_LONGWAVE_RAD_FLUX");
        tt->struct_def.fields[0].enum_def.fields[87].val = DOWN_LONGWAVE_RAD_FLUX;
        tt->struct_def.fields[0].enum_def.fields[88].name = tdrpStrDup("UP_SHORTWAVE_RAD_FLUX");
        tt->struct_def.fields[0].enum_def.fields[88].val = UP_SHORTWAVE_RAD_FLUX;
        tt->struct_def.fields[0].enum_def.fields[89].name = tdrpStrDup("UP_LONGWAVE_RAD_FLUX");
        tt->struct_def.fields[0].enum_def.fields[89].val = UP_LONGWAVE_RAD_FLUX;
        tt->struct_def.fields[0].enum_def.fields[90].name = tdrpStrDup("CONV_PRECP_RATE");
        tt->struct_def.fields[0].enum_def.fields[90].val = CONV_PRECP_RATE;
        tt->struct_def.fields[0].enum_def.fields[91].name = tdrpStrDup("HPBL");
        tt->struct_def.fields[0].enum_def.fields[91].val = HPBL;
        tt->struct_def.fields[0].enum_def.fields[92].name = tdrpStrDup("FIVE_WAVH");
        tt->struct_def.fields[0].enum_def.fields[92].val = FIVE_WAVH;
        tt->struct_def.fields[0].enum_def.fields[93].name = tdrpStrDup("PLANT_CANOPY_SURFACE_WATER");
        tt->struct_def.fields[0].enum_def.fields[93].val = PLANT_CANOPY_SURFACE_WATER;
        tt->struct_def.fields[0].enum_def.fields[94].name = tdrpStrDup("SOIL_TYPE");
        tt->struct_def.fields[0].enum_def.fields[94].val = SOIL_TYPE;
        tt->struct_def.fields[0].enum_def.fields[95].name = tdrpStrDup("VEGETATION_TYPE");
        tt->struct_def.fields[0].enum_def.fields[95].val = VEGETATION_TYPE;
        tt->struct_def.fields[0].enum_def.fields[96].name = tdrpStrDup("SNOW_PHASE_CHANGE_HEAT_FLUX");
        tt->struct_def.fields[0].enum_def.fields[96].val = SNOW_PHASE_CHANGE_HEAT_FLUX;
        tt->struct_def.fields[0].enum_def.fields[97].name = tdrpStrDup("FIVE_WAVA");
        tt->struct_def.fields[0].enum_def.fields[97].val = FIVE_WAVA;
        tt->struct_def.fields[0].enum_def.fields[98].name = tdrpStrDup("BASEFLOW_GRDWATER_RUNOFF");
        tt->struct_def.fields[0].enum_def.fields[98].val = BASEFLOW_GRDWATER_RUNOFF;
        tt->struct_def.fields[0].enum_def.fields[99].name = tdrpStrDup("STORM_SURFACE_RUNOFF");
        tt->struct_def.fields[0].enum_def.fields[99].val = STORM_SURFACE_RUNOFF;
        tt->struct_def.fields[0].enum_def.fields[100].name = tdrpStrDup("SNOW_TEMPERATURE");
        tt->struct_def.fields[0].enum_def.fields[100].val = SNOW_TEMPERATURE;
        tt->struct_def.fields[0].enum_def.fields[101].name = tdrpStrDup("DRAG_COEFFICIENT");
        tt->struct_def.fields[0].enum_def.fields[101].val = DRAG_COEFFICIENT;
        tt->struct_def.fields[0].enum_def.fields[102].name = tdrpStrDup("GUST_WIND_SPEED");
        tt->struct_def.fields[0].enum_def.fields[102].val = GUST_WIND_SPEED;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("level_id");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->level_id - (char *) _output_fields;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = UNKNOWN;
      tt->struct_vals[1].i = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
