/**********************************************************************
 * TDRP params for Aws2Spdb
 **********************************************************************/

//======================================================================
//
// Aws2Spdb reads AWS records from ASCII files and converts them to 
//   station_report_t format and writes them to an SPDB data base.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// PROGRAM MODES OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In this 
//   mode it is optional to watch for a latest_data_info file. In ARCHIVE 
//   mode, it processes all of the data files in the input directory 
//   between the start and end times set on the command line. In FILELIST 
//   mode, it processes all of the files in the list specified on the 
//   command line. In FILELIST mode paths must be fully qualified with 
//   respect to the date and time - so if each date has a separate 
//   subdirectory the date part of the path must be included.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Input directory.
// Directory where input data files can be found.
// Type: string
//

input_dir = "./";

///////////// latest_data_info_avail //////////////////
//
// Set to true if there is a latest_data_info file available in the 
//   input directory.
// REALTIME mode only.
// Type: boolean
//

latest_data_info_avail = TRUE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 3600;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL for decoded metars.
// See the DIDSS docs for details on URL usage.
// Type: string
//

output_url = "spdbp:://localhost::$(PROJECT)/spdb/aws";

///////////// st_location_path ////////////////////////
//
// Path to station location file.
// Since the METAR reports do not contain lat/lon information, we must 
//   determine this from a separate file. The station location file should 
//   contain a four letter station identification followed by the latitude 
//   and longitude for each station to be processed. Stations not in this 
//   file will be ignored.
// Type: string
//

st_location_path = "./station_location.txt";

///////////// expire_seconds //////////////////////////
//
// Expire time in seconds for each metar.
// This value will be added to the metar time to determine the expire 
//   time for the metar.
// Type: int
//

expire_seconds = 7200;

