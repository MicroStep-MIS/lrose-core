/**********************************************************************
 * TDRP params for SigmetRaw2Dsr
 **********************************************************************/

//======================================================================
//
// SigmetRaw2Dsr reads volume files in raw SIGMET format, and reformats 
//   the contents into a DsRadar FMQ.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the list of file names specified on the 
//   command line. In SIMULATE mode, the program moves repeatedly through 
//   the file list, creating output files with times set to now. This is 
//   useful for simulating an operational radar.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     SIMULATE
//

mode = ARCHIVE;

//======================================================================
//
// FILE DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input data files.
// This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, 
//   the file paths are specified on the command line.
// Type: string
//

input_dir = "$(HOME)/data/sigmet";

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 360;

//======================================================================
//
// NYQUIST VELOCITY.
//
// This section allows you to override the nyquist velocity computed 
//   from the PRF and wavelength.
//
//======================================================================
 
///////////// override_nyquist_velocity ///////////////
//
// Option to set the nyquist velocity.
// The actual nyquist velocity is not available from the raw data. 
//   Therefore we need to compute it from the PRF and wavelength. However, 
//   the computed value may be incorrect if dual-prt operation was used. 
//   Therefore, you may wish to override the nyquist.
// Type: boolean
//

override_nyquist_velocity = FALSE;

///////////// nyquist_velocity ////////////////////////
//
// Nyquist velocity (m/s).
// See 'override_nyquist_velocity'.
// Type: double
//

nyquist_velocity = 25;

//======================================================================
//
// TIME CORRECTION.
//
// This section allows you to correct the time, in case the realtime 
//   clock was incorrect, or the timezone was not UTC.
//
//======================================================================
 
///////////// correct_radar_time //////////////////////
//
// Option to adjust the time in the files.
// See 'time_correction_secs'.
// Type: boolean
//

correct_radar_time = FALSE;

///////////// time_correction_secs ////////////////////
//
// Time correction in seconds.
// This is added to the time in the files, to correct as required.
// Type: int
//

time_correction_secs = 3600;

//======================================================================
//
// OUTPUT FIELDS.
//
// Only the following fields will included in the output. If the field 
//   is not in the input file, it will be left out.
//
//======================================================================
 
//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_fmq_url //////////////////////////
//
// Output URL for DsRadar data via FMQ.
// Type: string
//

output_fmq_url = "/tmp/fmq/sigmet_raw";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer. Some of this buffer 
//   will be used for control bytes (12 bytes per message).
// Type: int
//

output_fmq_size = 100000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: int
//

output_fmq_nslots = 100;

///////////// output_fmq_compress /////////////////////
//
// FMQ compression option.
// If TRUE FMQ messages are compressed.
// Type: boolean
//

output_fmq_compress = FALSE;

///////////// beam_wait_msecs /////////////////////////
//
// Wait per beam (milli-secs).
// Type: int
//

beam_wait_msecs = 0;

///////////// write_blocking //////////////////////////
//
// Option to set up the FMQ as blocking.
// If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ 
//   becomes full, Test2Dsr will then block until there is space for more 
//   data.
// Type: boolean
//

// write_blocking = TRUE;
write_blocking = FALSE;

