/**********************************************************************
 * TDRP params for NidsRaster2Mdv
 **********************************************************************/

//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//   DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
//
//

debug = DEBUG_VERBOSE;
debug = DEBUG_OFF;

///////////// malloc_debug_level //////////////////////
//
// Malloc debug level.
// 0 - none, 1 - corruption checking, 2 - records all malloc blocks and 
//   checks, 3 - printout of all mallocs etc.
// Minimum val: 0
// Maximum val: 3
// Type: int
//

malloc_debug_level = 0;

///////////// no_threads //////////////////////////////
//
// No threads option. Forces single-threaded operation.
// For debugging purposes. Note that the program will handle only a 
//   single data directory in single-threaded operation.
// Type: boolean
//

no_threads = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// PROGRAM MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In realtime mode, storm_ident waits for a new input file. In archive 
//   mode, it moves through the files between the times set by the user.
//
// Type: enum
// Options:
//   ARCHIVE, REALTIME
//
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// realtime_data_sets //////////////////////
//
// Array of data sets to be processed.
// The program starts a thread for each input directory. Incoming data 
//   is processed and written to the individual radar subdirectory output 
//   directory.
//
// Type: struct
//   typedef struct {
//      string input_dir;
//      string radar_name;
//      boolean is_dbz;
//   }
//
// 1D array - variable length - 21 elements.
//

// vi macro to change line:
// 9wdwP5wP3~3x0j

realtime_data_sets = {
  { "/nids/raw/nids/ABR/VIL", "abr", FALSE},
  { "/nids/raw/nids/ABX/VIL", "abx", FALSE},
//{ "/nids/raw/nids/AHG/VIL", "ahg", FALSE},   //Alaska
//{ "/nids/raw/nids/AIH/VIL", "aih", FALSE},   //Alaska
  { "/nids/raw/nids/AKQ/VIL", "akq", FALSE},
  { "/nids/raw/nids/AMA/VIL", "ama", FALSE},
  { "/nids/raw/nids/AMX/VIL", "amx", FALSE},
  { "/nids/raw/nids/APD/VIL", "apd", FALSE},
  { "/nids/raw/nids/APX/VIL", "apx", FALSE},
  { "/nids/raw/nids/ARX/VIL", "arx", FALSE},
  { "/nids/raw/nids/ATX/VIL", "atx", FALSE},
  { "/nids/raw/nids/BBX/VIL", "bbx", FALSE},
  { "/nids/raw/nids/BGM/VIL", "bgm", FALSE},
  { "/nids/raw/nids/BHX/VIL", "bhx", FALSE},
  { "/nids/raw/nids/BIS/VIL", "bis", FALSE},
  { "/nids/raw/nids/BLX/VIL", "blx", FALSE},
  { "/nids/raw/nids/BMX/VIL", "bmx", FALSE},
  { "/nids/raw/nids/BOX/VIL", "box", FALSE},
  { "/nids/raw/nids/BRO/VIL", "bro", FALSE},
  { "/nids/raw/nids/BUF/VIL", "buf", FALSE},
  { "/nids/raw/nids/BYX/VIL", "byx", FALSE},
  { "/nids/raw/nids/CAE/VIL", "cae", FALSE},
  { "/nids/raw/nids/CBW/VIL", "cbw", FALSE},
  { "/nids/raw/nids/CBX/VIL", "cbx", FALSE},
  { "/nids/raw/nids/CCX/VIL", "ccx", FALSE},
  { "/nids/raw/nids/CLE/VIL", "cle", FALSE},
  { "/nids/raw/nids/CLX/VIL", "clx", FALSE},
  { "/nids/raw/nids/CRP/VIL", "crp", FALSE},
  { "/nids/raw/nids/CXX/VIL", "cxx", FALSE},
  { "/nids/raw/nids/CYS/VIL", "cys", FALSE},
  { "/nids/raw/nids/DAX/VIL", "dax", FALSE},
  { "/nids/raw/nids/DDC/VIL", "ddc", FALSE},
  { "/nids/raw/nids/DFX/VIL", "dfx", FALSE},
  { "/nids/raw/nids/DIX/VIL", "dix", FALSE},
  { "/nids/raw/nids/DLH/VIL", "dlh", FALSE},
  { "/nids/raw/nids/DMX/VIL", "dmx", FALSE},
  { "/nids/raw/nids/DOX/VIL", "dox", FALSE},
  { "/nids/raw/nids/DTX/VIL", "dtx", FALSE},
  { "/nids/raw/nids/DVN/VIL", "dvn", FALSE},
  { "/nids/raw/nids/DYX/VIL", "dyx", FALSE},
  { "/nids/raw/nids/EAX/VIL", "eax", FALSE},
  { "/nids/raw/nids/EMX/VIL", "emx", FALSE},
  { "/nids/raw/nids/ENX/VIL", "enx", FALSE},
  { "/nids/raw/nids/EOX/VIL", "eox", FALSE},
  { "/nids/raw/nids/EPZ/VIL", "epz", FALSE},
  { "/nids/raw/nids/ESX/VIL", "esx", FALSE},
  { "/nids/raw/nids/EVX/VIL", "evx", FALSE},
  { "/nids/raw/nids/EWX/VIL", "ewx", FALSE},
  { "/nids/raw/nids/EYX/VIL", "eyx", FALSE},
  { "/nids/raw/nids/FCX/VIL", "fcx", FALSE},
  { "/nids/raw/nids/FDR/VIL", "fdr", FALSE},
  { "/nids/raw/nids/FDX/VIL", "fdx", FALSE},
  { "/nids/raw/nids/FFC/VIL", "ffc", FALSE},
  { "/nids/raw/nids/FSD/VIL", "fsd", FALSE},
  { "/nids/raw/nids/FSX/VIL", "fsx", FALSE},
  { "/nids/raw/nids/FTG/VIL", "ftg", FALSE},
  { "/nids/raw/nids/FWS/VIL", "fws", FALSE},
  { "/nids/raw/nids/GGW/VIL", "ggw", FALSE},
  { "/nids/raw/nids/GJX/VIL", "gjx", FALSE},
  { "/nids/raw/nids/GLD/VIL", "gld", FALSE},
  { "/nids/raw/nids/GRB/VIL", "grb", FALSE},
  { "/nids/raw/nids/GRK/VIL", "grk", FALSE},
  { "/nids/raw/nids/GRR/VIL", "grr", FALSE},
  { "/nids/raw/nids/GSP/VIL", "gsp", FALSE},
  { "/nids/raw/nids/GWX/VIL", "gwx", FALSE},
  { "/nids/raw/nids/GYX/VIL", "gyx", FALSE},
  { "/nids/raw/nids/HDX/VIL", "hdx", FALSE},
  { "/nids/raw/nids/HGX/VIL", "hgx", FALSE},
//{ "/nids/raw/nids/HKI/VIL", "hki", FALSE},    //Hawaii
//{ "/nids/raw/nids/HKM/VIL", "hkm", FALSE},    //Hawaii
//{ "/nids/raw/nids/HMO/VIL", "hmo", FALSE},    //Hawaii
  { "/nids/raw/nids/HNX/VIL", "hnx", FALSE},
  { "/nids/raw/nids/HPX/VIL", "hpx", FALSE},
  { "/nids/raw/nids/HTX/VIL", "htx", FALSE},
//{ "/nids/raw/nids/HWA/VIL", "hwa", FALSE},    //Hawaii
  { "/nids/raw/nids/ICT/VIL", "ict", FALSE},
  { "/nids/raw/nids/ICX/VIL", "icx", FALSE},
  { "/nids/raw/nids/ILN/VIL", "iln", FALSE},
  { "/nids/raw/nids/ILX/VIL", "ilx", FALSE},
  { "/nids/raw/nids/IND/VIL", "ind", FALSE},
  { "/nids/raw/nids/INX/VIL", "inx", FALSE},
  { "/nids/raw/nids/IWA/VIL", "iwa", FALSE},
  { "/nids/raw/nids/IWX/VIL", "iwx", FALSE},
  { "/nids/raw/nids/JAN/VIL", "jan", FALSE},
  { "/nids/raw/nids/JAX/VIL", "jax", FALSE},
  { "/nids/raw/nids/JGX/VIL", "jgx", FALSE},
  { "/nids/raw/nids/JKL/VIL", "jkl", FALSE},
//{ "/nids/raw/nids/JUA/VIL", "jua", FALSE},    //Carribean
  { "/nids/raw/nids/LBB/VIL", "lbb", FALSE},
  { "/nids/raw/nids/LCH/VIL", "lch", FALSE},
  { "/nids/raw/nids/LIX/VIL", "lix", FALSE},
  { "/nids/raw/nids/LNX/VIL", "lnx", FALSE},
  { "/nids/raw/nids/LOT/VIL", "lot", FALSE},
  { "/nids/raw/nids/LRX/VIL", "lrx", FALSE},
  { "/nids/raw/nids/LSX/VIL", "lsx", FALSE},
  { "/nids/raw/nids/LTX/VIL", "ltx", FALSE},
  { "/nids/raw/nids/LVX/VIL", "lvx", FALSE},
  { "/nids/raw/nids/LWX/VIL", "lwx", FALSE},
  { "/nids/raw/nids/LZK/VIL", "lzk", FALSE},
  { "/nids/raw/nids/MAF/VIL", "maf", FALSE},
  { "/nids/raw/nids/MAX/VIL", "max", FALSE},
  { "/nids/raw/nids/MBX/VIL", "mbx", FALSE},
  { "/nids/raw/nids/MHX/VIL", "mhx", FALSE},
  { "/nids/raw/nids/MKX/VIL", "mkx", FALSE},
  { "/nids/raw/nids/MLB/VIL", "mlb", FALSE},
  { "/nids/raw/nids/MOB/VIL", "mob", FALSE},
  { "/nids/raw/nids/MPX/VIL", "mpx", FALSE},
  { "/nids/raw/nids/MQT/VIL", "mqt", FALSE},
  { "/nids/raw/nids/MRX/VIL", "mrx", FALSE},
  { "/nids/raw/nids/MSX/VIL", "msx", FALSE},
  { "/nids/raw/nids/MTX/VIL", "mtx", FALSE},
  { "/nids/raw/nids/MUX/VIL", "mux", FALSE},
  { "/nids/raw/nids/MVX/VIL", "mvx", FALSE},
  { "/nids/raw/nids/MXX/VIL", "mxx", FALSE},
  { "/nids/raw/nids/NKX/VIL", "nkx", FALSE},
  { "/nids/raw/nids/NQA/VIL", "nqa", FALSE},
  { "/nids/raw/nids/OAX/VIL", "oax", FALSE},
  { "/nids/raw/nids/OHX/VIL", "ohx", FALSE},
  { "/nids/raw/nids/OKX/VIL", "okx", FALSE},
  { "/nids/raw/nids/OTX/VIL", "otx", FALSE},
  { "/nids/raw/nids/PAH/VIL", "pah", FALSE},
  { "/nids/raw/nids/PBZ/VIL", "pbz", FALSE},
  { "/nids/raw/nids/PDT/VIL", "pdt", FALSE},
  { "/nids/raw/nids/POE/VIL", "poe", FALSE},
  { "/nids/raw/nids/PUX/VIL", "pux", FALSE},
  { "/nids/raw/nids/RAX/VIL", "rax", FALSE},
  { "/nids/raw/nids/RGX/VIL", "rgx", FALSE},
  { "/nids/raw/nids/RIW/VIL", "riw", FALSE},
  { "/nids/raw/nids/RLX/VIL", "rlx", FALSE},
  { "/nids/raw/nids/RTX/VIL", "rtx", FALSE},
  { "/nids/raw/nids/SFX/VIL", "sfx", FALSE},
  { "/nids/raw/nids/SGF/VIL", "sgf", FALSE},
  { "/nids/raw/nids/SHV/VIL", "shv", FALSE},
  { "/nids/raw/nids/SJT/VIL", "sjt", FALSE},
  { "/nids/raw/nids/SOX/VIL", "sox", FALSE},
  { "/nids/raw/nids/SRX/VIL", "srx", FALSE},
  { "/nids/raw/nids/TBW/VIL", "tbw", FALSE},
  { "/nids/raw/nids/TFX/VIL", "tfx", FALSE},
  { "/nids/raw/nids/TLH/VIL", "tlh", FALSE},
  { "/nids/raw/nids/TLX/VIL", "tlx", FALSE},
  { "/nids/raw/nids/TWX/VIL", "twx", FALSE},
  { "/nids/raw/nids/TYX/VIL", "tyx", FALSE},
  { "/nids/raw/nids/UDX/VIL", "udx", FALSE},
  { "/nids/raw/nids/UEX/VIL", "uex", FALSE},
  { "/nids/raw/nids/VAX/VIL", "vax", FALSE},
  { "/nids/raw/nids/VBX/VIL", "vbx", FALSE},
  { "/nids/raw/nids/VNX/VIL", "vnx", FALSE},
  { "/nids/raw/nids/VTX/VIL", "vtx", FALSE},
  { "/nids/raw/nids/YUX/VIL", "yux", FALSE}
};

///////////// archive_data_set ////////////////////////
//
// Archive data sets to be processed.
// The input_dir is ignored, since the file paths to be processed are 
//   specified on the command line.
//
// Type: struct
//   typedef struct {
//      string input_dir;
//      string radar_name;
//      boolean is_dbz;
//   }
//
//

archive_data_set = { ".", "ftg", TRUE };

///////////// max_realtime_data_age ///////////////////
//
// Max age (in seconds) of input data for it to be valid.
// Only used in realtime mode.
// Type: long
//

max_realtime_data_age = 360;
max_realtime_data_age = 600;

///////////// use_latest_data_info ////////////////////
//
// Option to use latest_data_info file to trigger input. REALTIME mode 
//   only.
// Some upstream processes, such as WsiNidsIngest, will generate 
//   latest_data_infor files. Others, such as the LDM, do not. If this 
//   option is on, each thread triggers off the lates_data_info file. If 
//   the option is off, the thread watches the directory for new files.
// Type: boolean
//

use_latest_data_info = FALSE;

///////////// get_latest_file_only ////////////////////
//
// Option to only get the latest valid file, rather than all the files 
//   younger than max_realtime_data_age.
// Only used in realtime mode and if use_latest_data_info is FALSE. If 
//   set, only the latest file will be processed. If not set, all files 
//   younger than  max_input_data_age will be processed.
// Type: boolean
//

get_latest_file_only = TRUE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory. Individual radars will be output to separate 
//   subdirectories of this directory.
// The program will create a subdirectory for each radar, using the 
//   radar name in lower case.
// Type: string
//

output_dir = "/home/petach/nids_4km_vil_indiv";

///////////// output_grid /////////////////////////////
//
// Output grid dimensions.
// The grid origin will be at the radar site.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      float minx;
//      float miny;
//      float dx;
//      float dy;
//   }
//
//

output_grid = { 116, 116, -230, -230, 4, 4 };

///////////// data_field_name_long ////////////////////
//
// field name for data -- long form.
// This value is put in the MDV field header.
// Type: string
//

data_field_name_long = "Vertically Integrated Liquid";

///////////// data_field_name /////////////////////////
//
// field name for data -- short form.
// This value is put in the MDV field header.
// Type: string
//

data_field_name = "vil";

///////////// data_field_code /////////////////////////
//
// field code for data.
// This value is put in the MDV field header.
// Type: int
//

data_field_code = 263;
data_field_code = 0;

///////////// data_units //////////////////////////////
//
// data units.
// This value is put in the MDV field header.
// Type: string
//

data_units = "kg m-2";

///////////// data_scale //////////////////////////////
//
// scale value used for converting between byte values and data values.
// The byte value is calculated from the byte value using the following 
//   formula: byte = (value - data_bias) / data_scale.
// Type: double
//

data_scale = 0.3;

///////////// data_bias ///////////////////////////////
//
// bias value used for converting between byte values and data values.
// The byte value is calculated from the byte value using the following 
//   formula: byte = (value - data_bias) / data_scale.
// Type: double
//

data_bias = 0;

///////////// compute_scale_and_bias //////////////////
//
// Option to automatically compute the data scale and bias.
// If set to TRUE, the data scale and bias will automatically be 
//   computed from the input data, otherwise the data_scale and data_bias 
//   values will be used.
// Type: boolean
//

compute_scale_and_bias = FALSE;

