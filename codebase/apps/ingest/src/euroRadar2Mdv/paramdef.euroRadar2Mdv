/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */


commentdef {
  p_header = "euroRadar2Mdv is an ingest program to read european\n"
	"radar data and write it in MDV format. I have worked with\n"
	"Tammy Weckwerth at UCAR and Christian.Koziar@dwd.de at\n"
	"Deutscher Wetterdienst to read these data.\n\n"
	"The data are on an Oblique Polar Stereographic projection,\n"
	"but the math behind it is not the same as ours. Therefore\n"
	"the data are read in and remapped to a lat/lon grid\n"
	"by this program.\n\nNiles Oien December 2004.";
}

paramdef string {
  p_default = "mdvp:://localhost::./mdv/euroRadar";
  p_descr = "Output url, of form mdvp:://host.domain:[port]:dir/dir ";
  p_help = "Data are written here.";
} output_url;

paramdef string {
  p_default = "./";
  p_descr = "Input directory.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef string {
  p_default = "";
  p_descr = "Input file extension.";
  p_help = "If string is NULL, all extensions are valid.";
} fileExtension;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}


paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;


paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = REALTIME;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;


typedef struct{
	double Dx;
	double Dy;
	double OriginLat;
	double OriginLon;
	double TangentLat;
	double TangentLon;
	int OriginIX;
	int OriginIY;
} germanGridSpec_t;

paramdef struct germanGridSpec_t {
  p_descr = "Grid specification for polar stereographic projection.";
  p_help = "This is not included in the input file.";
  p_default = { 4.0, 4.0, 51.0, 9.0, 60.0, 10.0, 200, 160 };
} germanGridSpec;


typedef struct{
	double minLat;
	double minLon;
	double Dx;
	double Dy;
	int Nx;
	int Ny;
} ourGridSpec_t;

paramdef struct ourGridSpec_t {
  p_descr = "Our specification for latlon projection.";
  p_help = "This is set up to include their projection.";
  p_default = { 40.0, -5.0, 0.05, 0.05, 500, 400 };
} ourGridSpec;

paramdef int {
  p_default = 900;
  p_descr = "Time, seconds that MDV file is valid for.";
  p_help = "Default is 15 minutes.";
} Expiry;






