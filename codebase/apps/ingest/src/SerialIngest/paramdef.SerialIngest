/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for SerialIngest
 *
 * Mike Dixon, RAP, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * June 1999
 */

commentdef {
  p_header = "Reads ASCII data from a serial port or TCP/IP socket, assembles the input data into buffers and writes the buffers out as plain ASCII files at regular intervals.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = {DEBUG_OFF};
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "SERIAL DATA INPUT.";
}

typedef enum {
  SERIAL, TCP
} connection_t;

paramdef enum connection_t
{
  p_default = SERIAL;
  p_descr = "Connection type.";
  p_help = "If serial, data will come in via a serial port. If TCP, this program will connect to a server using TCP.";
} connection;

paramdef string {
  p_default = "/dev/ttyS1";
  p_descr = "Name of input serial port.";
  p_help = "For connection SERIAL. This is the name, starting with /dev, of the serial port to be read. Make sure the permissions on the port have been set appropriately for reading from this user.";
} input_device;

paramdef enum baud_rate_t
{
  p_options = {BAUD_300, BAUD_1200, BAUD_2400, BAUD_4800,
	       BAUD_9600, BAUD_19200, BAUD_38400};
  p_default = {BAUD_9600};
  p_descr = "Baud rate";
  p_help = "For connection SERIAL. Baud rate for incoming serial data port";
} baud_rate;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for 7-bit data";
  p_help = "For connection SERIAL. Set TRUE for 7-bit data, FALSE for 8-bit data.";
} dataIs7Bit;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for two stop bits";
  p_help = "For connection SERIAL. If TRUE, 2 stop bits. If FALSE, 1 stop bit.";
} twoStopBits;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Flag for enabling parity checking.";
  p_help = "For connection SERIAL. If TRUE, parity generation is enabled for outgoing characters, and checking enabled for incoming characters. If FALSE, parity generation and checking is off.";
} enableParity;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for parity type.";
  p_help = "For connection SERIAL. If TRUE, odd parity. If FALSE, even parity. Only applies if enableParity is TRUE.";
} oddParity;

paramdef string {
  p_default = "192.168.1.1";
  p_descr = "Name of TCP server host.";
  p_help = "For connection TCP. The name of the host for the TCP server.";
} tcp_server_host_name;

paramdef int {
  p_default = 2003;
  p_descr = "TCP server port number.";
  p_help = "For connection TCP. The number of the port for the TCP server.";
} tcp_server_port;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to send TCP handshake sequence to the server to trigger the data flow.";
  p_help = "If true, a sequence of bytes will be sent to the server to trigger the data flow. See 'tcp_handshape_bytes'.";
} send_tcp_handshake;

paramdef int {
  p_default = { 13, 10 };
  p_descr = "List of bytes to be sent to server for handshaking.";
  p_help = "This array of decimal integers is interpreted as a sequence of individual bytes which are to be sent to the server to trigger the data flow.";
} tcp_handshake_bytes[];

commentdef {
  p_header = "FILTERING.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag to set filtering of CONTROL-M (^M) characters.";
  p_help = "If TRUE, ^M characters in the input stream will be filtered and will not appear in the output stream.";
} filter_ctrlm;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag to set filtering of NULL (^@) characters.";
  p_help = "If TRUE, null characters in the input stream will be filtered and will not appear in the output stream.";
} filter_nulls;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag to set filtering of non-printable characters.";
  p_help = "If TRUE, non-printable characters in the input stream will be filtered and will not appear in the output stream. There is an option to allow select characters through. See  allowable_non_printables.";
} filter_non_printable;

paramdef int {
  p_default = { };
  p_descr = "List of allowable non-printable characters.";
  p_help = "See filter_non_printable. If you have this option set, then all non-printable characters will be filtered from the output stream, EXCEPT for the characters in this list. The characters are given as decimal numbers.";
} allowable_non_printable[];

typedef enum {
  EOM_CHECK_NONE,
  EOM_CHECK_NNNN,
  EOM_CHECK_CTRLC,
  EOM_CHECK_CTRLKC,
  EOM_CHECK_EQUALS
} end_of_message_check_t;

paramdef enum end_of_message_check_t
{
  p_default = EOM_CHECK_NONE;
  p_descr = "Option to check for end of message before closing an output file.";
  p_help = "Some of the incoming data streams have special characters for indicating the end of a message. The following EOM conditions are used: (a) EOM_CHECK_NNNN: the 4 characters NNNN; (b) EOM_CHECK_CTRLC: Ctrl-C; (c) EOM_CHECK_CTRLKC: Ctrl-K Ctrl-C; (d) EOM_CHECK_EQUALS: an equals-sign followed by a line-feed.";
} end_of_message_check;

commentdef {
  p_header = "METAR DATA FILE OUTPUT.";
}

paramdef int {
  p_default = 300;
  p_descr = "Interval at which output files are created (secs).";
  p_help = "The program reads the incoming data and stores it in a temporary file. At regular intervals, the file is renamed - see output_dir_path.";
} output_interval;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Flag for forcing the file output if the input stream in stalled.";
  p_help = "If TRUE, on output file will be written at the appropriate time, even if no data is coming in. If FALSE, the output file will only be written when message data indicates that an appropriate end-of-message condition has been met.";
} force_output_if_stalled;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Flag for discarding 0-length files.";
  p_help = "If TRUE, output files will be ignored if they are empty. If FALSE, files will be output even if empty.";
} discard_zero_length_files;

paramdef string {
  p_default = ".";
  p_descr = "Name of output directory.";
  p_help =
    "The output files will be stored in this level directory.\n"
    "The file path is computed as follows:\n"
    "\t output_dir_path/yyyymmdd/hhmmss.ext\n";
} output_dir_path;

paramdef string {
  p_default = "metar";
  p_descr = "Extension for output file.";
  p_help = "See output_dir_path.";
} output_file_ext;

paramdef int {
  p_default = "-1";
  p_descr = "If we have not received data in this long, terminate connection and retry to connect";
  p_help = "Timeout is in seconds.  A timeout of -1 (the default) means this feature will be disabled.";
} dataTimeout;


