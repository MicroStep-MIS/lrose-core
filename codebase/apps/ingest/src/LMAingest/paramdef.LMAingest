/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */


commentdef {
  p_header = "LMAingest is a simple program to ingest ltg data from\n"
  "the U of New Mexico Ltg Mapping Array. The altitude information\n"
  "is discarded. Files are ASCII with (roughly) the following format :\n\n"
  "New Mexico Tech's Lightning Mapping System -- Ananlyzed Data\n"
  "Data start time: 08/21/02 05:45:00\n"
  "Number of seconds analyzed:  600\n"
  "Location: New Mexico 2002\n"
  "Analysis program: analysis_v6 -n1\n"
  "Analysis started : Fri Jun 27 13:17:57 2003\n"
  "Analysis finished: Fri Jun 27 13:19:05 2003\n"
  "Number of active stations: 8\n"
  "Active stations: A B C D E F G I\n"
  "Data: time (UT sec of day), lat, lon, alt(m), reduced chi^2, # of stations contributed\n"
  "Data format: 15.9f 10.6f 10.6f 7.1f 5.2f 2d\n"
  "Number of events:        25939\n"
  "*** data ***\n"
  " 20707.488263089  -7.778016 -48.345406 25514939.5  1.13  6\n"
  " 20707.527138089  33.909109 -107.008366  5261.2  0.00  6\n"
  " 20707.536238566  33.915601 -107.005872  5404.0  1.46  6\n"
  " 20707.537721091  33.915629 -107.005798  5467.0  1.65  6\n"
  " 20707.544873473  33.859059 -106.852575  8290.4  1.15  6\n"
  " 20707.550234035  33.913167 -107.013857  7726.4  1.79  6\n"
  " 20707.553575905  33.901588 -106.985319  6727.9  1.82  7\n"
  "\n\nThe SPDB data type is the fractional part of the seconds,\n"
  "times 10000.\n\nNiles Oien August 2003.\n"
  "App has been upgraded to handle Colorado LMA data with format:\n"
  "Data: time (UT sec of day), lat, lon, alt(m), reduced chi2, P(dBW), mask\n"
  "Data format: 15.9f 10.6f 11.6f 7.1f 5.2f 5.1f 4x"
;
}

paramdef string {
  p_default = "./";
  p_descr = "Input directory.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef string {
  p_default = "";
  p_descr = "Input file extension.";
  p_help = "If string is NULL, all extensions are valid.";
} fileExtension;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}


paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;


paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = REALTIME;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;
  

paramdef boolean {
  p_descr = "Option to save data in traditional ltg format.\n"
  "This discards altitude information.";
  p_help = "If set, ltgOutUrl is used.";
  p_default = TRUE;
} saveLtgFormatData;
 
paramdef string {
  p_descr = "Output spdb url for data in traditional ltg struct.";
  p_help = "Used if saveLtgFormatData is TRUE.";
  p_default = {"spdbp:://localhost::spdb/ltg"};
} ltgOutUrl;
 

paramdef boolean {
  p_descr = "Option to save data in newer GenPt format.\n"
  "This retains altitude information.";
  p_help = "If set, genPtOutUrl is used.";
  p_default = FALSE;
} saveGenPtFormatData;
 
paramdef string {
  p_descr = "output spdb url for data in GenPt format.";
  p_help = "Used if saveGenPtFormatData is TRUE";
  p_default = {"spdbp:://localhost::spdb/ltg"};
} genPtOutUrl;
 

paramdef long {
  p_descr = "How long the data are valid, seconds.";
  p_help = "Depends on input frequency.";
  p_default = 600;
} Expiry;
 
commentdef {
  p_header = "Options to select a subregion to ingest (the whole thing may\n"
  "be a pretty big database). The limits on altitude mat allow you to\n"
  "effectively select cloud-to-cloud ltg.";
}

paramdef double {
  p_descr = "Minimum latitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = -90.0;
} minLat;
 
paramdef double {
  p_descr = "Maximum latitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = 90.0;
} maxLat;
 
paramdef double {
  p_descr = "Minimum longitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = -180.0;
} minLon;
 
paramdef double {
  p_descr = "Maximum longitude to accept, decimal degrees.";
  p_help = "Set to define the ingest region.";
  p_default = 180.0;
} maxLon;
 
paramdef double {
  p_descr = "Minimum altitude to accept, m.";
  p_help = "Set to define the ingest region.";
  p_default = 0.0;
} minAlt;
 
paramdef double {
  p_descr = "Maximum altitude to accept, m.";
  p_help = "Set to define the ingest region. May also be used for\n"
  "quality control - occasionally data with clearly erroneously high\n"
  "altitudes come in.";
  p_default = 20000.0;
} maxAlt;
 
paramdef boolean {
  p_descr = "Set to TRUE to only accept strikes close to the\n"
  "location defined by the centralPoint parameter.";
  p_help = "Cuts down on the number of ingested strikes, which\n"
  "could otherwise be so large as to be unmanagable.";
  p_default = FALSE;
} applyClosenessCriteria;

typedef struct {
  double lat;
  double lon;
  double maxRangeKm;
} centralPoint_t;

paramdef struct centralPoint_t {
  p_descr = "Defines the location and maximum distance to test for if\n"
  "we are applying a closeness criteria test.";
  p_help = "Relevant only if applyClosenessCriteria is TRUE.";
  p_default = {39.3669, -101.7003, 300.0 };
} centralPoint;

paramdef boolean {
 p_descr = "Flag to indicate Colorado LMA format";
 p_help = "time (UT sec of day), lat, lon, alt(m), reduced chi2, P(dBW), mask";
 p_default = false;
 } isColoradoLma;

paramdef boolean {
 p_descr = "Flag to threshold data on Chi^2 value";
 p_help = "Data with values above this threshold will not be processed";
 p_default = false;
 } threshOnChi2;


paramdef double {
  p_descr = "Threshold for chi^2 value.";
  p_help = "If data is Colorado LMA and threshOnChi2 is true, data "
  "corresponding to chi^2 values greater than this will not be processed";
  p_default = 2;
} chi2Thresh;


paramdef boolean {
 p_descr = "Flag to threshold data on height";
 p_help = "Data with values above this threshold will not be processed";
 p_default = false;
 } threshOnHeight;

paramdef double {
  p_descr = "Threshold for height value.";
  p_help = "If data is Colorado LMA and threshOnHeight is true, then data "
           "with altitude values greater than this will not be processed";
  p_default = 15000;
} heightThresh;

paramdef boolean {
 p_descr = "Flag to threshold data on the power value";
 p_help = "Data with values below this threshold will not be processed";
 p_default = false;
 } threshOnPower;

paramdef double {
  p_descr = "Threshold for power value.";
  p_help = "If data is Colorado LMA and threshOnPower is true, data "
  "corresponding to power values less than this will not be processed";
  p_default = -10;
} powerThresh;

paramdef boolean {
  p_descr = "Flag to indicate if ldata info file is available";
  p_default = false;
} ldata_available;

