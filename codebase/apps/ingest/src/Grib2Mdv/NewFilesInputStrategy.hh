// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/////////////////////////////////////////////////////////////
// NewFilesInputStrategy.hh
//
// Realtime mode:
//   The constructor passes in an input directory to watch, as well as
//   as max valid age and a heartbeat function to be called while
//   waiting for new data to arrive. When next() is called, the
//   routine will watch the input directory for a new file. When
//   a new file arrives the path is returned by next(). If the
//   heartbeat_func is not NULL, it gets called every second while
//   next() is waiting for a file to arrive.
//
//   This class is a replacement for RealtimeDirInputStrategy,
//   which failed to detect about 2/3 of the arriving files
//   deposited in the directory by rsync.
//
// Carl Drews, RAL, NCAR, P.O. Box 3000, Boulder, CO 80307-3000, USA
//
// December 2004
//
/////////////////////////////////////////////////////////////

#ifndef _NewFilesInputStrategy_
#define _NewFilesInputStrategy_

#include <sys/types.h>
#include "InputStrategy.hh"

#include <vector>


using namespace std;


// structure for storing file change information
typedef struct _fileInfo {
  string name;
  time_t modified;
  off_t size;
} fileInfo;


class NewFilesInputStrategy : public InputStrategy
{
  
public:

  // Typedef for heartbeat function. If heartbeat_func is non-null,
  // the client must provide a pointer to a function which fits this
  // prototype. The label will be generated by this class prior
  // to calling the heartbeat function.

  typedef void (*heartbeat_t)(const char *label);

  NewFilesInputStrategy(const string &data_dir,
			   const string &input_substring,
			   const int max_valid_age = -1,
			   heartbeat_t heartbeat_func = 0,
                           const bool process_old_files = false,
			   const bool debug = false);

  virtual ~NewFilesInputStrategy();

  /**
   * initialize after constructing
   * If you are not processing old files, this routine will
   * take a snapshot of the data directory as "already processed".
   */
  virtual void init();

  /**
   * @return if this file has already been returned by next()
   */
  virtual bool alreadyProcessed(string &filename, time_t modified, off_t size);

  /**
   * @return the name of the next file to process, immediately
   */
  virtual const string &getNextFile();

  /**
   * @return the name of the next file to process, waiting for it to arrive if necessary
   */
  virtual const string &next();

protected:
 
  // store the input parameters
  string _dataDir;
  string _inputSubstring;
  int _maxValidAge;
  heartbeat_t _heartbeatFunc;
  bool _processOldFiles;
  bool _debug;
  
  // Define a member for the current input path so we can return a
  // constant reference to it from the next() method.
  string _currentInputPath;

  // keep track of the files that have been processed
  vector<fileInfo> _processed;
};

#endif
