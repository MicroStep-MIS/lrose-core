/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
///////////////////////////////////////////////////////////
//
// paramdef.NPLtg2Spdb
//
//

commentdef {
  p_header = "NPLtg2Spdb reads lightning data into an SPDB database.\n"
	"THIS CODE IS DEPRICATED, USE noaaportLtg2Spdb INSTEAD.\n"
	"Niles Oien Feb 2007.n";
}         


////////////////////////////////////////////////////////////////////////
//
// Debugging
//

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = { false };
} Debug;

////////////////////////////////////////////////////////////////////////
//
// Operational information
//

paramdef string
{
  p_descr = "procmap instance";
  p_default = { "Test" };
} Instance;

paramdef long
{
  p_descr = "processing delay in seconds";
  p_help = "The number of seconds to wait before processing an input file.  This delay allows activity on the file to finish before we start reading it, realtime mode only.";
  p_default = { 1 };
} ProcessingDelay;

paramdef string
{
  p_descr = "Input directory";
  p_help = "Directory where NOAAPORT ltg files are, realtime mode only.";
  p_default = { "." };
} InputDir;

paramdef boolean
{
  p_descr = "Option to trigger off a _latest_data_info file. Default is\n"
	"not to do this.";
  p_help = "Set to TRUE if the input files have an _latest_data_info file\n"
	"associated with them.";
  p_default = { false };
} ldataInfoAvailable;

paramdef boolean
{
  p_descr = "Relevant only if ldataInfoAvailable is FALSE.";
  p_help = "Set to TRUE if you want several file processed on startup.";
  p_default = { false };
} latestFileOnly;


paramdef long
{
  p_descr = "lightning data expire seconds";
  p_help = "Number of seconds the lightning data is valid before it should be expired.";
  p_default = { 60 };
} ExpireSecs;

paramdef int
{
  p_descr = "Maximum age for an input file to be processed, seconds.";
  p_help = "Valid for REALTIME mode only.";
  p_default = 300;
} MaxRealtimeFileAge;

paramdef string
{
  p_descr = "Destination SPDB URL";
  p_help = "The name of the URL which will be used as the destination for the SPDB data.";
  p_default = { "spdbp:://localhost::spdb/ltg" };
} OutputUrl;

paramdef enum runmode_t
{
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the analysis is performed for each dataset as it becomes available. In archive mode, the file list is obtained from the command line.";
  p_options = {ARCHIVE, REALTIME};
  p_default = {REALTIME};
} Mode;


commentdef {
  p_header = "-------- Region over which to ingest data.";
}

paramdef float
{
  p_descr = "Minimum latitude for data to be ingested, decimal degrees.";
  p_help = "Data south of this are not ingested. Default covers Mainland USA.";
  p_default = 25.0;
} MinLat;

paramdef float
{
  p_descr = "Maximum latitude for data to be ingested, decimal degrees.";
  p_help = "Data north of this are not ingested. Default covers Mainland USA.";
  p_default = 50.0;
} MaxLat;

paramdef float
{
  p_descr = "Minimum longitude for data to be ingested, decimal degrees.";
  p_help = "Data west of this are not ingested. Default covers Mainland USA.\n"
            "Longitudes cover -180 to 180.";
  p_default = -125.0;
} MinLon;

paramdef float
{
  p_descr = "Maximum longitude for data to be ingested, decimal degrees.";
  p_help = "Data east of this are not ingested. Default covers Mainland USA.\n"
            "Longitudes cover -180 to 180.";
  p_default = -65.0;
} MaxLon;

paramdef int
{
  p_descr = "Maximum difference between the file name time and the\n"
	"file modification time, seconds, in REALTIME mode, for a file\n"
	"to be considered for ingest (seconds).";
  p_help = "File names must comply with the 20060802_1901.ltg naming\n"
	"convention for this test to be applied. The intent is to skip\n"
	"files which contain old data but for some reason the data\n"
	"are repeatedly transmitted, causing the file to grow continually.";
  p_default = 600;
} MaxRealtimeFileTimeDiff;

paramdef boolean
{
  p_descr = "Option to create an info file.";
  p_help = "Useful only for debugging.";
  p_default = { false };
} createInfoFile;

paramdef string
{
  p_descr = "Name of info file to append to, if any.";
  p_help = "Relevant only if createInfoFile is TRUE.";
  p_default = { "/Some/File/Name.dat" };
} infoFilename;

