/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// paramter definitions for SeviriNc2Mdv
//
// Gary Cunning, RAP, NCAR
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// December 2002
//
 
commentdef {
  p_header = "Program name: SeviriNc2Mdv";
  p_text = "";
}
 
////////////////////////////////////////////////////////////////////////
//
// Debugging parameters.
//

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

typedef enum {
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;
 
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "The options are DEBUG_OFF, DEBUG_NORM and DEBUG_VERBOSE. "
	"If set, debug messages will be printed appropriately";
} debug_mode;


////////////////////////////////////////////////////////////////////////
//
// Process parameters.
//

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;

paramdef enum mode_t {
  p_options = {REALTIME, TIME_LIST, DIR_LIST, FILE_LIST};
  p_default = {FILE_LIST};
  p_descr = "Operation mode";
  p_help = "";
} mode;

////////////////////////////////////////////////////////////////////////
//
// Process I/O.
//


commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

paramdef string {
  p_default = "./";
  p_descr = "Input directory";
  p_help = "Directory which contains input files. "
           "Used only if files are not specified on the command line. ";
} input_dir;

paramdef string {
  p_default = ".nc";
  p_descr = "File Substring";
  p_help = "Only files whose names contain this substring will be processed.";
} file_substring;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost:port:directory";
} output_url;


typedef enum {
  OUTPUT_OVERWRITE,
  OUTPUT_APPEND
} output_mode_t;
 
paramdef enum output_mode_t
{
  p_default = OUTPUT_OVERWRITE;
  p_descr = "File writing option";
  p_help = "The options are OUTPUT_OVERWRITE and OUTPUT_APPEND. "
	"The OUTPUT_APPEND option has not been implemented yet.";
} output_mode;


typedef enum {
  TIMESTAMP_INTERNAL,
  TIMESTAMP_FILENAME
} timestamp_mode_t;
 
paramdef enum timestamp_mode_t
{
  p_default = TIMESTAMP_FILENAME;
  p_descr = "File timestamp option";
  p_help = "The options are TIMESTAMP_INTERNAL and TIMESTAMP_PATHNAME. "
	"The TIMESTAMP_INTERNAL option sets the timestamp from the imageTime "
        "variable in the netcdf file. The TIMESTAMP_PATHNAME options sets the"
        "timestamp from the pathname <dir>/YYYYMMDDHHMM.BB.nc.";
} timestamp_mode;

/***********************************************************************
 * Output fields.
 */

commentdef
{
  p_header = "OUTPUT FIELDS";
};

paramdef boolean
{
  p_descr = "Flag to write all bands for a given observation date and time.";
  p_help = "If false, the list of bands are set in band_list";
  p_default = true;
} write_all_bands;

paramdef int {
  p_default = {1};
  p_min = 1;
  p_descr = "List of bands to write.";
  p_help = "use -contents to list contents of file or results of 'ncdump -h' on input file.";
} band_list[];


typedef struct
{
  int number;
  string short_name;
  string long_name;
  string count_units;
  string physical_units;
  int upper_count_limit;
  int lower_count_limit;
} band_info_t;

paramdef struct band_info_t
{
  p_descr = "This list assigns long and short field names and units to band numbers.";
  p_help = "These labels are used in the MDV fields. Both upper_count_limit and "
     "lower_count_limit are inclusive values. The original data were stored as 10-bit unsigned "
     "integers, so the maximum value for upper_count_limit is 1023";
  p_default = {
    {1, "ch_1_vis", "channel 1 -- VIS 0.6 mic.", "brt. counts", "%", 0, 1023},
    {2, "ch_2_vis", "channel 2 -- VIS 0.8 mic.", "brt. counts", "%", 0, 1023},	
    {3, "ch_3_vis", "channel 3  -- VIS 1.6 mic.", "brt. counts", "%", 0, 1023},
    {4, "ch_4_ir", "channel 4  -- IR 3.9 mic.", "temp. counts", "Kelvin", 52, 1023},	
    {5, "ch_5_wv", "channel 5  -- WV 6.2 mic.", "temp. counts", "Kelvin", 0, 1023},	
    {6, "ch_6_wv", "channel 6  -- WV 7.3 mic.", "temp counts", "Kelvin", 0, 1023},	
    {7, "ch_7_ir", "channel 7  -- IR 8.7 mic.", "temp counts", "Kelvin", 0, 1023},	
    {8, "ch_8_ir", "channel 8  -- IR 9.7 mic. O_3", "temp counts", "Kelvin", 0, 1023},	
    {9, "ch_9_ir", "channel 9  -- IR 10.8 mic.", "temp counts", "Kelvin", 0, 1023},	
    {10, "ch_10_ir", "channel 10  -- IR 12.0 mic.", "temp counts", "Kelvin", 0, 1023},	
    {11, "ch_11_ir", "channel 11  -- IR 13.4 mic. CO_2", "temp counts", "Kelvin", 0, 1023} } 
} band_info[];
 
typedef enum {
  LIMIT_FILL_CLIP,
  LIMIT_FILL_BAD
} limit_fill_mode_t;
 
paramdef enum limit_fill_mode_t
{
  p_default = LIMIT_FILL_CLIP;
  p_descr = "Method to fill regions that violate upper_count_limit and lower_count_limit boundaries";
  p_help = "LIMIT_FILL_CLIP will apply the upper or lower limit values to regions outside boundaries. "
	"LIMIT_FILL_BAD fills regions outside boundaries with the bad data value.";
} limit_fill_mode;


paramdef boolean
{
  p_descr = "Flag to trigger conversion of radiance counts to albedos and temperatures.";
  p_help = "The raw units a counts, ranging from 0 to 255. ";
  p_default = FALSE;
} convert_counts;

 

/***********************************************************************
 * Output projection parameters.
 */

commentdef
{
  p_header = "OUTPUT PROJECTION PARAMETERS";
};

paramdef boolean
{
  p_descr = "Remap output fileds";
  p_help = "Remaps output to projection and grid specified below.";
  p_default = false;
} remap_output;

typedef enum {
  PROJ_LATLON		= 0,
  PROJ_LAMBERT_CONF	= 3,
  PROJ_FLAT		= 8
} projection_t;

typedef struct {
  projection_t type;
  double rotation;
  double origin_lat;
  double origin_lon;
  double ref_lat_1;
  double ref_lat_2;
} projection_info_t;

paramdef struct projection_info_t {
  p_descr = "This is the user defined projection";
  p_help = "userProjection is the output projection definition. The statellite "
           "and model input grid are remapped by userProjection as they are read. "
           "The choice of projections are PROJ_LATLON, PROJ_LAMBERT_CONF and "
           "PROJ_FLAT. PROJ_LATLON is a latitude/longitude projection, and if "
           "it is chosen the remaining parameters can be ignored. PROJ_FLAT is "
           "a flat projection, and if it is chosen the parameters rotation, "
           "origin_lat, origin_lon must be set. PROJ_LAMBERT_CONF is a Lambert "
           "conformal projection, and if it is chosen the parameters origin_lat, "
           "origin_lon, ref_lat_1 and ref_lat_2 must be set.";
  p_default = {PROJ_LAMBERT_CONF, 0.0, 25.0, -95.0, 25.0, 25.0};
} out_projection_info; 
  
typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_info_t;

paramdef struct grid_info_t {
  p_descr = "This is the user defined grid";
  p_help = "userGrid is the output grid definition. The statellite and model"
  "input grid are remapped by userGrid as they are read.";
  p_default = {301, 225, -3332.142334, -588.890442, 20.318001, 20.318001};
} out_grid_info; 

