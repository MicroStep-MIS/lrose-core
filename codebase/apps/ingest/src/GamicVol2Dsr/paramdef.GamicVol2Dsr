/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions GamicVol2Dsr
//
// Mike Dixon
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// Sept 2009
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "GamicVol2Dsr reads volume files in GAMIC format, and reformats the contents into a DsRadar FMQ.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "MODE OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME, SIMULATE
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the list of file names specified on the command line. In SIMULATE mode, the program moves repeatedly through the file list, creating output files with times set to now. This is useful for simulating an operational radar.";
} mode;

commentdef {
  p_header = "FILE DATA INPUT";
};

paramdef string {
  p_default = "$(HOME)/data/gamic";
  p_descr = "Dir for input data files.";
  p_help = "This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, the file paths are specified on the command line.";
} input_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use _latest_data_info file as input trigger.";
  p_help = "REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.";
} use_ldata_info_file;

paramdef int {
  p_default = 360;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

commentdef {
  p_header = "RADAR PARAMS";
};

typedef enum {
  POL_HORIZ = 0,
  POL_VERT = 1,
  POL_RIGHT_CIRC = 2,
  POL_ELLIPTICAL = 3,
  POL_LEFT_CIRC = 4,
  POL_DUAL = 5,
  POL_DUAL_HV_ALT = 6,
  POL_DUAL_HV_SIM = 7
} polar_t;

typedef struct {

  int radar_id;
  string radar_name;
  polar_t polarization;    // polarization type
  double altitude;         // km
  double latitude;         // degrees
  double longitude;        // degrees
  double radar_constant;   // dB
  double xmit_peak_pwr;    // watts
  double receiver_mds;     // dBm
  double receiver_gain;    // dB
  double antenna_gain;     // dB
  double system_gain;      // dB
  
} radar_params_t;

paramdef struct radar_params_t {

  p_descr = "Default radar params. If you set a parameter to -9999, or an empty string, the value in the data stream will be used. If you set the parameter to some other value, this will override the value in the data.";

  p_help = "========== Radar params ==========\n"
  "\t\n"
  "polarization: polarization type\n"
  "altitude: km\n"
  "latitude: degrees\n"
  "longitude: degrees\n"
  "radar_constant: dB\n"
  "xmit_peak_pwr: watts\n"
  "receiver_mds: dBm\n"
  "receiver_gain: dB\n"
  "antenna_gain: dB\n"
  "system_gain: dB\n"
  "\t\n";
  
  p_default = { radar_id = 0,
		radar_name = "",
		polarization = POL_HORIZ,
                altitude = -9999,
                latitude = -9999,
                longitude = -9999,
		radar_constant = -9999,
		xmit_peak_pwr = 400000,
		receiver_mds = -9999,
		receiver_gain = -9999,
		antenna_gain = -9999,
		system_gain = -9999
  };
  
} radar;

paramdef double {
  p_default = 1.0;
  p_descr = "Short pulse width (us)";
  p_help = "Applicable if longPulseFlag is false";
} short_pulse_width_us;

paramdef double {
  p_default = 4.0;
  p_descr = "Long pulse width (us)";
  p_help = "Applicable if longPulseFlag is true";
} long_pulse_width_us;

commentdef {
  p_header = "OUTPUT FIELDS";
  p_text = "Only the following fields will included in the output. If the field is not in the input file, it will be left out.";
};

typedef enum {
  DBZ_TYPE, VEL_TYPE, WIDTH_TYPE
} field_type_t;

typedef struct {
  string name;
  string units;
  field_type_t ftype;
  int pos_in_file;
} output_fields_t;

paramdef struct output_fields_t {
  p_default = {
    { "DBZ", "dBZ", DBZ_TYPE, 0},
    { "DBZU", "dBZ", DBZ_TYPE, 1},
    { "VEL", "m/s", VEL_TYPE, 2},
    { "WIDTH", "m/s", WIDTH_TYPE, 3}
  };
  p_descr = "Field info";
  p_help = "List of fields to be output if available in the input data. pos_in_file is the index of the field in the file. This is 0-based. If this exceeds the available data in the file a WARNING will be generated and the field will be ignored. The field_type parameter is used to scale the field accordingly. DBZ fields are scaled between minDBZ and maxDBZ. VEL is scaled between -nyquist and + nyquist. WIDTH is scaled between 0 and nyquist.";
} output_fields[];

commentdef {
  p_header = "FILTERING OPTIONS";
};

paramdef boolean {
  p_default = false;
  p_descr = "For data with variable gate spacing in the volume";
  p_help = "If set, the data will be remapped to a constant gate spacing.";
} remap_to_constant_gate_spacing;

paramdef double {
  p_default = 0.125;
  p_descr = "Specified constant gate spacing - km";
  p_help = "See 'remap_to_constant_gate_spacing' above.";
} constant_gate_spacing_km;

paramdef boolean {
  p_default = false;
  p_descr = "Options to set number of output gates.";
  p_help = "If true, number of output gates is set to ngates_out. Data is either truncated or filled with missing as appropriate.";
} set_ngates_out;

paramdef int {
  p_default = 1000;
  p_descr = "Number of output gates, if set_ngates_out is true.";
  p_help = "See set_ngates_out.";
} ngates_out;

commentdef {
  p_header = "DATA OUTPUT";
};

paramdef string {
  p_descr = "Output URL for DsRadar data via FMQ";
  p_default = "fmqp:://$(HOST)::fmq/dsRadar";
} output_fmq_url;

paramdef int {
  p_default = 10000000;
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer
 will be used for control bytes (12 bytes per message).";
} output_fmq_size;

paramdef int {
  p_default = 10000;
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages wh
ich may be written to the buffer before overwrites occur. However, overwrites ma
y occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = FALSE;
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} output_fmq_compress;

paramdef int {
  p_descr = "Wait per beam (milli-secs)";
  p_default = 0;
} beam_wait_msecs;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set up the FMQ as blocking.";
  p_help = "If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, Test2Dsr will then block until there is space for more data.";
} write_blocking;

paramdef int {
  p_default = 0;
  p_descr = "time correction (secs)";
  p_help = "Seconds added to the data time, if it was incorrect.";
} time_correction;

