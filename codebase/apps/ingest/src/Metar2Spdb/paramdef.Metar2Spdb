/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/******************************************************************
 *
 * Parameter definitions for Metar2Spdb
 *
 */

commentdef {
  p_header = "Metar2Spdb reads METAR records from ASCII files, interprets the METARs, converts them to station_report_t format and writes them to an SPDB data base.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the appropriate level of detail.";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In this mode it is optional to watch for a latest_data_info file. In ARCHIVE mode, it processes all of the data files in the input directory between the start and end times set on the command line. In FILELIST mode, it processes all of the files in the list specified on the command line. In FILELIST mode paths must be fully qualified with respect to the date and time - so if each date has a separate subdirectory the date part of the path must be included.";
} mode;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "./raw/metars";
  p_descr = "Input directory";
  p_help = "Directory where input data files can be found.";
} input_dir;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Set to true if there is a latest_data_info file available in the input directory.";
  p_help = "REALTIME mode only.";
} latest_data_info_avail;

paramdef int {
  p_default = 3600;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

paramdef boolean {
  p_default = FALSE;
  p_descr = "When set, only checks input_dir for subdirs of the form YYYYMMDD";
  p_help = "Only in REALTIME mode with latest_data_info_avail FALSE.";
} strict_subdir_check;

paramdef boolean {
  p_default = FALSE;
  p_descr = "When set, check file name contains specified sub-string.";
  p_help = "See file_match_string.";
} file_name_check;

paramdef string {
  p_default = "METAR";
  p_descr = "Input filename match string";
  p_help = "Files must contain this string to be processed";
} file_match_string;

//////////////////////////////////////////////////////////
// Station selection

commentdef {
  p_header = "STATION SELECTION";
};

paramdef string {
  p_default = "./station_location.txt";
  p_descr = "Path to station location file";
  p_help = "Since the METAR reports do not contain lat/lon information, we must determine this from a separate file. The station location file should contain a four letter station identification followed by the latitude and longitude for each station to be processed. Stations not in this file will be ignored.";
} st_location_path;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set to TRUE to use the acceptedStations list (below)";
  p_help = "Only accept stations in this list.";
} useAcceptedStationsList;

paramdef string {
  p_default = {
    "RCTP", "RCFG", "RCSS", "RCGM", "RCNO", "RCQC", "RCBS"
  };
  p_descr = "List of accepted station IDs";
  p_help = "If a station is not on this list, it is not stored.";
} acceptedStations[];

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set to TRUE to use the rejectedStations list (below)";
  p_help = "Reject stations in this list.";
} useRejectedStationsList;

paramdef string {
  p_default = {
    "RCFN", "RCAY", "RCQS", "RCFS","RCMT"
  };
  p_descr = "List of rejected station IDs";
  p_help = "If a station is not on this list, it is not stored.";
} rejectedStations[];

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set to TRUE to check that METAR is within a bounding box.";
} checkBoundingBox;

typedef struct {
  double min_lat;
  double max_lat;
  double min_lon;
  double max_lon;
} bbox_t;

paramdef struct bbox_t {
  p_default = { -90.0, 90.0, -180.0, 180.0 };
  p_descr = "Bounding box to check if checkBoundingBox is TRUE.";
  p_help = "Only Metars which fall inside this box will be stored.";
} boundingBox;

typedef enum
{
  ALT_FEET,
  ALT_METERS
} alt_units_t;

paramdef enum alt_units_t
{
  p_descr = "Units used for the altitude value in the station locations file.";
  p_default = ALT_FEET;
} altUnits;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to store decoded METARS.";
  p_help = "If TRUE, decoded METARS will be written to decoded_output_url.";
} write_decoded_metars;

paramdef string {
  p_default = "spdbp:://localhost::spdb/metar";
  p_descr = "Output URL for decoded metars.";
  p_help = "See the DIDSS docs for details on URL usage.";
} decoded_output_url;

typedef enum
{
  COMPRESSION_NONE,
  COMPRESSION_GZIP,
  COMPRESSION_BZIP2
} compression_t;

paramdef enum compression_t {
  p_default = COMPRESSION_NONE;
  p_descr = "Option to compress the decoded METARS.";
  p_help = "Set desired output compression. Compression should only be done for data in which the individual chunks are large.";
} decoded_compression;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to store ASCII METARS.";
  p_help = "If TRUE, ascii METARS will be written to ascii_output_url.";
} write_ascii_metars;

paramdef string {
  p_default = "spdbp:://localhost::spdb/ascii_metar";
  p_descr = "Output URL for ASCII metars.";
  p_help = "See the DIDSS docs for details on URL usage.";
} ascii_output_url;

paramdef int {
  p_default = 7200;
  p_descr = "Expire time in seconds for each metar";
  p_help = "This value will be added to the metar time to determine the expire time for the metar";
} expire_seconds;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to guess METAR time if time field is missing.";
  p_help = "If TRUE, and time field is missing or garbled, METAR time is set to the start of the last hour. Realtime mode only.";
} guess_time_if_missing;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use date from METAR.";
  p_help = "If TRUE, date field from METAR is used to set the METAR valid time.  If FALSE, the current date is used.";
} use_metar_date;

paramdef int {
  p_default = -1;
  p_descr = "Margin in seconds for valid METARs in the past.";
  p_help = "If > 0 , METARs where (now - datefield) > valid_past_margin will be rejected.  This test is only applied if use_metar_date is TRUE";
} valid_past_margin;

paramdef int {
  p_default = -1;
  p_descr = "Margin in seconds for valid METARs in the future.";
  p_help = "If > 0 , METARs where (datefield - now) > valid_future_margin will be rejected.  This test is only applied if use_metar_date is TRUE";
} valid_future_margin;

typedef enum
{
  METAR_REPORT,
  STATION_REPORT,
  PRESSURE_STATION_REPORT,
  REPORT_PLUS_METAR_XML,
  REPORT_PLUS_FULL_XML,
  XML_ONLY,
  METAR_WITH_REMARKS_REPORT
} output_report_type_t;

paramdef enum output_report_type_t
{
  p_descr = "Type of station report to put in the output SPDB database";
  p_default = METAR_REPORT;
} output_report_type;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to dress the metar_text field with the report type (METAR/SPECI) and report ending character (=)";
  p_help = "The report type and ending character are stripped off during the process of decoding. This option allows these fields to be added back to the original raw metar text before output.";
} dress_raw_metar_text;


paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to force a put to the SPDB data base whenever the valid time changes.";
  p_help = "Normally, the data from all METARs in a file are saved as SPDB "
           "chunks in memory until the entire file has been read. "
           "Then, all of these chunks are written to the data base "
           "in a single action. "
           "This is the most efficient way to update the data base. "
           "If you set this to TRUE, all of the saved chunks will be "
           "written to the data base whenever the valid time of a "
           "METAR changes. "
           "Use this with caution, and only if you are not distributing "
           "the data to remote hosts. "
           "DO NOT do this if the SPDB data will be distributed to "
           "remote hosts. "
           "If you do, the the DsSpdbServer may not be able to spawn "
           "enough children to handle the traffic. "
           "The server has a limit to the number of children, so some of "
           "the put requests may be denied by the server and data will be lost.";
} force_put_when_valid_time_changes;

