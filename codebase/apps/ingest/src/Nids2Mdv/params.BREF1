/**********************************************************************
 * TDRP params for NidsRadial2Mdv
 **********************************************************************/

//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

///////////// malloc_debug_level //////////////////////
//
// Malloc debug level.
// 0 - none, 1 - corruption checking, 2 - records all malloc blocks and 
//   checks, 3 - printout of all mallocs etc.
// Minimum val: 0
// Maximum val: 3
// Type: int
//

malloc_debug_level = 0;

radarType = TYPE_BREF1;

///////////// no_threads //////////////////////////////
//
// No threads option. Forces single-threaded operation.
// For debugging purposes. Note that the program will handle only a 
//   single data directory in single-threaded operation.
// Type: boolean
//

no_threads = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// PROGRAM MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In realtime mode, storm_ident waits for a new input file. In archive 
//   mode, it moves through the files between the times set by the user.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// realtime_data_sets //////////////////////
//
// Array of data sets to be processed.
// The program starts a thread for each input directory. Incoming data 
//   is processed and written to the individual radar subdirectory output 
//   directory. Note that the output_dir is only used if 
//   'specify_individual_output_dirs' is set TRUE. See 
//   specify_individual_output_dirs for more details.
//
// Type: struct
//   typedef struct {
//      string input_dir;
//      string output_dir;
//      string radar_name;
//   }
//
// 1D array - variable length.
//
//   { "/d1/ldm/data/nids/uc/nids/XXXX/BREF1", "", "XXXX" },
//   { "/d1/ldm/data/nids/uc/nids/XXXX/CREF", "/d1/radar/mdv/CREF", "XXXX" },
//   { "/d1/ldm/data/nids/uc/nids/XXXX/VEL1", "/d1/radar/mdv/VEL1", "XXXX" },
//   { "/d1/ldm/data/nids/uc/nids/XXXX/VIL", "/d1/radar/mdv/VIL", "XXXX" },
// 

realtime_data_sets = {
  { "/d1/ldm/data/nids/uc/nids/KABR/BREF1", "", "KABR" },
  { "/d1/ldm/data/nids/uc/nids/KABX/BREF1", "", "KABX" },
  { "/d1/ldm/data/nids/uc/nids/KAKQ/BREF1", "", "KAKQ" },
  { "/d1/ldm/data/nids/uc/nids/KAMA/BREF1", "", "KAMA" },
  { "/d1/ldm/data/nids/uc/nids/KAMX/BREF1", "", "KAMX" },
  { "/d1/ldm/data/nids/uc/nids/KAPX/BREF1", "", "KAPX" },
  { "/d1/ldm/data/nids/uc/nids/KARX/BREF1", "", "KARX" },
  { "/d1/ldm/data/nids/uc/nids/KATX/BREF1", "", "KATX" },
  { "/d1/ldm/data/nids/uc/nids/KBBX/BREF1", "", "KBBX" },
  { "/d1/ldm/data/nids/uc/nids/KBGM/BREF1", "", "KBGM" },
  { "/d1/ldm/data/nids/uc/nids/KBHX/BREF1", "", "KBHX" },
  { "/d1/ldm/data/nids/uc/nids/KBIS/BREF1", "", "KBIS" },
  { "/d1/ldm/data/nids/uc/nids/KBLX/BREF1", "", "KBLX" },
  { "/d1/ldm/data/nids/uc/nids/KBMX/BREF1", "", "KBMX" },
  { "/d1/ldm/data/nids/uc/nids/KBOX/BREF1", "", "KBOX" },
  { "/d1/ldm/data/nids/uc/nids/KBRO/BREF1", "", "KBRO" },
  { "/d1/ldm/data/nids/uc/nids/KBUF/BREF1", "", "KBUF" },
  { "/d1/ldm/data/nids/uc/nids/KBYX/BREF1", "", "KBYX" },
  { "/d1/ldm/data/nids/uc/nids/KCAE/BREF1", "", "KCAE" },
  { "/d1/ldm/data/nids/uc/nids/KCBW/BREF1", "", "KCBW" },
  { "/d1/ldm/data/nids/uc/nids/KCBX/BREF1", "", "KCBX" },
  { "/d1/ldm/data/nids/uc/nids/KCCX/BREF1", "", "KCCX" },
  { "/d1/ldm/data/nids/uc/nids/KCLE/BREF1", "", "KCLE" },
  { "/d1/ldm/data/nids/uc/nids/KCLX/BREF1", "", "KCLX" },
  { "/d1/ldm/data/nids/uc/nids/KCRP/BREF1", "", "KCRP" },
  { "/d1/ldm/data/nids/uc/nids/KCXX/BREF1", "", "KCXX" },
  { "/d1/ldm/data/nids/uc/nids/KCYS/BREF1", "", "KCYS" },
  { "/d1/ldm/data/nids/uc/nids/KDAX/BREF1", "", "KDAX" },
  { "/d1/ldm/data/nids/uc/nids/KDDC/BREF1", "", "KDDC" },
  { "/d1/ldm/data/nids/uc/nids/KDFX/BREF1", "", "KDFX" },
  { "/d1/ldm/data/nids/uc/nids/KDIX/BREF1", "", "KDIX" },
  { "/d1/ldm/data/nids/uc/nids/KDLH/BREF1", "", "KDLH" },
  { "/d1/ldm/data/nids/uc/nids/KDMX/BREF1", "", "KDMX" },
  { "/d1/ldm/data/nids/uc/nids/KDOX/BREF1", "", "KDOX" },
  { "/d1/ldm/data/nids/uc/nids/KDTX/BREF1", "", "KDTX" },
  { "/d1/ldm/data/nids/uc/nids/KDVN/BREF1", "", "KDVN" },
  { "/d1/ldm/data/nids/uc/nids/KDYX/BREF1", "", "KDYX" },
  { "/d1/ldm/data/nids/uc/nids/KEAX/BREF1", "", "KEAX" },
  { "/d1/ldm/data/nids/uc/nids/KEMX/BREF1", "", "KEMX" },
  { "/d1/ldm/data/nids/uc/nids/KENX/BREF1", "", "KENX" },
  { "/d1/ldm/data/nids/uc/nids/KEOX/BREF1", "", "KEOX" },
  { "/d1/ldm/data/nids/uc/nids/KEPZ/BREF1", "", "KEPZ" },
  { "/d1/ldm/data/nids/uc/nids/KESX/BREF1", "", "KESX" },
  { "/d1/ldm/data/nids/uc/nids/KEVX/BREF1", "", "KEVX" },
  { "/d1/ldm/data/nids/uc/nids/KEWX/BREF1", "", "KEWX" },
  { "/d1/ldm/data/nids/uc/nids/KEYX/BREF1", "", "KEYX" },
  { "/d1/ldm/data/nids/uc/nids/KFCX/BREF1", "", "KFCX" },
  { "/d1/ldm/data/nids/uc/nids/KFDR/BREF1", "", "KFDR" },
  { "/d1/ldm/data/nids/uc/nids/KFDX/BREF1", "", "KFDX" },
  { "/d1/ldm/data/nids/uc/nids/KFFC/BREF1", "", "KFFC" },
  { "/d1/ldm/data/nids/uc/nids/KFSD/BREF1", "", "KFSD" },
  { "/d1/ldm/data/nids/uc/nids/KFSX/BREF1", "", "KFSX" },
  { "/d1/ldm/data/nids/uc/nids/KFTG/BREF1", "", "KFTG" },
  { "/d1/ldm/data/nids/uc/nids/KFWS/BREF1", "", "KFWS" },
  { "/d1/ldm/data/nids/uc/nids/KGGW/BREF1", "", "KGGW" },
  { "/d1/ldm/data/nids/uc/nids/KGJX/BREF1", "", "KGJX" },
  { "/d1/ldm/data/nids/uc/nids/KGLD/BREF1", "", "KGLD" },
  { "/d1/ldm/data/nids/uc/nids/KGRB/BREF1", "", "KGRB" },
  { "/d1/ldm/data/nids/uc/nids/KGRK/BREF1", "", "KGRK" },
  { "/d1/ldm/data/nids/uc/nids/KGRR/BREF1", "", "KGRR" },
  { "/d1/ldm/data/nids/uc/nids/KGSP/BREF1", "", "KGSP" },
  { "/d1/ldm/data/nids/uc/nids/KGWX/BREF1", "", "KGWX" },
  { "/d1/ldm/data/nids/uc/nids/KGYX/BREF1", "", "KGYX" },
  { "/d1/ldm/data/nids/uc/nids/KHDX/BREF1", "", "KHDX" },
  { "/d1/ldm/data/nids/uc/nids/KHGX/BREF1", "", "KHGX" },
  { "/d1/ldm/data/nids/uc/nids/KHNX/BREF1", "", "KHNX" },
  { "/d1/ldm/data/nids/uc/nids/KHPX/BREF1", "", "KHPX" },
  { "/d1/ldm/data/nids/uc/nids/KHTX/BREF1", "", "KHTX" },
  { "/d1/ldm/data/nids/uc/nids/KICT/BREF1", "", "KICT" },
  { "/d1/ldm/data/nids/uc/nids/KICX/BREF1", "", "KICX" },
  { "/d1/ldm/data/nids/uc/nids/KILN/BREF1", "", "KILN" },
  { "/d1/ldm/data/nids/uc/nids/KILX/BREF1", "", "KILX" },
  { "/d1/ldm/data/nids/uc/nids/KIND/BREF1", "", "KIND" },
  { "/d1/ldm/data/nids/uc/nids/KINX/BREF1", "", "KINX" },
  { "/d1/ldm/data/nids/uc/nids/KIWA/BREF1", "", "KIWA" },
  { "/d1/ldm/data/nids/uc/nids/KIWX/BREF1", "", "KIWX" },
  { "/d1/ldm/data/nids/uc/nids/KJAN/BREF1", "", "KJAN" },
  { "/d1/ldm/data/nids/uc/nids/KJAX/BREF1", "", "KJAX" },
  { "/d1/ldm/data/nids/uc/nids/KJGX/BREF1", "", "KJGX" },
  { "/d1/ldm/data/nids/uc/nids/KJKL/BREF1", "", "KJKL" },
  { "/d1/ldm/data/nids/uc/nids/KLBB/BREF1", "", "KLBB" },
  { "/d1/ldm/data/nids/uc/nids/KLCH/BREF1", "", "KLCH" },
  { "/d1/ldm/data/nids/uc/nids/KLIX/BREF1", "", "KLIX" },
  { "/d1/ldm/data/nids/uc/nids/KLNX/BREF1", "", "KLNX" },
  { "/d1/ldm/data/nids/uc/nids/KLOT/BREF1", "", "KLOT" },
  { "/d1/ldm/data/nids/uc/nids/KLRX/BREF1", "", "KLRX" },
  { "/d1/ldm/data/nids/uc/nids/KLSX/BREF1", "", "KLSX" },
  { "/d1/ldm/data/nids/uc/nids/KLTX/BREF1", "", "KLTX" },
  { "/d1/ldm/data/nids/uc/nids/KLVX/BREF1", "", "KLVX" },
  { "/d1/ldm/data/nids/uc/nids/KLWX/BREF1", "", "KLWX" },
  { "/d1/ldm/data/nids/uc/nids/KLZK/BREF1", "", "KLZK" },
  { "/d1/ldm/data/nids/uc/nids/KMAF/BREF1", "", "KMAF" },
  { "/d1/ldm/data/nids/uc/nids/KMAX/BREF1", "", "KMAX" },
  { "/d1/ldm/data/nids/uc/nids/KMBX/BREF1", "", "KMBX" },
  { "/d1/ldm/data/nids/uc/nids/KMHX/BREF1", "", "KMHX" },
  { "/d1/ldm/data/nids/uc/nids/KMKX/BREF1", "", "KMKX" },
  { "/d1/ldm/data/nids/uc/nids/KMLB/BREF1", "", "KMLB" },
  { "/d1/ldm/data/nids/uc/nids/KMOB/BREF1", "", "KMOB" },
  { "/d1/ldm/data/nids/uc/nids/KMPX/BREF1", "", "KMPX" },
  { "/d1/ldm/data/nids/uc/nids/KMQT/BREF1", "", "KMQT" },
  { "/d1/ldm/data/nids/uc/nids/KMRX/BREF1", "", "KMRX" },
  { "/d1/ldm/data/nids/uc/nids/KMSX/BREF1", "", "KMSX" },
  { "/d1/ldm/data/nids/uc/nids/KMTX/BREF1", "", "KMTX" },
  { "/d1/ldm/data/nids/uc/nids/KMUX/BREF1", "", "KMUX" },
  { "/d1/ldm/data/nids/uc/nids/KMVX/BREF1", "", "KMVX" },
  { "/d1/ldm/data/nids/uc/nids/KMXX/BREF1", "", "KMXX" },
  { "/d1/ldm/data/nids/uc/nids/KNKX/BREF1", "", "KNKX" },
  { "/d1/ldm/data/nids/uc/nids/KNQA/BREF1", "", "KNQA" },
  { "/d1/ldm/data/nids/uc/nids/KOAX/BREF1", "", "KOAX" },
  { "/d1/ldm/data/nids/uc/nids/KOHX/BREF1", "", "KOHX" },
  { "/d1/ldm/data/nids/uc/nids/KOKX/BREF1", "", "KOKX" },
  { "/d1/ldm/data/nids/uc/nids/KOTX/BREF1", "", "KOTX" },
  { "/d1/ldm/data/nids/uc/nids/KPAH/BREF1", "", "KPAH" },
  { "/d1/ldm/data/nids/uc/nids/KPBZ/BREF1", "", "KPBZ" },
  { "/d1/ldm/data/nids/uc/nids/KPDT/BREF1", "", "KPDT" },
  { "/d1/ldm/data/nids/uc/nids/KPOE/BREF1", "", "KPOE" },
  { "/d1/ldm/data/nids/uc/nids/KPUX/BREF1", "", "KPUX" },
  { "/d1/ldm/data/nids/uc/nids/KRAX/BREF1", "", "KRAX" },
  { "/d1/ldm/data/nids/uc/nids/KRGX/BREF1", "", "KRGX" },
  { "/d1/ldm/data/nids/uc/nids/KRIW/BREF1", "", "KRIW" },
  { "/d1/ldm/data/nids/uc/nids/KRLX/BREF1", "", "KRLX" },
  { "/d1/ldm/data/nids/uc/nids/KRTX/BREF1", "", "KRTX" },
  { "/d1/ldm/data/nids/uc/nids/KSFX/BREF1", "", "KSFX" },
  { "/d1/ldm/data/nids/uc/nids/KSGF/BREF1", "", "KSGF" },
  { "/d1/ldm/data/nids/uc/nids/KSHV/BREF1", "", "KSHV" },
  { "/d1/ldm/data/nids/uc/nids/KSJT/BREF1", "", "KSJT" },
  { "/d1/ldm/data/nids/uc/nids/KSOX/BREF1", "", "KSOX" },
  { "/d1/ldm/data/nids/uc/nids/KSRX/BREF1", "", "KSRX" },
  { "/d1/ldm/data/nids/uc/nids/KTBW/BREF1", "", "KTBW" },
  { "/d1/ldm/data/nids/uc/nids/KTFX/BREF1", "", "KTFX" },
  { "/d1/ldm/data/nids/uc/nids/KTLH/BREF1", "", "KTLH" },
  { "/d1/ldm/data/nids/uc/nids/KTLX/BREF1", "", "KTLX" },
  { "/d1/ldm/data/nids/uc/nids/KTWX/BREF1", "", "KTWX" },
  { "/d1/ldm/data/nids/uc/nids/KTYX/BREF1", "", "KTYX" },
  { "/d1/ldm/data/nids/uc/nids/KUDX/BREF1", "", "KUDX" },
  { "/d1/ldm/data/nids/uc/nids/KUEX/BREF1", "", "KUEX" },
  { "/d1/ldm/data/nids/uc/nids/KVAX/BREF1", "", "KVAX" },
  { "/d1/ldm/data/nids/uc/nids/KVBX/BREF1", "", "KVBX" },
  { "/d1/ldm/data/nids/uc/nids/KVNX/BREF1", "", "KVNX" },
  { "/d1/ldm/data/nids/uc/nids/KVTX/BREF1", "", "KVTX" },
  { "/d1/ldm/data/nids/uc/nids/KYUX/BREF1", "", "KYUX" },
  { "/d1/ldm/data/nids/uc/nids/PABC/BREF1", "", "PABC" },
  { "/d1/ldm/data/nids/uc/nids/PACG/BREF1", "", "PACG" },
  { "/d1/ldm/data/nids/uc/nids/PAEC/BREF1", "", "PAEC" },
  { "/d1/ldm/data/nids/uc/nids/PAHG/BREF1", "", "PAHG" },
  { "/d1/ldm/data/nids/uc/nids/PAIH/BREF1", "", "PAIH" },
  { "/d1/ldm/data/nids/uc/nids/PAKC/BREF1", "", "PAKC" },
  { "/d1/ldm/data/nids/uc/nids/PAPD/BREF1", "", "PAPD" },
  { "/d1/ldm/data/nids/uc/nids/PGUA/BREF1", "", "PGUA" },
  { "/d1/ldm/data/nids/uc/nids/PHKI/BREF1", "", "PHKI" },
  { "/d1/ldm/data/nids/uc/nids/PHKM/BREF1", "", "PHKM" },
  { "/d1/ldm/data/nids/uc/nids/PHMO/BREF1", "", "PHMO" },
  { "/d1/ldm/data/nids/uc/nids/PHWA/BREF1", "", "PHWA" },
  { "/d1/ldm/data/nids/uc/nids/TJUA/BREF1", "", "TJUA" }
};

///////////// archive_data_set ////////////////////////
//
// Archive data sets to be processed.
// The input_dir is ignored, since the file paths to be processed are 
//   specified on the command line.
//
// Type: struct
//   typedef struct {
//      string input_dir;
//      string output_dir;
//      string radar_name;
//   }
//
//

archive_data_set = { ".", "output", "no-name" };

///////////// max_realtime_data_age ///////////////////
//
// Max age (in seconds) of input data for it to be valid.
// Only used in realtime mode.
// Type: long
//

max_realtime_data_age = 360;

///////////// use_latest_data_info ////////////////////
//
// Option to use latest_data_info file to trigger input. REALTIME mode 
//   only.
// Some upstream processes, such as WsiNidsIngest, will generate 
//   latest_data_infor files. Others, such as the LDM, do not. If this 
//   option is on, each thread triggers off the lates_data_info file. If 
//   the option is off, the thread watches the directory for new files.
// Type: boolean
//

use_latest_data_info = TRUE;

///////////// get_latest_file_only ////////////////////
//
// Option to only get the latest valid file, rather than all the files 
//   younger than max_realtime_data_age.
// Only used in realtime mode and if use_latest_data_info is FALSE. If 
//   set, only the latest file will be processed. If not set, all files 
//   younger than  max_input_data_age will be processed.
// Type: boolean
//

get_latest_file_only = TRUE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// specify_individual_output_dirs //////////
//
// Option to specify the output dir for each radar.
// If true, the data will be written to the output_dir specified in the 
//   'data_sets' parameter. If false, the output_dir will be computed from 
//   the output_dir and the radar_name as follows: 
// 	output_dir = output_dir/radar_name.
// Type: boolean
//

specify_individual_output_dirs = FALSE;

///////////// global_output_dir ///////////////////////
//
// Output directory. Individual radars will be output to separate 
//   subdirectories of this directory.
// This is used if specify_individual_output_dirs is false. The program 
//   will create a subdirectory for each radar, using the radar name in 
//   lower case.
// Type: string
//

global_output_dir = "/d1/radar/mdv/BREF1";

///////////// preserve_input_geometry /////////////////
//
// Specifies if source data is radial.
// If set to TRUE, data is radial. If FALSE, data is grid.
// Type: boolean
//

preserve_input_geometry = TRUE;

///////////// output_grid /////////////////////////////
//
// Output grid dimensions.
// The grid origin will be at the radar site.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      float minx;
//      float miny;
//      float dx;
//      float dy;
//   }
//
//

output_grid = { 460, 460, -229.5, -229.5, 1, 1 };

///////////// is_radial ///////////////////////////////
//   
// Specifies if source data is radial.
// If set to TRUE, data is radial. If FALSE, data is grid.
// Type: boolean
//

is_radial = TRUE;

///////////// data_field_name_long ////////////////////
//
// field name for data -- long form.
// This value is put in the MDV field header.
// Type: string
//

data_field_name_long = "Base Reflectivity -- Lowest Elevation";

///////////// data_field_name /////////////////////////
//
// field name for data -- short form.
// This value is put in the MDV field header.
// Type: string
//

data_field_name = "bref1";

///////////// data_units //////////////////////////////
//
// data units.
// This value is put in the MDV field header.
// Type: string
//

data_units = "dbz";

///////////// data_transform //////////////////////////
//
// data transformation.
// This value is put in the MDV field header.
// Type: string
//

data_transform = "none";

///////////// data_field_code /////////////////////////
//
// field code for data.
// This value is put in the MDV field header.
// Type: int
//

data_field_code = 256;

///////////// data_scale //////////////////////////////
//
// scale value used for converting between byte values and data values.
// The byte value is calculated from the byte value using the following
//   formula: byte = (value - data_bias) / data_scale. .
// Type: double
//

data_scale = 1.0;

///////////// data_bias ///////////////////////////////
//
// bias value used for converting between byte values and data values.
// The byte value is calculated from the byte value using the following
//   formula: byte = (value - data_bias) / data_scale. .
// Type: double
//

data_bias = -100;

///////////// compute_scale_and_bias //////////////////
//
// Option to automatically compute the data scale and bias.
// If set to TRUE, the data scale and bias will automatically be
//   computed from the input data, otherwise the data_scale and data_bias
//   parameter values will be used.
// Type: boolean
//

compute_scale_and_bias = FALSE;

///////////// processing_delay ////////////////////////
//
// processing delay in seconds.
// The number of seconds to wait before processing an input file. This
//   delay allows activity on the file to finish before we start reading
//   it.
// Type: long
//

processing_delay = 0;

///////////// minimum_realtime_cycle_secs /////////////
//
// Minimum amount of time to cycle through stations. Realtime only.
// The minimum number of seconds that must elapse between the start of a 
//   cycle through the stations and the next cycle. The process will sleep 
//   until this minimum time has elapsed. This allows a delay that will 
//   only happen when a cycle results in little or no processing activity.
// Type: int
//

minimum_realtime_cycle_secs = 60;

