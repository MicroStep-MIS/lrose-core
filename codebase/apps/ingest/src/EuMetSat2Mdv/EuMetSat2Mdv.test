/**********************************************************************
 * TDRP params for EuMetSat2Mdv
 **********************************************************************/

//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_VERBOSE_2
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// PROGRAM MODES OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operation mode.
// Program may be run in two modes, archive and realtime. In realtime 
//   mode, the analysis is performed for each volume scan as it becomes 
//   available. In archive mode, the file list is obtained from the 
//   command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// realtime_input_dir //////////////////////
//
// Directory for input radar data - REALTIME mode.
// The latest_data_info file in this directory is updated each time the 
//   model adds a forecast time step to the output file.
// Type: string
//

realtime_input_dir = ".";

///////////// use_latest_data_info_file ///////////////
//
// Option to use latest_data_info file.
// It true, the program will use the _latest_data_info file for 
//   identifying the incoming data file name. If false, it will scan the 
//   input directory.
// Type: boolean
//

use_latest_data_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max age of input data - REALTIME mode.
// For realtime only - max age of input data for it to be valid. If the 
//   latest_data_info file is older than this, the program waits for new 
//   data.
// Minimum val: 0
// Type: int
//

max_realtime_valid_age = 300;

///////////// search_string ///////////////////////////
//
// Sub-string to be searched for in file path.
// If not empty, only files with paths containing this string will be 
//   ingested. As an example, this is useful for only handling files from 
//   a given channel. If the string is set to HRV, only files for the HRV 
//   channel will be processed.
// Type: string
//

search_string = "";

//======================================================================
//
// OUTPUT FIELD DEFINITIONS.
//
// Using this section, you set up a pallette of possible output field 
//   characteristics. In the OUTPUT_FILE section, you then pick which of 
//   these fields are to be included in each output file.
//
//======================================================================
 
///////////// fields //////////////////////////////////
//
// Field specification.
// Specification for possible output fields. In the output_files 
//   section, you will then choose which of these fields will be included 
//   in each output file.

//   name: name of the field
//   channel_id: channel upon which the field is based
//   units: output units
//   output_encoding: encoding for field in output file.
//
// Type: struct
//   typedef struct {
//      string name;
//      channel_id_t channel_id;
//        Options:
//          HRV
//          VIS006
//          VIS008
//          IR_016
//          IR_039
//          IR_087
//          IR_108
//          IR_120
//          WV_062
//          WV_073
//          IR_097
//          IR_134
//      output_units_t output_units;
//        Options:
//          COUNT
//          RADIANCE
//          DEG_K
//          DEG_C
//      output_encoding_t output_encoding;
//        Options:
//          OUT_INT8
//          OUT_INT16
//          OUT_FLOAT32
//   }
//
// 1D array - variable length.
//

fields = {
  {
    name = "HRV",
    channel_id = HRV,
    output_units = COUNT,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "VIS006_COUNT",
    channel_id = VIS006,
    output_units = COUNT,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "VIS006_RAD",
    channel_id = VIS006,
    output_units = RADIANCE,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "VIS008_COUNT",
    channel_id = VIS008,
    output_units = COUNT,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "VIS008_RAD",
    channel_id = VIS008,
    output_units = RADIANCE,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "IR_016_COUNT",
    channel_id = IR_016,
    output_units = COUNT,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_016_RAD",
    channel_id = IR_016,
    output_units = RADIANCE,
    output_encoding = OUT_FLOAT32
  }
  ,
  {
    name = "IR_108_COUNT",
    channel_id = IR_108,
    output_units = COUNT,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_039_RAD",
    channel_id = IR_039,
    output_units = RADIANCE,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_108_C",
    channel_id = IR_108,
    output_units = DEG_C,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_108_K",
    channel_id = IR_108,
    output_units = DEG_K,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "IR_087",
    channel_id = IR_087,
    output_units = DEG_C,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_108",
    channel_id = IR_108,
    output_units = DEG_C,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_120",
    channel_id = IR_120,
    output_units = DEG_C,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "WV_062",
    channel_id = WV_062,
    output_units = DEG_K,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "WV_073",
    channel_id = WV_073,
    output_units = DEG_C,
    output_encoding = OUT_INT16
  }
  ,
  {
    name = "IR_097",
    channel_id = IR_097,
    output_units = DEG_K,
    output_encoding = OUT_INT8
  }
  ,
  {
    name = "IR_134",
    channel_id = IR_134,
    output_units = DEG_K,
    output_encoding = OUT_INT8
  }
};

//======================================================================
//
// CALIBRATION SOURCE.
//
//======================================================================
 
///////////// calibration_source //////////////////////
//
// Source for parameter information.
// At startup, the calibration values for each channel are set from the 
//   parameter file. If the source is PARAMETER_FILE_ONLY, these 
//   calibration values are never changed. For PROLOGUE_FILE, the 
//   calibration data is updated from the Hrit prologe files. For 
//   CALIBRATION_FILE, an ASCII calibration file is read each time the 
//   calibration is needed.
//
// Type: enum
// Options:
//     PARAMETER_FILE_ONLY
//     PROLOGUE_FILE
//     CALIBRATION_FILE
//

calibration_source = PROLOGUE_FILE;

///////////// calibration_file_path ///////////////////
//
// Path for calibration file.
// See 'use_calibration_file'.
// Type: string
//

calibration_file_path = "./cal_file";

//======================================================================
//
// OUTPUT FILES.
//
//======================================================================
 
///////////// output_files ////////////////////////////
//
// Output file information.
// You create an entry for each output file required. You may set up 
//   multiple output files, on different grids and/or with different 
//   channels.

//   fields: comma-delimited list of fields
//   output_url: the URL for the output MDV files
//   projection: projection for the output grid
//   origin_lat: latitude origin for output grid, FLAT, LAMBERT only
//   origin_lon: longitude origin for output grid, FLAT, LAMBERT only
//   lambert_lat1: LAMBERT latitide 1, ignored for FLAT, LATLON
//   lambert_lat2: LAMBERT latitide 2, ignored for FLAT, LATLON
//   nx: number of grid points in x
//   ny: number of grid points in y
//   dx: grid resolution in x
//   dy: grid resolution in y
//   minx: X coord of center of SW grid cell
//   miny: Y coord of center of SW grid cell
//     Units for dx, dy, minx, miny: km for FLAT and LAMBERT
//                                   deg for LATLON.
//
// Type: struct
//   typedef struct {
//      string fields;
//      string output_url;
//      projection_t projection;
//        Options:
//          OUTPUT_PROJ_LATLON
//          OUTPUT_PROJ_LAMBERT
//          OUTPUT_PROJ_FLAT
//      double origin_lat;
//      double origin_lon;
//      double lambert_lat1;
//      double lambert_lat2;
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
// 1D array - variable length.
//

output_files = {
  {
    fields = "HRV,VIS006_COUNT,VIS008_RAD,IR_016_COUNT,IR_039_RAD,IR_087,IR_097,IR_108,IR_120,IR_134,WV_062,WV_073",
    output_url = "mdv/sat/test",
    projection = OUTPUT_PROJ_LATLON,
    origin_lat = 0,
    origin_lon = 0,
    lambert_lat1 = 0,
    lambert_lat2 = 0,
    nx = 700,
    ny = 700,
    minx = -40,
    miny = -15,
    dx = 0.1,
    dy = 0.1
  }
};

///////////// data_set_info ///////////////////////////
//
// Data set info.
// This is placed in the MDV master header for documentation purposes.
// Type: string
//

data_set_info = "This MDV file was created by EuMetSat2Mdv.";

///////////// data_set_name ///////////////////////////
//
// Data set name.
// This is placed in the MDV master header for documentation purposes.
// Type: string
//

data_set_name = "Satellite data.";

///////////// data_set_source /////////////////////////
//
// Data set source details.
// This is placed in the MDV master header for documentation purposes.
// Type: string
//

data_set_source = "Satellite data from EuMetSat.";

