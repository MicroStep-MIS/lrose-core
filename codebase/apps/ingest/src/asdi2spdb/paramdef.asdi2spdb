/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */


commentdef {
  p_header = "asdi2spdb reads the Aircraft Situation Display to \n"
	"Industry (ASDI) data from a socket or from archive rawAscii\n"
	"files. The data are then saved to either ASCII or SPDB or both.\n"
	"For SPDB data aircraft position reports are saved to SPDB and if\n"
	"decodeRoute is on departure, arrival, cancellation and route\n"
	"messages are saved to a second SPDB.\n"
	"There are two ASCII output types of which only one can be selected at a time.\n"
	"RawASCII saves the full raw ASCII text to hourly output files.\n"
	"ParsedASCII saves aircraft position reports in a simple space\n"
	"seperated format.\n\nNiles Oien May 2004.";
}


paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed.";
} debug;

paramdef string {
  p_default = "primary";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME_FILE, REALTIME_STREAM};
  p_default = REALTIME_STREAM;
  p_descr = "Operation mode";
  p_help = "Program may be run in three modes, archive, realtime from files and realtime from streams. In realtime from file mode, the conversion is performed for each input file as it becomes available. In realtime from stream mode, the input data are read from a stream (see the hostname and port parameters below). In archive mode, the file list is obtained from the command line with the -f switch.";
} mode;
      
commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "$(RAP_DATA_DIR)/$(PROJECT)/raw/Input";
  p_descr = "Input directory - top level. Set to the\n"
            "the directory in which the input files appear."
            "Used in realtime file mode only.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef string {
  p_default = "/some/directory/structure";
  p_descr = "Directory in which pre processed FAA route files are located.";
  p_help = "If decodeRoute is true the following files must be in this directory: APT.loc, ARP.loc, AWY.loc, FIX.loc, NAV.loc, and SSD.loc.  These files are created from the FAA cd and processed with faa_data_reformater.pl.";
} FaaRouteDir;

paramdef string {
  p_default = "128.117.200.202";
  p_descr = "Host name for realtime stream mode.";
  p_help = "Set to the machine which is producing the input stream.";
} hostname;

paramdef int {
  p_default = 10018;
  p_descr = "Port number for realtime stream mode.";
  p_help = "Set to the port which is producing the input stream.";
} port;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to only accept data for a certain region.";
  p_help = "Region is defined below.";
} applyRegion;

typedef struct {
	double latMin;
	double lonMin;
	double latMax;
	double lonMax;
} region_t;

paramdef struct region_t {
  p_default = {20.0, -160.0, 60.0, -70.0};
  p_private = FALSE;
  p_descr = "Limits to apply on lat,lon region to save.";
  p_help = "Used only if applyRegion is TRUE.";
} region;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to only accept data for flight IDs";
  p_help = "If TRUE, the string flightName must appear somewhere in the flightID. IE if flightName = UAL, only united flights are saved.";
} applyFlightName;

paramdef string {
  p_default = "UAL";
  p_descr = "Must match part of the flightID to save.";
  p_help = "Used only if applyFlightName is TRUE.";
} flightName;


commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to save data in SPDB format.";
} saveSPDB;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to decode routes (FZ messages).";
} decodeRoute;

paramdef string {
  p_default = "spdbp:://localhost::$(PROJECT)/spdb/asdi";
  p_descr = "URL for output SPDB data for the position data.";
} PosnOutUrl;

paramdef string {
  p_default = "spdbp:://localhost::$(PROJECT)/spdb/asdiRoute";
  p_descr = "URL for output SPDB data for the route data.";
} RouteOutUrl;

paramdef int {
  p_default = 500;
  p_descr = "Number of posn in spdb buffer before write out.";
} nPosnWrite;

paramdef int {
  p_default = 50;
  p_descr = "Number of route in spdb buffer before write out.";
} nRouteWrite;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to save the raw data in ASCII format.";
  p_help = "Use only saveRawASCII or saveParsedASCII not both!.";
} saveRawASCII;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to save the parsed data in ASCII format. "
	    "Save SPDB must also be on for saveParsedASCII.";
  p_help = "Use only saveRawASCII or saveParsedASCII not both!.";
} saveParsedASCII;

paramdef string {
  p_default = "/some/directory/structure";
  p_descr = "Directory for output ASCII data.";
} OutASCIIdir;

paramdef int {
  p_default = 1800;
  p_descr = "How long data are valid, seconds.";
} expiry;

paramdef boolean
{
  p_default = FALSE;
  p_descr = "Option to use the year and month specified in the\n"
	"param file.";
  p_help = "May be useful for reading old files in archived mode.\n"
	"Note: If reading files outputed by this program with saveRawASCII\n"
	"the date will be determined from the defualt filename, YYYYMMDD_HH.asd";
} dateSpecified;

paramdef int {
  p_default = 2004;
  p_descr = "Year to use if dateSpecified is true.";
} year;

paramdef int {
  p_default = 3;
  p_descr = "Month to use, 1 to 12, if dateSpecified is true.";
} month;
