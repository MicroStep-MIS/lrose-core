/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.NrlTpw2Mdv
 *
 * This file contains the TDRP parameter definitions for
 * NrlTpw2Mdv
 */

commentdef
{
  p_header = "NrlTpw2Mdv";
  p_text = "This program converts the Total Precipital Water netCDF files "
           "received from NRL for the OCN project into MDV format.";
};


/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = false;
} debug;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef enum
{
  FILE_LIST,
  INPUT_DIR,
  INPUT_DIR_RECURSE,
  LATEST_DATA
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "\tIn FILE_LIST mode, the program operates on the files specified "
           "on the command line.\n"
           "\tIn INPUT_DIR mode, the program will process new files as they "
           "appear in the input_dir directory.\n"
           "\tIn INPUT_DIR_RECURSE mode, the program will process new files "
           "as they appear in the input_dir directory or in any "
           "subdirectory.\n"
           "\tIn LATEST_DATA mode, the program will process new files as they "
           "appear in the _latest_data_info file in the input_dir directory.\n";
  p_default = "FILE_LIST";
} trigger_mode;

paramdef string
{
  p_descr = "Input directory";
  p_default = "$(RAP_DATA_DIR)/raw/sweepNetCDF";
} input_dir;

paramdef string
{
  p_descr = "Input filename substring";
  p_help = "Used only if trigger_mode is set to INPUT_DIR or INPUT_DIR_RECURSE. "
           "The program will only process files whose name contains "
           "this substring. "
           "Set to \"\" to process all files in the input directory.\n";
  p_default = "";
} input_substring;

paramdef string
{
  p_descr = "Input filename exclude substring";
  p_help = "Used only if trigger_mode is set to INPUT_DIR or INPUT_DIR_RECURSE. "
           "The program will not process files whose name contains "
           "this substring. "
           "Set to \"\" to process all files in the input directory.\n";
  p_default = "";
} exclude_substring;

typedef enum
{
  NRL_FILENAME,
  RAP_FILENAME
} filename_type_t;

paramdef enum filename_type_t
{
  p_descr = "Input filename convention";
  p_help = "The filenaming convention has to be specified because the file "
           "time information isn't included within the file itself so must "
           "be taken from the file name.\n"
           "\tNRL_FILENAME - The files are named using the NRL convention. "
           "The NRL convention is YYYYMMDD.HHMM.<ext>.\n"
           "\tRAP_FILENAME - The files are named using the RAP convention. "
           "The RAP convention is YYYYMMDD/HHMMSS.<ext>.\n";
  p_default = NRL_FILENAME;
} filename_type;

paramdef long
{
  p_descr = "Maximum number of seconds input files are valid.";
  p_help = "Used only if trigger_mode is set to LATEST_DATA.";
  p_default = 600;
} max_valid_secs;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::mdv/tpw";
} output_url;

typedef struct
{
  double grid_dx;
  double grid_dy;
} grid_t;

paramdef struct grid_t
{
  p_descr = "Input grid information";
  p_help = "\tgrid_dx - Grid resolution in the X direction in degrees.\n"
           "\tgrid_dy - Grid resolution in the Y direction in degrees.\n";
  p_default = { 0.22, 0.22 };
} input_grid;

paramdef boolean
{
  p_descr = "Flag indicating the ordering of the data in the netCDF file "
            "in the X direction.";
  p_help = "If true, the data is ordered left to right. "
           "If false, it's right to left.";
  p_default = true;
} input_x_left_to_right;

paramdef string
{
  p_descr = "Name of the X dimension in the netCDF file";
  p_default = "sample";
} x_dim_name;

paramdef string
{
  p_descr = "Name of the Y dimension in the netCDF file";
  p_default = "line";
} y_dim_name;
