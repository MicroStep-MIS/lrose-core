/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for WWA2Symprod
//
// Frank Hage  RAL, NCAR, Boulder, CO, USA, 80307-3000
// 
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Assigned Port number. - See libs/dsserver/src/DsLocator/DsLocator.cc";
  p_help = "The WWA2Symprod server listens on this port for client requests.";
  p_default = 5480;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Watches, Warnings and Advisories Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

paramdef boolean
{
  p_descr = "Polyline dashed flag";
  p_help = "If set, the polyline will be rendered using a dashed line "
           "rather than a solid line.";
  p_default =  false;
} polyline_dashed;

paramdef string
{
  p_descr = "Polyline color";
  p_help = "Name of color suggested for rendering the polylines.";
  p_default = "yellow";
} polyline_color;

commentdef
{
  p_header = "Line styles";
}

typedef enum
{
  LINETYPE_SOLID,
  LINETYPE_DASH,
  LINETYPE_DOT_DASH
} line_type_t;

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_default = { LINETYPE_SOLID };
} suggested_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} suggested_line_width;

typedef enum
{
  CAPSTYLE_BUTT,
  CAPSTYLE_NOT_LAST,
  CAPSTYLE_PROJECTING,
  CAPSTYLE_ROUND
} capstyle_t;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_default = { CAPSTYLE_BUTT };
} suggested_capstyle;

typedef enum
{
  JOINSTYLE_BEVEL,
  JOINSTYLE_MITER,
  JOINSTYLE_ROUND
} joinstyle_t;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_default = { JOINSTYLE_BEVEL };
} suggested_joinstyle;

paramdef boolean
{
  p_descr = "Option to plot ID at centroid of WWA Area.";
  p_help = "Default is not to do this.";
  p_default = FALSE;
} plot_id;

paramdef string
{
  p_descr = "C-style format string to use in plotting ID.";
  p_help = "Relevant only if plot_id is TRUE.";
  p_default = "%s";
} id_format_string;


typedef enum {
  VERT_ALIGN_TOP           =  1,
  VERT_ALIGN_CENTER        =  2,
  VERT_ALIGN_BOTTOM        =  3
} vert_align_t;

typedef enum {
  HORIZ_ALIGN_LEFT         =  1,
  HORIZ_ALIGN_CENTER       =  2,
  HORIZ_ALIGN_RIGHT        =  3
} horiz_align_t;

typedef struct {
  string background_color;
  string font_name;
  int font_size;
  int x_offset;
  int y_offset;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} text_item_t;

paramdef struct text_item_t {
  p_default = { "",  "fixed", 10, 0, 0, VERT_ALIGN_CENTER, HORIZ_ALIGN_CENTER };
  p_descr = "Details for id label. Relevant only if plot_id is TRUE.";
} id_label;

paramdef struct text_item_t {
  p_default = { "Black",  "fixed", 10, -50, 100, VERT_ALIGN_CENTER, HORIZ_ALIGN_LEFT };
  p_descr = "Details Watch, Warn Text";
} wwa_text;
