/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for TrecGauge2Symprod
//
// Nancy Rehak, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// Jan 2000
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5461;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "Plot current shape flag";
  p_help = "If set, the current storm shape will be sent.";
} plot_dbz_text;

paramdef boolean
{
  p_default = {TRUE};
  p_descr = "display vector flag";
  p_help = "If TRUE, the motion vector will be displayed.";
} plot_vectors;

//////////////////////////////////////////////////////////
// Vectors

commentdef
{
  p_header = "Vectors";
};

paramdef double
{
  p_descr = "Length of arrow head (km).";
  p_default = { 2.0 };
  p_min = { 0.0 };
} arrow_head_len;

paramdef double
{
  p_descr = "Half angle of arrow head (deg).";
  p_default = { 20.0 };
  p_min = { 0.0 };
  p_max = { 90.0 };
} arrow_head_half_angle;

//////////////////////////////////////////////////////////
// Colors

paramdef string
{
  p_descr = "motion vector color";
  p_help = "Name of color suggested for rendering the motion vector.";
  p_default = { "yellow" };
} vector_color;

paramdef string
{
  p_descr = "text color";
  p_help = "Name of color suggested for rendering the text.";
  p_default = { "yellow" };
} text_color;

//////////////////////////////////////////////////////////
// Fonts

commentdef
{
  p_header = "Fonts";
};

paramdef string
{
  p_descr = "text font name";
  p_help = "The name of the X font to be used when rendering the text.";
  p_default = { "8x13" };
} text_font;

//////////////////////////////////////////////////////////
// Line styles

commentdef
{
  p_header = "Line styles";
};

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_options = { LINETYPE_SOLID,
                LINETYPE_DASH,
                LINETYPE_DOT_DASH };
  p_default = { LINETYPE_SOLID };
} suggested_line_type;

paramdef int
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = 1;
} suggested_line_width;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_options = { CAPSTYLE_BUTT,
                CAPSTYLE_NOT_LAST,
                CAPSTYLE_PROJECTING,
                CAPSTYLE_ROUND };
  p_default = { CAPSTYLE_BUTT };
} suggested_capstyle;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_options = { JOINSTYLE_BEVEL,
                JOINSTYLE_MITER,
                JOINSTYLE_ROUND };
  p_default = { JOINSTYLE_BEVEL };
} suggested_joinstyle;
