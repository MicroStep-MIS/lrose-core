/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for HydroStation2Symprod
//
// Nancy Rehak, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// October 2002
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;


//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;


//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5468;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;


//////////////////////////////////////////////////////////
// Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

typedef enum
{
  WIND_SPEED_FIELD,
  WIND_DIR_FIELD,
  TEMPERATURE_FIELD,
  REL_HUM_FIELD,
  RAINFALL_FIELD,
  SOLAR_RAD_FIELD,
  PRESSURE_FIELD,
  SOIL_MOIST1_FIELD,
  SOIL_MOIST2_FIELD,
  SOIL_MOIST3_FIELD,
  SOIL_MOIST4_FIELD,
  SOIL_TEMP_FIELD
} field_t;

typedef enum
{
  VERT_ALIGN_TOP,
  VERT_ALIGN_CENTER,
  VERT_ALIGN_BOTTOM
} vert_align_t;

typedef enum
{
  HORIZ_ALIGN_LEFT,
  HORIZ_ALIGN_CENTER,
  HORIZ_ALIGN_RIGHT
} horiz_align_t;

typedef enum
{
  TEXT_NORM,
  TEXT_BOLD,
  TEXT_ITALICS,
  TEXT_SUBSCRIPT,
  TEXT_SUPERSCRIPT,
  TEXT_UNDERLINE,
  TEXT_STRIKETHROUGH
} font_style_t;

typedef struct 
{
  field_t field;
  double multiplier;
  string value_format_string;
  int x_offset;
  int y_offset;
  string font_name;
  string color_name;
  string background_color_name;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
  long font_size;
  font_style_t font_style;
} field_render_t;

paramdef struct field_render_t
{
  p_descr = "Information about how to render the field data values.";
  p_help = "After multiplying by the multiplier field data values will be rendered "
           "textually as indicated. ";
  p_default = { { RAINFALL_FIELD, 1.0, "%d mm", 5, -5,
                  "", "red", "", VERT_ALIGN_CENTER, HORIZ_ALIGN_LEFT,
                  10, TEXT_NORM } };
} field_render_list[];
