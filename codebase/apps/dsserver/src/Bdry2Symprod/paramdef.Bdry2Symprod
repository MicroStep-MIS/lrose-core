/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for Bdry2Symprod
//
// Niles Oien, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// Jan 2000
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5452;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

paramdef boolean
{
  p_descr = "display detection flag";
  p_help = "If FALSE, the detections will not be displayed.";
  p_default = { true };
} display_detections;

paramdef string
{
  p_descr = "detection color";
  p_help = "Name of color suggested for rendering the detection polyline.";
  p_default = { "purple" };
} detection_color;

paramdef boolean
{
  p_descr = "display extrapolation flag";
  p_help = "If FALSE, the extrapolations will not be displayed.";
  p_default = { true };
} display_extrapolations;

paramdef string
{
  p_descr = "extrapolation color";
  p_help = "Name of color suggested for rendering the extrapolation polyline.";
  p_default = { "blue" };
} extrapolation_color;

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_options = { LINETYPE_SOLID,
                LINETYPE_DASH,
                LINETYPE_DOT_DASH };
  p_default = { LINETYPE_SOLID };
} display_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} display_line_width;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_options = { CAPSTYLE_BUTT,
                CAPSTYLE_NOT_LAST,
                CAPSTYLE_PROJECTING,
                CAPSTYLE_ROUND };
  p_default = { CAPSTYLE_BUTT };
} display_capstyle;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_options = { JOINSTYLE_BEVEL,
                JOINSTYLE_MITER,
                JOINSTYLE_ROUND };
  p_default = { JOINSTYLE_BEVEL };
} display_joinstyle;

paramdef boolean
{
  p_descr = "display label flag";
  p_help = "If TRUE, the boundary label will be displayed with the boundary.";
  p_default = { TRUE };
} display_label;

paramdef enum LabelSource
{
  p_descr = "label source flag";
  p_help = "Label indicating where to get the label for the boundary.  For COLIDE boundaries, the label should come from the description field in the shape.  For other boundaries, I would expect the label to come from within the polyline itself since each shape is allowed to contain more than one polyline.";
  p_options = { LABEL_DESCRIP,
                LABEL_POLYLINE };
  p_default = { LABEL_POLYLINE };
} label_source;

paramdef string
{
  p_descr = "label font name";
  p_help = "The name of the X font to be used when rendering the label.";
  p_default = { "8x13" };
} label_font;

paramdef boolean
{
  p_descr = "display vector flag";
  p_help = "If TRUE, the motion vector will be displayed with the boundary.";
  p_default = { FALSE };
} display_vector;

paramdef string
{
  p_descr = "motion vector color";
  p_help = "Name of color suggested for rendering the motion vector.";
  p_default = { "purple" };
} vector_color;

paramdef long
{
  p_descr = "extrapolation seconds to use when rendering the motion vector";
  p_help = "Since we are now extrapolating the boundaries upon request, we don't know the extrapolation time period anymore.  So, we must now supply it.";
  p_default = { 0 };
  p_min = { 0 };
} extrap_secs;

paramdef double
{
  p_descr = "Vector arrowhead length in km";
  p_default = { 5.0 };
} head_length;

paramdef double
{
  p_descr = "Vector arrowhead half angle in degrees";
  p_help = "This is the angle between the arrowhead line and the vector line.";
  p_default = { 45.0 };
} head_half_angle;

paramdef boolean
{
  p_descr = "calculate extrapolations flag";
  p_help = "If TRUE, the server will calculate the extrapolation polylines rather than using the extrapolations in the database.";
  p_default = { FALSE };
} calc_extrapolations;

paramdef boolean 
{
  p_descr = "use point motion extrapolation method";
  p_help = "If TRUE, and calc_extrapolations is TRUE, extrapolate each point of the boundary based on speed of the boundary at that point.  If FALSE, the average motion vector will be used to calculate the extrapolation";
  p_default = {FALSE};
} point_extrapolations;

paramdef double
{
  p_descr = "vertex latitude shift";
  p_help = "This value is added to the latitude of each vertex in each boundary to shift the boundaries relative to a new location.";
  p_default = { 0.0 };
} latitude_shift;

paramdef double
{
  p_descr = "vertex longitude shift";
  p_help = "This value is added to the longitude of each vertex in each boundary to shift the boundaries relative to a new location.";
  p_default = { 0.0 };
} longitude_shift;

paramdef boolean
{
  p_descr = "Option to code the boundary colors from the boundary ID's";
  p_help = "May be useful for human entered boundaries. It allows CIDD\n"
	"to essentially be used as a drawing tool. If the ID is not\n"
	"specified in the color look up table (LUT) then the detection\n"
	"or extrapolation color is used as appropriate.";
  p_default = FALSE;
} take_color_from_id;

typedef struct
{
 int            bdryID;
 string         color;
} color_lut_t;
 
paramdef struct color_lut_t {
  p_descr = "Look up table for colors based on boundary ID's.\n"
	"Relevant only if take_color_from_id is TRUE.";
  p_default = {
	{0, "white" },
        {1, "cyan" },
	{2, "purple" },
        {3, "red" },
	{4, "yellow" },
        {5, "gold" },
	{6, "orange" },
        {7, "lightgreen" },
	{8, "pink" },
        {9, "lightblue" }
       };
} color_lut[];

paramdef boolean
{
  p_descr = "Flag indicating whether to display shear information";
  p_default = false;
} display_shear_info;

typedef enum
{
  SHEAR_FIELD_NUM_PTS,
  SHEAR_FIELD_ZBAR_CAPE,
  SHEAR_FIELD_MAX_SHEAR,
  SHEAR_FIELD_MEAN_SHEAR,
  SHEAR_FIELD_KMIN,
  SHEAR_FIELD_KMAX
} shear_field_t;

paramdef enum shear_field_t
{
  p_descr = "Parameter indicating which shear field to display";
  p_default = SHEAR_FIELD_MAX_SHEAR;
} shear_field_to_display;

paramdef string
{
  p_descr = "Format string for shear information";
  p_help = "For information on see \"man sprintf\".";
  p_default = "%f";
} shear_field_format_string;

paramdef string
{
  p_descr = "Shear field text color";
  p_help = "Name of color suggested for rendering the shear field.";
  p_default = { "purple" };
} shear_field_color;

paramdef double
{
  p_descr = "Minimum distance, in km, between shear points for displaying "
            "shear values.";
  p_help = "When displaying shear information, we'll start at one end of "
           "the boundary and display the specified value. "
           "We'll then follow the points through the boundary until we "
           "reach a point that is further than this distance from the "
           "previous point where we displayed a value, and we'll display "
           "the next value there.";
  p_default = 0.0;
} shear_min_distance_btwn_fields;
