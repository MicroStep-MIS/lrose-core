/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for GenPoly2Symprod
//
// Nancy Rehak, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// December 2003
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5472;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

paramdef boolean
{
  p_descr = "Polyline dashed flag";
  p_help = "If set, the polyline will be rendered using a dashed line "
           "rather than a solid line.";
  p_default =  false;
} polyline_dashed;

paramdef string
{
  p_descr = "Polyline color";
  p_help = "Name of color suggested for rendering the polylines.";
  p_default = "yellow";
} polyline_color;

paramdef boolean
{
  p_descr = "Polyline color mapped";
  p_help = "TRUE to map colors using mapping function";
  p_default = FALSE;
} polyline_color_mapped;

paramdef double
{
  p_descr = "Polyline color mapping";
  p_help = "x values (in the 1DVal(0) value)";
  p_default = {};
} polyline_color_mapped_x[];

paramdef string
{
  p_descr = "Polyline color mapping";
  p_help = "y values (a color)";
  p_default = {};
} polyline_color_mapped_y[];

commentdef
{
  p_header = "Line styles";
}

typedef enum
{
  LINETYPE_SOLID,
  LINETYPE_DASH,
  LINETYPE_DOT_DASH
} line_type_t;

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_default = { LINETYPE_SOLID };
} suggested_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} suggested_line_width;

paramdef long
{
  p_descr = "display arrow line width";
  p_help = "Line width suggested for using on the arrow display.";
  p_default = { 2 };
} suggested_arrow_line_width;

typedef enum
{
  CAPSTYLE_BUTT,
  CAPSTYLE_NOT_LAST,
  CAPSTYLE_PROJECTING,
  CAPSTYLE_ROUND
} capstyle_t;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_default = { CAPSTYLE_BUTT };
} suggested_capstyle;

typedef enum
{
  JOINSTYLE_BEVEL,
  JOINSTYLE_MITER,
  JOINSTYLE_ROUND
} joinstyle_t;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_default = { JOINSTYLE_BEVEL };
} suggested_joinstyle;

commentdef
{
  p_header = "Field values";
}

typedef enum {
  VERT_ALIGN_TOP           =  1,
  VERT_ALIGN_CENTER        =  2,
  VERT_ALIGN_BOTTOM        =  3
} vert_align_t;

typedef enum {
  HORIZ_ALIGN_LEFT         =  1,
  HORIZ_ALIGN_CENTER       =  2,
  HORIZ_ALIGN_RIGHT        =  3
} horiz_align_t;

typedef struct
{
  string field_name;
  string format_string;
  boolean display_units;
  string text_color;
  string background_color;
  int x_offset;
  int y_offset;
  string font_name;
  int font_size;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} field_display_t;

paramdef struct field_display_t
{
  p_descr = "Value fields to display with each polygon";
  p_help = "\tfield_name - The name of the field in the GenPoly database. "
           "This name must match the name in the database exactly. "
           "If the field isn't found, nothing is displayed.\n"
           "\tformat_string - The printf format string to use when "
           "displaying the field.\n";
           "\tdisplay_units - Flag indicating whether to display the units "
           "as stored in the database. "
           "If you don't like the text used for the units in the database, "
           "you can specify the units to display in the format_string field.\n"
           "\ttext_color - Color to use for the text.\n"
           "\tbackground_color - Color to use for the background.\n"
           "\tx_offset - X offset, in pixels, of the location to display the "
           "text. "
           "The text is displayed at this offset from the polygon centroid.\n"
           "\ty_offset - Y offset, in pixels, of the location to display the "
           "text. "
           "The text is displayed at this offset from the polygon centroid.\n"
           "\tfont_name - Name of the font to use for the text.\n"
           "\tfont_size - Size of the font to use for the text.\n"
           "\tvert_align - Vertical alignment to use for the text.\n"
           "\thoriz_align - Horizontal alignment to use for the text.\n";
  p_default = { };
} display_fields[];

paramdef boolean
{
  p_descr = "Option to make field names part of the displayed fields.";
  p_help = "Default is not to do this, but it does "
      "help differentiate between the fields.";
  p_default = FALSE;
} show_field_names;



typedef struct
{
  boolean displayGenTime;
  boolean displayValidTime;
  boolean displayExpireTime;
  string text_color;
  string background_color;
  int x_offset;
  int y_offset;
  string font_name;
  int font_size;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} time_display_t;

paramdef struct time_display_t
{
  p_descr = "Value fields to display with each polygon";
  p_help = "\tdisplayGenTime - option to display issue time.\n"
	   "\t  Requires that a leadTime in seconds be saved\n"
	   "\t  as a field in the GenPoly.\n"
	   "\tdisplayValidTime - option to display valid time.\n"
           "\tdisplayExpireTime - option to display expire time.\n"
           "\ttext_color - Color to use for the text.\n"
           "\tbackground_color - Color to use for the background.\n"
           "\tx_offset - X offset, in pixels, of the location to display the "
           "text. "
           "The text is displayed at this offset from the polygon centroid.\n"
           "\ty_offset - Y offset, in pixels, of the location to display the "
           "text. "
           "The text is displayed at this offset from the polygon centroid.\n"
           "\tfont_name - Name of the font to use for the text.\n"
           "\tfont_size - Size of the font to use for the text.\n"
           "\tvert_align - Vertical alignment to use for the text.\n"
           "\thoriz_align - Horizontal alignment to use for the text.\n";
  p_default = { FALSE, FALSE, FALSE, "red", "", 0, 0, "fixed", 12, VERT_ALIGN_CENTER, HORIZ_ALIGN_LEFT };
} display_time;



commentdef
{
  p_header = "Vectors";
}

paramdef boolean
{
  p_descr = "Plot vector flag";
  p_help = "If set, the forecast vector associated with each polygon "
           "will be plotted";
  p_default = FALSE;
} plot_vectors;

paramdef long
{
  p_descr = "Forecast lead time (secs).";
  p_help = "Lead time for forecast vectors.";
  p_default = 1800;
} forecast_lead_time;

typedef struct
{
  boolean use_speed_dir_fields;
  string speed_field_name;
  string dir_field_name;
  string u_field_name;
  string v_field_name;
} vector_field_names_t;

paramdef struct vector_field_names_t
{
  p_descr = "The field names in the GenPoly SPDB database that give the "
            "vector information.";
  p_help = "\tuse_speed_dir_fields - Flag indicating which type of fields "
           "have the vector information. "
           "If true, the speed_field_name and dir_field_name parameters "
           "are used for getting the vector information.\n"
           "If false, the u_field_name and v_field_name parameters are used.\n"
           "\tspeed_field_name - The name of the field that contains the "
           "speed value. "
           "The speed value is assumed to be in km/hr.\n"
           "\tdir_field_name - The name of the field that contains the "
           "direction value. "
           "The direction is assumed to be in degN.\n"
           "\tu_field_name - The name of the field that contains the U "
           "value. "
           "The U value is assumed to be in m/s.\n"
           "\tv_field_name - The name of the field that contains the V "
           "value. "
           "The V value is assumed to be in m/s.\n";
  p_default = { true, "speed", "dir", "U", "V" };
} vector_field_names;

paramdef string
{
  p_descr = "Motion vector color.";
  p_help = "Name of color suggested for rendering the motion vector.";
  p_default = "yellow";
} vector_color;

paramdef double
{
  p_descr = "Length of arrow head (km).";
  p_default = 2.0;
  p_min = 0.0;
} arrow_head_len;

paramdef double
{
  p_descr = "Half angle of arrow head (deg).";
  p_default = 20.0;
  p_min = 0.0;
  p_max = 90.0;
} arrow_head_half_angle;

paramdef boolean
{
  p_descr = "Fixed length arrows flag";
  p_help = "If flag set, direction arrows are of fixed length. "
           "If not set, arrows are scaled to length for time "
           "forecast_lead_time.";
  p_default = FALSE;
} fixed_length_arrows;

paramdef double
{
  p_descr = "Shaft length arrow head (km).";
  p_help = "This is used if fixed_length_arrows is TRUE.";
  p_default = 20.0;
  p_min = 0.0;
} arrow_shaft_length;

paramdef boolean
{
  p_descr = "Option to plot ID at centroid of polyline.";
  p_help = "Default is not to do this.";
  p_default = FALSE;
} plot_genpoly_id;

paramdef string
{
  p_descr = "C-style format string to use in plotting ID.";
  p_help = "Relevant only if plot_genpoly_id is TRUE.";
  p_default = "ID : %d";
} id_format_string;

typedef struct {
  string background_color;
  string font_name;
  int font_size;
  int x_offset;
  int y_offset;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} text_item_t;

paramdef struct text_item_t {
  p_default = { "",  "fixed", 10, 0, 0, VERT_ALIGN_CENTER, HORIZ_ALIGN_CENTER };
  p_descr = "Details for id label. Relevant only if plot_genpoly_id is TRUE.";
} id_label;

paramdef boolean
{
  p_descr = "Plot text";
  p_help = "If set, the text content of the GenPoly will be plotted at the centroid of the polygon";
  p_default = FALSE;
} plot_text;

typedef struct
{
  string text_color;
  string background_color;
  int x_offset;
  int y_offset;
  string font_name;
  int font_size;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} text_display_t;

paramdef struct text_display_t
{
  p_descr = "Text formatting, for when plot_text=TRUE";
  p_help = "\ttext_color - Color to use for the text.\n"
           "\tbackground_color - Color to use for the background.\n"
           "\tx_offset - X offset, in pixels, of the location to display the "
           "text. "
           "The text is displayed at this offset from the polygon centroid.\n"
           "\ty_offset - Y offset, in pixels, of the location to display the "
           "text. "
           "The text is displayed at this offset from the polygon centroid.\n"
           "\tfont_name - Name of the font to use for the text.\n"
           "\tfont_size - Size of the font to use for the text.\n"
           "\tvert_align - Vertical alignment to use for the text.\n"
           "\thoriz_align - Horizontal alignment to use for the text.\n";
  p_default = 
    {"black","white", 0,0,"fixed",2,VERT_ALIGN_CENTER,HORIZ_ALIGN_CENTER};
} text_info;


paramdef boolean {
	
 p_descr = "Option to do rendering for MODE/MET gen polys";	
 p_default = false;	

}render_met_mode;
