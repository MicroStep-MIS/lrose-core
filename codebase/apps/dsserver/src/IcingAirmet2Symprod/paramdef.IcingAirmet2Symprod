/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for Tstorms2Symprod
//
// Nancy Rehak, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// March 1999
//

//////////////////////////////////////////////////////////
// Debugging

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = DEBUG_OFF;
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef {
  p_header = "PROCESS CONTROL";
}

paramdef string {
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean {
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef {
  p_header = "SERVER MANAGER";
};

paramdef int {
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5460;
} port;
  
paramdef int {
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int {
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Rendering


//note: I think the current/forecast stuff below will go away.
// a different config file will be used for each, and a seperate
// spdb url will be used for each
commentdef {
  p_header = "PLOT COLOR";
};

paramdef string {
  p_descr = "Airmet color";
  p_help = "Color for current airmet shapes.";
  p_default = "yellow";
} airmet_color;



commentdef {
  p_header = "PLOT CURRENT SHAPE";
};

paramdef boolean {
  p_descr = "Plot current shape";
  p_help = "If set, the current Icing Airmet shape will be sent.";
  p_default = TRUE;
} plot_current;

paramdef string {
  p_descr = "current color";
  p_help = "Color for current airmet shapes.";
  p_default = "yellow";
} current_color;

commentdef {
  p_header = "PLOT FORECAST SHAPE";
};

paramdef boolean {
  p_descr = "Plot forecast shape";
  p_help = "If set, the forecast airmet shape will be sent.";
  p_default = TRUE;
} plot_forecast;

paramdef string {
  p_descr = "forecast color";
  p_help = "Color for forecast airmet shapes.";
  p_default = "red";
} forecast_color;



commentdef {
  p_header = "TEXT PLOTTING";
  p_text = "Text plotted relative to the airmet location.";
};

paramdef boolean {
  p_descr = "Plot text labels?";
  p_help = "Allows you to turn all text products off. This controls all non-hidden text plotting. The default is TRUE for backward compatibility.";
  p_default = TRUE;
} plot_text;

paramdef string {
  p_descr = "Color of text plotted next to airmet position";
  p_default = "yellow";
} text_color;

paramdef string {
  p_descr = "text background color";
  p_help = "Color for text background. "
    "Set to blank string (the default) to plot the text with no background.";
  p_default = "";
} text_background_color;

paramdef int {
  p_descr = "Horizontal offset, pixels.";
  p_help = "Option to move text to either side of the centroid. "
	"If this is negative the  text moves to the left rather than the right.";
  p_default = 10;
} plot_text_horizontal_offset;


paramdef int {
  p_descr = "Vertical line spacing, pixels.";
  p_help = "The Ceiling and floor are drawn vertically "
        "above each other on the display, separated by plot_text_line_offset "
        "pixels in the vertical. If this is negative then the column of "
        "numbers will ascend rather than descend on the display. ";
  p_default = 10;
} plot_text_line_offset;



paramdef string {
  p_descr = "text font name";
  p_help = "The name of the X font to be used when rendering the text.";
  p_default = "8x13";
} text_font;

paramdef int {
  p_descr = "text font size";
  p_help = "The size of the font to be used when rendering the text.";
  p_default = 13;
} text_font_size;


commentdef {
  p_header = "POLYGON SMOOTHING - not implemented yet!!";
}

paramdef boolean {
  p_descr = "Smooth the storm polygon";
  p_help = "If TRUE, the storm polygon will "
           "be smoothed within the boundaries defined by inner_bnd_multiplier "
           "and outer_bnd_multiplier."
	   "\nNOT YET IMPLEMENTED";
  p_default = FALSE;
} hull_smooth;

paramdef double {
  p_descr = "Inner boundary multiplier for storm smoothing";
  p_help = "Multipliers less than 1.0 produce an inner boundary smaller "
           "than the original storm. Multipliers greater than 1.0 "
           "produce an inner boundary larger than the original storm. "
           "inner_bnd_multiplier must be <= outer_bnd_multiplier"
	   "\nNOT YET IMPLEMENTED";
  p_min = 0.0;
  p_default = 1.0;
} inner_bnd_multiplier;

paramdef double {
  p_descr = "Outer boundary multiplier for storm smoothing";
  p_help = "Multipliers less than 1.0 produce an outer boundary smaller "
           "than the original storm. Multipliers greater than 1.0 "
           "produce an outer boundary larger than the original storm. "
           "outer_bnd_multiplier must be >= inner_bnd_multiplier"
	   "\nNOT YET IMPLEMENTED";
  p_min = 0.0;
  p_default = 1.0;
} outer_bnd_multiplier;

commentdef {
  p_header = "LINE STYLES";
  p_text = "For airmet polygons";
}

typedef enum {
  LINETYPE_SOLID,
  LINETYPE_DASH,
  LINETYPE_DOT_DASH
} line_type_t;

paramdef enum line_type_t {
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_default = LINETYPE_SOLID;
} suggested_line_type;

paramdef long {
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = 1;
} suggested_line_width;

typedef enum {
  CAPSTYLE_BUTT,
  CAPSTYLE_NOT_LAST,
  CAPSTYLE_PROJECTING,
  CAPSTYLE_ROUND
} capstyle_t;

paramdef enum capstyle_t {
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_default = CAPSTYLE_BUTT;
} suggested_capstyle;

typedef enum {
  JOINSTYLE_BEVEL,
  JOINSTYLE_MITER,
  JOINSTYLE_ROUND
} joinstyle_t;

paramdef enum joinstyle_t {
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_default = JOINSTYLE_BEVEL;
} suggested_joinstyle;

commentdef {
  p_header = "HIDDEN TEXT";
}

paramdef boolean {
  p_descr = "Option to include hidden text instead of plotting it directly";
  p_help = "If set, text will be hidden. Mouse-over events reveal the text.";
  p_default = FALSE;
} plot_hidden_text;

paramdef int {
  p_descr = "X offset for hidden text (pixels).";
  p_default = 0;
} hidden_text_x_offset;

paramdef int {
  p_descr = "Y offset for hidden text (pixels).";
  p_default = 0;
} hidden_text_y_offset;

paramdef string {
  p_descr = "hidden text font name";
  p_help = "The name of the X font to be used when rendering the text.";
  p_default = "fixed";
} hidden_text_font_name;

paramdef int {
  p_descr = "Font size for hidden text (pixels).";
  p_default = 10;
} hidden_text_font_size;

typedef enum {
  VERT_ALIGN_TOP,
  VERT_ALIGN_CENTER,
  VERT_ALIGN_BOTTOM
} vert_align_t;

paramdef enum vert_align_t {
  p_descr = "Vertical alignment hidden text.";
  p_default = VERT_ALIGN_CENTER;
} hidden_text_vert_align;

typedef enum {
  HORIZ_ALIGN_LEFT,
  HORIZ_ALIGN_CENTER,
  HORIZ_ALIGN_RIGHT
} horiz_align_t;

paramdef enum horiz_align_t {
  p_descr = "Horizontal alignment for hidden text.";
  p_default = HORIZ_ALIGN_CENTER;
} hidden_text_horiz_align;

paramdef string {
  p_descr = "Hidden text foreground color.";
  p_help = "Set to empty string to use AIRMET product color.";
  p_default = "";
} hidden_text_foreground_color;

paramdef string {
  p_descr = "Hidden text background color.";
  p_help = "Set to empty string to use display background color.";
  p_default = "gray20";
} hidden_text_background_color;

