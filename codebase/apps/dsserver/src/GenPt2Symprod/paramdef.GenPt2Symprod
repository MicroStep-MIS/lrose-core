/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for GenPt2Symprod
//
// Nancy Rehak, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// July 2000
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;


//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;


//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5465;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;


//////////////////////////////////////////////////////////
// Rendering

commentdef
{
  p_header = "TEXT RENDERING PARAMETERS";
};

paramdef boolean
{	
  p_descr = "Option to put textual output of field values in output.\n"
	"If you only want crosses at the GenPt locations,\n"
	"with no text, set this to FALSE and set draw_crosses\n"
	"to TRUE";

  p_default = TRUE;
} do_text_labelling;


paramdef boolean
{	
  p_descr = "Option to Prepend the Generic Point's Text Label in output\n";
  p_default = TRUE;
} add_point_text;

paramdef string
{
  p_descr = "Text color. Also determines color of cross\n"
	 "icons if draw_crosses is TRUE.";
  p_default = "red";
} text_color;

paramdef string
{
  p_descr = "Text background color.";
  p_help = "Set to empty string to use display background color.";
  p_default = "";
} text_background_color;

paramdef string
{
  p_descr = "Font name.";
  p_default = "";
} font_name;

typedef struct
{
  long x;
  long y;
} text_offset_t;

paramdef struct text_offset_t
{
  p_descr = "Pixel offset values for starting the text";
  p_default = { 0, 0 };
} text_offset;

typedef enum
{
  VERT_ALIGN_TOP,
  VERT_ALIGN_CENTER,
  VERT_ALIGN_BOTTOM
} vert_align_t;

paramdef enum vert_align_t
{
  p_descr = "Vertical alignment for the text";
  p_default = VERT_ALIGN_CENTER;
} text_vert_align;

typedef enum
{
  HORIZ_ALIGN_LEFT,
  HORIZ_ALIGN_CENTER,
  HORIZ_ALIGN_RIGHT
} horiz_align_t;

paramdef enum horiz_align_t
{
  p_descr = "Horizontal alignment for the text";
  p_default = HORIZ_ALIGN_CENTER;
} text_horiz_align;

paramdef long
{
  p_descr = "Size of font to use for text";
  p_default = 0;
} text_font_size;

paramdef long
{
  p_descr = "If Product is a ComboPt, take Gen pt from side 1  or 2 ";
  p_descr = "Not used for single Genpt Products";
  p_min = 1;
  p_max = 2;
  p_default = 1;
} combopt_side;

typedef enum
{
  TEXT_NORM,
  TEXT_BOLD,
  TEXT_ITALICS,
  TEXT_SUBSCRIPT,
  TEXT_SUPERSCRIPT,
  TEXT_UNDERLINE,
  TEXT_STRIKETHROUGH
} font_style_t;

paramdef enum font_style_t
{
  p_descr = "Font style for the text";
  p_default = TEXT_NORM;
} text_font_style;

typedef struct
{
  string name;
  double multiplier;
} field_info_t;

paramdef struct field_info_t
{
  p_descr = "List of information about fields to display.";
  p_help = "\tname - The name of the field to display. "
           "Must appear exactly as it appears in the SPDB database.\n"
           "\tmultiplier - Database values are multiplied by this value "
           "before they are displayed. "
           "This is used to change units of the displayed value, if "
           "desired.\n";
} field_info[];

paramdef string
{
  p_descr = "The printf() format string to use when formating the data values "
            "for display.";
  p_default = "%f";
} value_format_string;

paramdef string
{
  p_descr = "Delimiter to use between field values if there are more than "
            "one.";
  p_default = ",";
} field_delim;

paramdef string
{
  p_descr = "Missing field value indicator.";
  p_help = "This string will be displayed in place of any field value that "
           "is not found in the SPDB database.";
  p_default = "*";
} missing_value_string;


//
// Option to draw crosses at GenPt locations.
//
commentdef
{
  p_header = "CROSS RENDERING PARAMETERS";
};


paramdef boolean
{
  p_descr = "Option to draw crosses at the site of each GenPt.";
  p_help = "Useful for storm initiation data. The text_color\n"
	"parameter also determines the color of the crosses.\n"
	"To draw crosses without text, set do_text_labelling\n"
	"to FALSE.";
  p_default = FALSE;
} draw_crosses;

paramdef int
{
  p_descr = "Line thickness of icon lines used in drawing crosses.";
  p_help = "Only relevant if draw_crosses is TRUE.";
  p_default = 1;
} cross_line_width;

paramdef int
{
  p_descr = "If GenPts are represented by a cross, this\n"
	"is the length of each arm of the cross in pixels.";
  p_help = "Only relevant if draw_crosses is TRUE.";
  p_default = 4;
} cross_icon_size;

commentdef
{
  p_header = "TIME LABELLING PARAMETERS";
};

paramdef boolean
{
  p_descr = "Option to add a text label representing the time\n"
	"of each GenPt to the display. The text_color parameter\n"
	"determines the color of the text used.";
  p_help = "Useful for StormInitLocation data. ";
  p_default = FALSE;
} do_time_labelling;

typedef enum
{
  TIME_LABEL_HHMM,
  TIME_LABEL_HHMMSS,
  TIME_LABEL_YYYYMMDDHHMMSS
} time_format_t;

paramdef enum time_format_t
{
  p_descr = "Time label format";
  p_help = "Only relevant if do_time_labelling is TRUE";
  p_default = { TIME_LABEL_HHMM };
} time_format;

paramdef struct text_offset_t
{
  p_descr = "Pixel offset values for starting the time labelling text";
  p_help = "Only relevant if do_time_labelling is TRUE";
  p_default = { 0, 0 };
} time_text_offset;

paramdef boolean
{
  p_descr = "If this is set, then the server will look in the GenPt for\n"
	"a field named saveTime. If this is found, it will be taken\n"
	"to be the time the data were saved (in seconds since January 1 1970)\n"
	"and it will be displayed.";
  p_help = "Added by Niles Oien for StormInitLocation work.";
  p_default = FALSE;
} show_SaveTime;

paramdef struct text_offset_t
{
  p_descr = "Pixel offset values for starting the delay text";
  p_help = "Only relevant if show_delay is TRUE";
  p_default = { 0, 0 };
} delay_text_offset;


//
// Option to color code icons based on GetPt values - Added
// by Niles Oien on Cindy Mueller's suggestion, October 2002.
//
commentdef
{
  p_header = "COLOR THRESHOLDING PARAMETERS";
};


paramdef boolean
{
  p_descr = "Option to use thresholding to determine display colors.";
  p_help = "Allows the user to effectively set up a color scale\n"
	"based on a physical value saved in the GenPt.\n\n"
	"Note that if the requested threshold variable is not found\n"
	"in the GenPt, or if it is found but it lies outside of\n"
	"the specified color thresholds, then the default text_color\n"
	"will be used in the rendering of crosses and their labelling.";
  p_default = FALSE;
} do_color_thresholding;

paramdef string
{
  p_descr = "Field name to do color thresholding on. Relevant only\n"
	"if do_color_thresholding is TRUE.";
  p_help =  "Typically set to 'duration' or 'area_max' for storm\n"
	"initialization work. NOTE : if this is set to 'dataAge' then\n"
	"the color coding is done based on the data age in seconds\n"
	"rather than an actual field. If this option is selected for\n"
	"use with CIDD, then the CIDD symprod parameter short_requests\n"
	"should be set to TRUE so that the end of the data interval can\n"
	"be set correctly.";
  p_default = "duration";
} color_threshold_field_name;

typedef struct
{
  double minval;
  double maxval;
  string color;
} threshold_t;

paramdef struct threshold_t
{
  p_descr = "Threshold ranges and colors. Relevant only if\n"
	"do_color_thesholding is TRUE. The lower bound is\n"
	"inclusive, the upper bound is exclusive.";
  p_default = {
		{ 0, 30, "green" },
		{ 30, 60, "cyan" },
		{ 60, 10000, "white" }
	};
} color_thesholds[];


//////////////////////////////////////////////////////////
// Data timing parameters

commentdef
{
  p_header = "DATA TIMING PARAMETERS";
  p_comment = "These parameters control the data times used for requesting "
              "data from the database.";
};

typedef enum
{
  TIMING_NORMAL,
  TIMING_DAILY
} timing_type_t;

paramdef enum timing_type_t
{
  p_descr = "Type of timing to use in data requests";
  p_help = "\tTIMING_NORMAL - This is the option that will be used most often. "
           "In this mode, the client requests are satisfied as requested.\n"
           "\tTIMING_DAILY - In this mode, the server will return all products "
           "for the request that are valid from 0Z of the request time through "
           "the actual request time.\n";
  p_default = TIMING_NORMAL;
} timing_type;
