/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for Edr2Symprod
//
// Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
//
// Jan 2005
//
//
//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
  p_default = 5467;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Clipping

commentdef
{
  p_header = "CLIPPING PARAMETERS";
};

paramdef boolean
{
  p_descr = "Option to only include edr within certain flight level limits.";
  p_default = FALSE;
} apply_flight_level_limits;

paramdef boolean
{
   p_descr = "Option to only include edr with qcConf == 1.";
   p_default = FALSE;
} apply_qcConf_filtering;

paramdef int
{
  p_descr = "Min flight level (altitude(ft)/100).";
  p_help = "See apply_flight_level_limits.";
  p_default = 0;
} min_flight_level;

paramdef int
{
  p_descr = "Max flight level (altitude(ft)/100).";
  p_help = "See apply_flight_level_limits.";
  p_default = 0;
} max_flight_level;

paramdef boolean
{
  p_descr = "Option to only include edr within given bounding box.";
  p_default = FALSE;
} apply_lat_lon_limits;

paramdef int
{
  p_descr = "Min latitude (deg).";
  p_help = "See apply_lat_lon_limits.";
  p_default = 0;
} min_lat;

paramdef int
{
  p_descr = "Min longitude (deg).";
  p_help = "See apply_lat_lon_limits.";
  p_default = 0;
} min_lon;

paramdef int
{
  p_descr = "Max latitude (deg).";
  p_help = "See apply_lat_lon_limits.";
  p_default = 0;
} max_lat;

paramdef int
{
  p_descr = "Max longitude (deg).";
  p_help = "See apply_lat_lon_limits.";
  p_default = 0;
} max_lon;

//////////////////////////////////////////////////////////
// Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

paramdef boolean
{
  p_descr = "Option to not scale the product with zoom state.";
  p_help = "If true, the product is always rendered at the same scale, regardless of zoom state. If false, the product is scaled down on the screen as the zoome expands, and is scaled up as you zoom in.";
  p_default = true;
} plot_unscaled;

commentdef
{
  p_header = "POSITION ICONS";
};

//
// Icon
//

paramdef boolean
{
  p_descr = "Option to plot icons.";
  p_help = "If true, a triangle-shaped icon is drawn first, and then text is put over it. This is useful for large domains because you can see the icon even when the text is not displayed.";
  p_default = TRUE;
} plot_icon;

paramdef int
{
  p_descr = "Size of icon in pixels";
  p_help = "Edr is represented by a triangle. This is the distance from the center to each extremity of the triangle shape.";
  p_default = 5;
} icon_size;

paramdef boolean
{
  p_descr = "Option to use edr Average for color of triangle.";
  p_help = "If true, the triangle color will be based on the edr Average.  If false, the triangle color will be based on the edr Peak.";
  p_default = FALSE;
} use_edrAve;

paramdef int {
    p_default = 4;
    p_descr = "Number of different Edr colors.";
} NumEdrVals;

paramdef float {
    p_default = { 0.05, 0.15, 0.25, 1.0 };
    p_descr = "Maximum Edr value for each EdrColors.";
    p_help = "Must be the size of NumEdrVals.";
} EdrMaxVals[];

paramdef char* {
    p_default = { "cyan", "yellow", "orange", "red" };
    p_descr = "Color for Edr with value EdrMaxVals.";
    p_help = "Must be the size of NumEdrVals.";
} EdrColors[];


//////////////////////////////////////////////////////////
// Text rendering

commentdef
{
  p_header = "TEXT";
};

typedef enum {
  VERT_ALIGN_TOP           =  1,
  VERT_ALIGN_CENTER        =  2,
  VERT_ALIGN_BOTTOM        =  3
} vert_align_t;

typedef enum {
  HORIZ_ALIGN_LEFT         =  1,
  HORIZ_ALIGN_CENTER       =  2,
  HORIZ_ALIGN_RIGHT        =  3
} horiz_align_t;

typedef struct {
  boolean do_draw;
  string color;
  string background_color;
  string font_name;
  int font_size;
  int x_offset;
  int y_offset;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} text_item_t;

commentdef {
  p_header = "Text labels";
  p_text =
    "The following are specified for each text label:\n"
    "\tdo_draw: option to draw the label, true or false\n"
    "\tcolor: foreground color\n"
    "\tbackground_color: background color - if empty, no background\n"
    "\tfont_name: name of font family\n"
    "\tfont_size: suggest size in pixels\n"
    "\tx_offset: x offset from station location in pixels\n"
    "\ty_offset: y offset from station location in pixels\n"
    "\tvert_align: vert justification of text relative to offset point\n"
    "\thoriz_align: horiz justification of text relative to offset point\n";
};

paramdef struct text_item_t {
  p_default = { TRUE, "green", "", "8x13", 10, -2, -2, VERT_ALIGN_TOP, HORIZ_ALIGN_RIGHT };
  p_descr = "Details for flight num label.";
} flight_num_label;
  
paramdef struct text_item_t {
  p_default = { TRUE, "green", "", "8x13", 10, 2, -2, VERT_ALIGN_TOP, HORIZ_ALIGN_LEFT };
  p_descr = "Details for flight level label.";
} flight_level_label;
  
paramdef struct text_item_t {
  p_default = { TRUE, "green", "", "8x13", 10, 2, -15, VERT_ALIGN_TOP, HORIZ_ALIGN_LEFT };
  p_descr = "Details for edr average label.";
} edr_ave_label;
  
paramdef struct text_item_t {
  p_default = { TRUE, "green", "", "8x13", 10, -2, -15, VERT_ALIGN_TOP, HORIZ_ALIGN_RIGHT };
  p_descr = "Details for edr peak label.";
} edr_peak_label;

paramdef struct text_item_t {
  p_default = { FALSE, "gray", "", "8x13", 10, -4, -15, VERT_ALIGN_TOP, HORIZ_ALIGN_RIGHT };
  p_descr = "Details for temperature label.";
} temperature_label;
  
paramdef struct text_item_t {
  p_default = { FALSE, "gray", "", "8x13", 10, 0, -15, VERT_ALIGN_TOP, HORIZ_ALIGN_LEFT };
  p_descr = "Details for wind label.";
} wind_label;

