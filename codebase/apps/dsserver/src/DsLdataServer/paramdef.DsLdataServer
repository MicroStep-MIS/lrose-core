/*********************************************************
 * parameter definitions for DsMdvServer
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * May 2002
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.";
} no_threads;

paramdef string {
  p_default = "";
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting. If an empty instance name is provided, the server automatically uses the port number as its instance name";
} instance;

commentdef {
  p_header = "DsServerMgr SUPPORT";
};

paramdef int {
  p_default = 5447;
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
} port;
  
paramdef int {
  p_default = 1800;
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, it will die gracefully.";
} qmax;
  
paramdef int {
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
    "produce to handle client requests.  If the maximum is reached, "
    "new clients will receive a SERVICE_DENIED error message and will "
    "have to request the data again.  If set to -1, no maximum is "
    "enforced.";
  p_default = 256;
} max_clients;

commentdef {
  p_header = "SECURITY";
};

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to run in secure mode.";
  p_help = "If TRUE, the server will reject any URLs which specify an absolute path, or a path with .. in it. This prevents the server from writing any files which are not below DATA_DIR in the directory tree.";
} run_secure;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to run in read-only mode.";
  p_help = "If TRUE, the server will respond only to read requests, and will ignore write requests.";
} run_read_only;

commentdef {
  p_header = "SERVER DETAILS";
};

paramdef int {
  p_default = 900;
  p_descr = "Timeout after which an LdataInfo object is removed from the list - secs";
  p_help = "The server creates a list of LdataInfo objects, one for each unique client which connects. The client provides a unique ID string from which the server can identify it. When the same client re-connects, DsLdataServer looks for the LdataInfo object previously used for that client, and uses that object to service the client. If the object is not in the list, a new object is created. If a client does not reconnect within ldata_object_timeout_secs, the object will be discarded from the list.";
} ldata_object_timeout_secs;




