// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Sigwx2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'process_cloud'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_cloud");
    tt->descr = tdrpStrDup("Flag to turn on processing of clouds.");
    tt->help = tdrpStrDup(".");
    tt->val_offset = (char *) &process_cloud - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'process_jetstream'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_jetstream");
    tt->descr = tdrpStrDup("Flag to turn on processing of jet streams.");
    tt->help = tdrpStrDup(".");
    tt->val_offset = (char *) &process_jetstream - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'process_turbulence'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_turbulence");
    tt->descr = tdrpStrDup("Flag to turn on processing of turbulence.");
    tt->help = tdrpStrDup(".");
    tt->val_offset = (char *) &process_turbulence - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'process_volcano'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_volcano");
    tt->descr = tdrpStrDup("Flag to turn on processing of volocano.");
    tt->help = tdrpStrDup(".");
    tt->val_offset = (char *) &process_volcano - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Server details for support from ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5483;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("JETSTREAM RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'jetstream_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("jetstream_line_color");
    tt->descr = tdrpStrDup("jetstream line color");
    tt->help = tdrpStrDup("Name of color for jetstream lines.");
    tt->val_offset = (char *) &jetstream_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'jetstream_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("jetstream_line_width");
    tt->descr = tdrpStrDup("jetstream line width");
    tt->help = tdrpStrDup("Width in pixels of jetstream lines.");
    tt->val_offset = (char *) &jetstream_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'jetstream_text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("jetstream_text_color");
    tt->descr = tdrpStrDup("jetstream text color");
    tt->help = tdrpStrDup("Name of color for jetstream text.");
    tt->val_offset = (char *) &jetstream_text_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'jetstream_text_bg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("jetstream_text_bg_color");
    tt->descr = tdrpStrDup("jetstream text background color");
    tt->help = tdrpStrDup("Set to empty string to use display background color");
    tt->val_offset = (char *) &jetstream_text_bg_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'jetstream_wind_barb_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("jetstream_wind_barb_height");
    tt->descr = tdrpStrDup("jetstream wind barb height, pixels");
    tt->help = tdrpStrDup("p_descr");
    tt->val_offset = (char *) &jetstream_wind_barb_height - &_start_;
    tt->single_val.i = 11;
    tt++;
    
    // Parameter 'jetstream_wind_barb_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("jetstream_wind_barb_width");
    tt->descr = tdrpStrDup("jetstream wind barb triangle width, pixels");
    tt->help = tdrpStrDup("p_descr");
    tt->val_offset = (char *) &jetstream_wind_barb_width - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'jetstream_wind_barb_gap'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("jetstream_wind_barb_gap");
    tt->descr = tdrpStrDup("jetstream wind barb gap between fleche marks, pixels");
    tt->help = tdrpStrDup("p_descr");
    tt->val_offset = (char *) &jetstream_wind_barb_gap - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'jetstream_min_fleche_distance'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("jetstream_min_fleche_distance");
    tt->descr = tdrpStrDup("Minimum space required between fleches along the jet stream, given in number of characters.");
    tt->help = tdrpStrDup("This parameter is specified in number of characters to match the WAFS representation documentation found on the Web.");
    tt->val_offset = (char *) &jetstream_min_fleche_distance - &_start_;
    tt->single_val.i = 15;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("TURBULENCE RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'turbulence_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("turbulence_line_color");
    tt->descr = tdrpStrDup("turbulence line color");
    tt->help = tdrpStrDup("Name of color for turbulence lines.");
    tt->val_offset = (char *) &turbulence_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'turbulence_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("turbulence_line_width");
    tt->descr = tdrpStrDup("turbulence line width");
    tt->help = tdrpStrDup("Width in pixels of turbulence lines.");
    tt->val_offset = (char *) &turbulence_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'turbulence_text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("turbulence_text_color");
    tt->descr = tdrpStrDup("turbulence text color");
    tt->help = tdrpStrDup("Name of color for turbulence text.");
    tt->val_offset = (char *) &turbulence_text_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'turbulence_text_bg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("turbulence_text_bg_color");
    tt->descr = tdrpStrDup("turbulence text background color");
    tt->help = tdrpStrDup("Set to empty string to use display background color");
    tt->val_offset = (char *) &turbulence_text_bg_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CLOUD RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cloud_display_outline'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cloud_display_outline");
    tt->descr = tdrpStrDup("Flag indicating whether to display the cloud outline.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cloud_display_outline - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cloud_display_text_box'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cloud_display_text_box");
    tt->descr = tdrpStrDup("Flag indicating whether to display the cloud text box.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cloud_display_text_box - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cloud_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cloud_line_color");
    tt->descr = tdrpStrDup("cloud line color");
    tt->help = tdrpStrDup("Name of color for cloud lines.");
    tt->val_offset = (char *) &cloud_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("lightgray");
    tt++;
    
    // Parameter 'cloud_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cloud_line_width");
    tt->descr = tdrpStrDup("cloud line width");
    tt->help = tdrpStrDup("Width in pixels of cloud lines.");
    tt->val_offset = (char *) &cloud_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'cloud_screen_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cloud_screen_size");
    tt->descr = tdrpStrDup("screen size, pixels");
    tt->help = tdrpStrDup("Approx screen height in pixels.");
    tt->val_offset = (char *) &cloud_screen_size - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'cloud_scallop_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cloud_scallop_size");
    tt->descr = tdrpStrDup("cloud scallop size, pixels");
    tt->help = tdrpStrDup("Approx width in pixels of each scallop in cloud rendering.");
    tt->val_offset = (char *) &cloud_scallop_size - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'cloud_text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cloud_text_color");
    tt->descr = tdrpStrDup("cloud text color");
    tt->help = tdrpStrDup("Name of color for cloud text.");
    tt->val_offset = (char *) &cloud_text_color - &_start_;
    tt->single_val.s = tdrpStrDup("lightgray");
    tt++;
    
    // Parameter 'cloud_text_bg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cloud_text_bg_color");
    tt->descr = tdrpStrDup("cloud text background color");
    tt->help = tdrpStrDup("Set to empty string to use display background color");
    tt->val_offset = (char *) &cloud_text_bg_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'cloud_text_box_x_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cloud_text_box_x_offset");
    tt->descr = tdrpStrDup("Cloud text box X offset in pixels.");
    tt->help = tdrpStrDup("This is the distance between the lower-left corner of the text box and the upper-right corner of the box containing the cloud outline in the X direction in pixels.");
    tt->val_offset = (char *) &cloud_text_box_x_offset - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'cloud_text_box_y_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cloud_text_box_y_offset");
    tt->descr = tdrpStrDup("Cloud text box Y offset in pixels.");
    tt->help = tdrpStrDup("This is the distance between the lower-left corner of the text box and the upper-right corner of the box containing the cloud outline in the Y direction in pixels.");
    tt->val_offset = (char *) &cloud_text_box_y_offset - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("VOLCANO RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'volcano_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("volcano_line_color");
    tt->descr = tdrpStrDup("volcano line color");
    tt->help = tdrpStrDup("Name of color for volcano lines.");
    tt->val_offset = (char *) &volcano_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'volcano_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("volcano_line_width");
    tt->descr = tdrpStrDup("volcano line width");
    tt->help = tdrpStrDup("Width in pixels of volcano lines.");
    tt->val_offset = (char *) &volcano_line_width - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'volcano_icon_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("volcano_icon_size");
    tt->descr = tdrpStrDup("volcano icon size, pixels");
    tt->help = tdrpStrDup("p_descr");
    tt->val_offset = (char *) &volcano_icon_size - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'volcano_text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("volcano_text_color");
    tt->descr = tdrpStrDup("volcano text color");
    tt->help = tdrpStrDup("Name of color for volcano text.");
    tt->val_offset = (char *) &volcano_text_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'volcano_text_bg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("volcano_text_bg_color");
    tt->descr = tdrpStrDup("volcano text background color");
    tt->help = tdrpStrDup("Set to empty string to use display background color");
    tt->val_offset = (char *) &volcano_text_bg_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("CYCLONE RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cyclone_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cyclone_line_color");
    tt->descr = tdrpStrDup("cyclone line color");
    tt->help = tdrpStrDup("Name of color for cyclone lines.");
    tt->val_offset = (char *) &cyclone_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'cyclone_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cyclone_line_width");
    tt->descr = tdrpStrDup("cyclone line width");
    tt->help = tdrpStrDup("Width in pixels of cyclone lines.");
    tt->val_offset = (char *) &cyclone_line_width - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'cyclone_text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cyclone_text_color");
    tt->descr = tdrpStrDup("cyclone text color");
    tt->help = tdrpStrDup("Name of color for cyclone text.");
    tt->val_offset = (char *) &cyclone_text_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'cyclone_text_bg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cyclone_text_bg_color");
    tt->descr = tdrpStrDup("cyclone text background color");
    tt->help = tdrpStrDup("Set to empty string to use display background color");
    tt->val_offset = (char *) &cyclone_text_bg_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("RADIATION RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'radiation_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radiation_line_color");
    tt->descr = tdrpStrDup("radiation line color");
    tt->help = tdrpStrDup("Name of color for radiation lines.");
    tt->val_offset = (char *) &radiation_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'radiation_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("radiation_line_width");
    tt->descr = tdrpStrDup("radiation line width");
    tt->help = tdrpStrDup("Width in pixels of radiation lines.");
    tt->val_offset = (char *) &radiation_line_width - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'radiation_text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radiation_text_color");
    tt->descr = tdrpStrDup("radiation text color");
    tt->help = tdrpStrDup("Name of color for radiation text.");
    tt->val_offset = (char *) &radiation_text_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'radiation_text_bg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radiation_text_bg_color");
    tt->descr = tdrpStrDup("radiation text background color");
    tt->help = tdrpStrDup("Set to empty string to use display background color");
    tt->val_offset = (char *) &radiation_text_bg_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("FONT OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Font name.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("-*-helvetice-bold-r-*-*-*-140-*-*-*-*-*-*");
    tt++;
    
    // Parameter 'text_x_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("text_x_offset");
    tt->descr = tdrpStrDup("x offset of start of text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_x_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'text_y_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("text_y_offset");
    tt->descr = tdrpStrDup("y offset of start of text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_y_offset - &_start_;
    tt->single_val.i = -25;
    tt++;
    
    // Parameter 'font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("font_size");
    tt->descr = tdrpStrDup("Size of font to use for text (apparently ignored by CIDD)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_size - &_start_;
    tt->single_val.i = 12;
    tt++;
    
    // Parameter 'line_space_factor'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("line_space_factor");
    tt->descr = tdrpStrDup("Line spacing as a multiple of font size");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &line_space_factor - &_start_;
    tt->single_val.f = 1.5;
    tt++;
    
    // Parameter 'hidden_text_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_flag");
    tt->descr = tdrpStrDup("Flag indicating whether whether popup text should be generated.");
    tt->help = tdrpStrDup("Currently, only the JMDS display has the ability to display hidden text. If using CIDD or MDS, this should always be set to false.\nOnly affects Clouds & Turbulence");
    tt->val_offset = (char *) &hidden_text_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'basic_text_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("basic_text_flag");
    tt->descr = tdrpStrDup("Flag indicating whether whether basic text should be generated.");
    tt->help = tdrpStrDup("Only affects Clouds & Turbulence");
    tt->val_offset = (char *) &basic_text_flag - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'icon_defs'
    // ctype is '_icon_defs_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("icon_defs");
    tt->descr = tdrpStrDup("Definitions for all of the icons used by the server.");
    tt->help = tdrpStrDup("The icon_points string contains the points used to define the icon in a space delimited string like the following:\n\t\"x1 y1 x2 y2 .... xn yn\"\nUse the value 32767 for both X and Y to indicate a pen up.\nThe turb_icon is the standard turbulence symbol.\n");
    tt->array_offset = (char *) &_icon_defs - &_start_;
    tt->array_n_offset = (char *) &icon_defs_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(icon_defs_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("icon_defs_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("icon_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_icon_defs->icon_name - (char *) _icon_defs;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("icon_points");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_icon_defs->icon_points - (char *) _icon_defs;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("turb_icon");
      tt->struct_vals[1].s = tdrpStrDup("-10 0 0 20 10 0 32767 32767 -10 -10 0 10 10 -10 32767 32767 -20 -10 -10 -10 32767 32767 -5 -10 5 -10 32767 32767 10 -10 20 -10");
      tt->struct_vals[2].s = tdrpStrDup("cloud_icon");
      tt->struct_vals[3].s = tdrpStrDup("  0  20    4  20    8  18   12  16   15  13   18   9   19   5   20   1   20  -3   19  -7   17 -11   14 -15   10 -17    6 -19    2 -20   -2 -20   -6 -19  -10 -17  -14 -15  -17 -11  -19  -7  -20  -3  -20   1  -19   5  -18   9  -15  13  -12  16   -8  18   -4  20   -0  20");
      tt->struct_vals[4].s = tdrpStrDup("unknown");
      tt->struct_vals[5].s = tdrpStrDup("-6 6 -6 8 -4 10 -2 12 2 12 4 10 6 8 8 4 4 2 2 0 0 0 0 -5 32767 32767 -2 -10 0 -10 0 -12 -2 -12 -2 -10");
    tt++;
    
    // Parameter 'turb_icon_scale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("turb_icon_scale");
    tt->descr = tdrpStrDup("float scale of turbulence icon");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &turb_icon_scale - &_start_;
    tt->single_val.f = 0.5;
    tt++;
    
    // Parameter 'cloud_icon_scale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("cloud_icon_scale");
    tt->descr = tdrpStrDup("float scale of cloud icon");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cloud_icon_scale - &_start_;
    tt->single_val.f = 0.3;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
