//////////////////////////////////////////////////////////////////////
// parameter definitions KbandBlanking
//
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// April 2011
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "KbandBlanking reads angles from the SPOL angle FMQ, and determines whether the azimith falls into a blanking region or not. It then issues blanking/not blanking commands to the kadrx. kadrx will then disable the transmit triggers while blanked.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "COMMUNICATING WITH KADRX via XML-RPC";
};

paramdef string {
  p_default = "kadrx";
  p_descr = "Host name for the ka digital receiver.";
} rpc_server_host;

paramdef int {
  p_default = 8081;
  p_descr = "Port for contacting kadrx via XML RPC.";
} rpc_server_port;

paramdef double {
  p_default = 1.0;
  p_descr = "Maximum interval between rpc calls (secs).";
  p_descr = "An RPC call will be made at least at this interval, as well as any time the blanking condition changes.";
} rpc_max_interval;

commentdef {
  p_header = "READING ANGLES FROM S2D";
};

paramdef string {
  p_default = "/tmp/fmq/angles";
  p_descr = "Name of input FMQ for angle data.";
} angle_fmq_path;

commentdef {
  p_header = "SPECIFYING BLANKING SECTORS";
};

typedef struct {
  string name;
  double counter_clockwise_azimuth_limit_deg;
  double clockwise_azimuth_limit_deg;
  double lower_elevation_limit_deg; 
  double upper_elevation_limit_deg; 
} sector_t;

paramdef struct sector_t {
  p_default = {
    { "DOE", 120.0, 140.0, -90, 3 },
    { "TEST1", 190.0, 210.0, -90, 5 },
    { "TEST2", 350.0, 010.0, -90, 3 }
  };
  p_descr = "Specify the sectors for blanking.";
  p_help = "The name is for debugging purposes. The counter_clockwise and clockwise azimuth limits define the sector in azimuth. The lower and upper elevation limits define the sector in elevation.";
} blanking_sectors[];

paramdef double {
  p_default = 0.1;
  p_descr = "Resolution of lookup table in azimuth.";
  p_help = "We compute a lookup table in azimuth, and load it up with flags which indicate whether a particular azimuth should be blanked or not.";
} azimuth_lut_resolution;

commentdef {
  p_header = "SIMULATE MODE";
};

paramdef boolean {
  p_default = false;
  p_descr = "Simulation mode.";
  p_help = "In simulate mode, the blanking will be turned on and off at regular intervals. See params below.";
} simulate_mode;

paramdef double {
  p_default = 2.0;
  p_descr = "Time for blanking to be on in simulate mode (secs).";
  p_help = "Blanking alternates between on and off regularly. This is the time in secs for blanking to be on.";
} sim_mode_blanking_on_time_secs;

paramdef double {
  p_default = 5.0;
  p_descr = "Time for blanking to be off in simulate mode (secs).";
  p_help = "Blanking alternates between off and off regularly. This is the time in secs for blanking to be off.";
} sim_mode_blanking_off_time_secs;

