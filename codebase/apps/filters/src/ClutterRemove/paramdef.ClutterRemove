/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions ClutterRemove
//
// Mike Dixon, RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// July 2000
//

commentdef {
  p_header = "Program name: ClutterRemove";
  p_text = "ClutterRemove removes clutter from an MDV file. The clutter is obtained from a clutter file, which is normally a median-filtered DBZ file. The result is stored in an MDV file. The usage is 'ClutterRemove -params params_file'.";
}

commentdef {
  p_header = "DEBUG AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. When a new file arrives, it computes the median of the files from the latest time and back by the parameter 'past_secs'. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "mdv/input";
  p_descr = "URL for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_url;

paramdef int {
  p_default = 600;
  p_descr = "Max valid age on input file - secs.";
  p_help = "REALTIME mode only. If, on starup, no file is younger than this, the program will wait for the next file to come in.";
} max_realtime_valid_age;

paramdef string {
  p_default = "DBZ";
  p_descr = "Name of the dBZ field in the input file.";
} input_dbz_field_name;

commentdef {
  p_header = "FILTERING THE CLUTTER";
}

paramdef string {
  p_default = "mdv/clutter";
  p_descr = "Path URL for clutter directory or file.";
  p_help = "If use_latest_clutter_file is TRUE, this points to the directory. If FALSE, this points to the actual clutter file.";
} clutter_path_url;

paramdef boolean {
  p_default = true;
  p_descr = "Option to use latest available clutter file.";
  p_help = "If true, the clutter_path_url must point to the directory in which the clutter files reside. If false, the clutter_path_url must point to the actual clutter file.";
} use_latest_clutter_file;

paramdef string {
  p_default = "DBZ";
  p_descr = "Name of the dBZ field in the clutter file.";
} clutter_dbz_field_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to remove data at clutter points from all fields.";
  p_help = "If true, when clutter is found at a point, all of the fields at that point are set to missing. If false, cluter is only removed from the dBZ field. If this option is set, make sure the geometry of all the fields is identical.";
} remove_from_all_fields;

paramdef double {
  p_default = 0.0;
  p_descr = "Clutter dBZ threshold";
  p_help = "Clutter data is only considered valid if it exceeds this threshold.";
} clutter_threshold;

paramdef double {
  p_default = 0.0;
  p_descr = "Input dBZ threshold";
  p_help = "Input data is only considered a candidate for clutter removal if it exceeds this threshold.";
} dbz_threshold;

paramdef double {
  p_default = 5.0;
  p_descr = "Input data dBZ margin";
  p_help = "Data which exceeds the clutter value by this margin is not condidered clutter.";
} dbz_margin;

paramdef double {
  p_default = .001;
  p_descr = "Tolerance for determining match between clutter map vertical level and data vertical level";
  p_help = "We assume a match if clutter map fabs(vertical level - data vertical level ) < vlevel_tolerance";
} vlevel_tolerance;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remap clutter grid in x,y.";
  p_help = "If true, set the remap parameters below.";
} remap_xy;

typedef enum {
  PROJ_LATLON = 0,
  PROJ_LAMBERT_CONF = 3,
  PROJ_FLAT = 8
} projection_t;

paramdef enum projection_t {
  p_default = PROJ_FLAT;
  p_descr = "Projection for remapping in x,y.";
} remap_projection;

typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_params_t;

paramdef struct grid_params_t {
  p_default = {1, 1, 0.0, 0.0, 1.0, 1.0};
  p_descr = "Grid parameters for remapping in x,y.";
  p_help = "These params apply to all projection types.";
} remap_grid;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid rotation.";
  p_help = "This applies only to PROJ_FLAT projections.";
} remap_rotation;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin latitude.";
  p_help = "This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.";
} remap_origin_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin longitude.";
  p_help = "This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.";
} remap_origin_lon;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid reference latitude 1.";
  p_help = "This applies only to PROJ_LAMBERT_CONF projections.";
} remap_lat1;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid reference latitude 2.";
  p_help = "This applies only to PROJ_LAMBERT_CONF projections.";
} remap_lat2;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to specify field names for the output file.";
  p_help = "If true, only the specified field names are included in the output file.";
} specify_field_names;

paramdef string {
  p_default = {"dBZ"};
  p_descr = "List of field names for filtering.";
} field_names[];

paramdef string {
  p_default = "mdv/noClutter";
  p_descr = "Output dir URL.";
  p_help = "Output data is written to this URL.";
} output_url;

typedef enum {
  COMPRESSION_ASIS = -1,
  COMPRESSION_NONE =  0,
  COMPRESSION_RLE =   1,
  COMPRESSION_ZLIB =  3,
  COMPRESSION_BZIP =  4 
} output_compression_t;

paramdef enum output_compression_t {
  p_default = COMPRESSION_ZLIB;
  p_descr = "Set compression type.";
} output_compression;



