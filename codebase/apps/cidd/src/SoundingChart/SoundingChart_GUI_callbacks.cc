// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/*************************************************************************
 * SoundingChart_GUI_callbacks.c - Notify and event callback functions.
 * This file was originally generated by `gxv' from `SoundingChart_GUI.G'.
 * Functions get manually merged from guide/ *stubs.c file.
 * - F. Hage March 2004.
 */

using namespace std;

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/panel.h>
#include <xview/textsw.h>
#include <xview/xv_xrect.h>

#include "SoundingChart_GUI_ui.h"
#include "SoundingChart.hh"

/*************************************************************************
 * Event callback function for `window1'.
 */
Notify_value
window_event_func(Xv_window win, Event *event, Notify_arg arg, Notify_event_type type)

{ 

    if (event_action(event) == WIN_RESIZE) {

      int cp_height;

      //fprintf(stderr, "SoundingChart_GUI: win_resize_func: event %d\n", event_id(event));
	   P->win_height = xv_get(P->SoundingChart_GUI->window1,XV_HEIGHT);
	   P->win_width = xv_get(P->SoundingChart_GUI->window1,XV_WIDTH);

	   // Reset the control panel width
	   cp_height = xv_get(P->SoundingChart_GUI->controls1,XV_HEIGHT);
	   xv_set(P->SoundingChart_GUI->controls1,XV_WIDTH,P->win_width,NULL);

	   // Position messages on right edge.
	   xv_set(P->SoundingChart_GUI->time_msg,XV_X,
		   P->win_width -  xv_get(P->SoundingChart_GUI->time_msg,XV_WIDTH) -10,
		   NULL);

	   //P->can_height = xv_get(P->SoundingChart_GUI->canvas1,XV_HEIGHT);
	   //P->can_width = xv_get(P->SoundingChart_GUI->canvas1,XV_WIDTH);

	   P->can_height = P->win_height - cp_height;
	   P->can_width = P->win_width;

	   xv_set(P->SoundingChart_GUI->canvas1,
		XV_HEIGHT,P->can_height,
		XV_WIDTH, P->can_width, NULL);

	   if(P->backing_xid != 0) {
		  XFreePixmap(P->dpy, P->backing_xid);
		  P->backing_xid = 0;
	   } 

	   P->backing_xid =  XCreatePixmap(P->dpy, P->canvas_xid, 
							  P->can_width, P->can_height,
							  DefaultDepth(P->dpy,0));

	   P->doPlot();  // redraw the plot
    }
    return notify_next_event_func(win, (Notify_event) event, arg, type);
}

/*************************************************************************
 * Event callback function for `canvas1'.
 */
Notify_value
canvas_event_func(Xv_window win, Event *event, Notify_arg arg, Notify_event_type type)
{
    static int config_open = 0;
    if (event_action(event) == ACTION_MENU && event_is_down(event)) {
		if(config_open) {
		    xv_set(P->SoundingChart_GUI_config_pu->config_pu,FRAME_CMD_PUSHPIN_IN, FALSE,XV_SHOW, FALSE,NULL);
			config_open = 0;
		} else {
		    xv_set(P->SoundingChart_GUI_config_pu->config_pu,FRAME_CMD_PUSHPIN_IN, TRUE,XV_SHOW, TRUE,NULL);
			config_open = 1;
		}
	}

	//fprintf(stderr, "SoundingChart_GUI: canvas_event_func: event %d\n", event_id(event));

	return notify_next_event_func(win, (Notify_event) event, arg, type);
}

/*************************************************************************
 * Repaint callback function for `canvas1'.
 */
void canvas_repaint(Canvas canvas, Xv_window paint_window, Rectlist *rects)
{
   //fputs("SoundingChart_GUI: canvas_repaint\n", stderr);

   if(P->backing_xid != 0 && P->canvas_xid != 0) {
       XCopyArea(P->dpy,P->backing_xid,P->canvas_xid,
             P->def_gc, 0,0,
			 P->can_width,P->can_height, 0,0);
   }
}

/*************************************************************************
 * Notify callback function for `sound_st'.
 */
void sounding_select(Panel_item item, int value, Event *event)
{
    //fprintf(stderr, "SoundingChart_GUI: sounding_select: value: %u\n", value);

	if( value != P->params.soundingSrc_n &&
	    P->cur_sound_field != P->params.soundingSrc_n &&
		strcmp(P->params._soundingSrc[P->cur_sound_field].url,P->params._soundingSrc[value].url) != 0) {
        P->cur_sound_field = value;
	    P->gather_sounding_data();
	}

    P->cur_sound_field = value;

    P->doPlot();
}

/*************************************************************************
 * Notify callback function for `Grid_st'.
 */
void grid_select(Panel_item item, int value, Event *event)
{
   
    //fprintf(stderr, "SoundingChart_GUI: grid_select: value: %u\n", value);

    P->cur_grid_field = value;

	P->gather_mdv_data();

    P->doPlot();

}

/*************************************************************************
 * Notify callback function for `grid_wind_st'.
 */
void
show_grid_wind(Panel_item item, int value, Event *event)
{
    P->grid_color_on = (value & 1) ? 1: 0;
    P->grid_lines_on = (value & 2) ? 1: 0;
    P->grid_winds_on = (value & 4) ? 1: 0;

    P->doPlot();
}

/*************************************************************************
 * Notify callback function for `sound_wind_st'.
 */
void
show_sound_winds(Panel_item item, int value, Event *event)
{
    P->sound_color_on = (value & 1) ? 1: 0;
    P->sound_lines_on = (value & 2) ? 1: 0;
    P->sound_winds_on = (value & 4) ? 1: 0;

    P->doPlot();
}

/*************************************************************************
 * Notify callback function for `refs_st'.
 */
void
set_ref_points_proc(Panel_item item, int value, Event *event)
{
    P->reference_points_on = value;
}


/*************************************************************************
 * Notify callback function for `clear_bt'.
 */
void clear_refs_proc(Panel_item item, Event *event)
{
    genPtMgr GenPT(P->params.click_point_url,P->params.debug);

	GenPT.clear_database();
	P->num_points = 0;

	P->notify_cidd();
}


/*************************************************************************
 * Notify callback function for `width_sl'.
 */
void  
adust_width_proc(Panel_item item, int value, Event *event)
{
    P->sounding_width_secs = (int) P->params.sounding_width_minutes * 60 * value / 100;

    P->doPlot();
}

