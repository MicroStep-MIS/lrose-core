// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/*
 * strip_chart_ui.c - User interface object initialization functions.
 * This file was generated by `gxv' from `strip_chart.G'.
 * DO NOT EDIT BY HAND.
 */

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/canvas.h>
#include <xview/panel.h>
#include <xview/scrollbar.h>
#include <xview/svrimage.h>
#include <xview/termsw.h>
#include <xview/text.h>
#include <xview/tty.h>
#include <xview/xv_xrect.h>
#include <devguide/gcm.h>
#include "strip_chart_ui.h"

/*
 * Create object `menu1' in the specified instance.
 */
Xv_opaque
strip_chart_menu1_create(caddr_t ip, Xv_opaque owner)
{
	extern Menu		select_field_proc(Menu, Menu_generate);
	Xv_opaque	obj;
	
	obj = xv_create(XV_NULL, MENU_CHOICE_MENU,
		XV_KEY_DATA, INSTANCE, ip,
		MENU_GEN_PROC, select_field_proc,
		MENU_TITLE_ITEM, owner ? "" : "Show",
		NULL);
	return obj;
}

/*
 * Initialize an instance of object `win1'.
 */
strip_chart_win1_objects *
strip_chart_win1_objects_initialize(strip_chart_win1_objects *ip, Xv_opaque owner)
{
	if (!ip && !(ip = (strip_chart_win1_objects *) calloc(1, sizeof (strip_chart_win1_objects))))
		return (strip_chart_win1_objects *) NULL;
	if (!ip->win1)
		ip->win1 = strip_chart_win1_win1_create(ip, owner);
	if (!ip->canvas1)
		ip->canvas1 = strip_chart_win1_canvas1_create(ip, ip->win1);
	return ip;
}

/*
 * Create object `win1' in the specified instance.
 */
Xv_opaque
strip_chart_win1_win1_create(strip_chart_win1_objects *ip, Xv_opaque owner)
{
	extern Notify_value	win1_event_proc(Xv_window, Event *, Notify_arg, Notify_event_type);
	Xv_opaque	obj;
	Xv_opaque		win1_image;
	static unsigned short	win1_bits[] = {
#include "gauge_strip.icon"
	};
	
	win1_image = xv_create(XV_NULL, SERVER_IMAGE,
		SERVER_IMAGE_DEPTH, 1,
		SERVER_IMAGE_BITS, win1_bits,
		XV_WIDTH, 64,
		XV_HEIGHT, 64,
		NULL);
	obj = xv_create(owner, FRAME,
		XV_KEY_DATA, INSTANCE, ip,
		XV_WIDTH, 266,
		XV_HEIGHT, 234,
		XV_LABEL, "Station Trends",
		FRAME_SHOW_FOOTER, FALSE,
		FRAME_SHOW_RESIZE_CORNER, TRUE,
		FRAME_ICON, xv_create(XV_NULL, ICON,
			ICON_IMAGE, win1_image,
			NULL),
		NULL);
	xv_set(obj, WIN_CONSUME_EVENTS,
		WIN_MOUSE_BUTTONS,
		LOC_MOVE,
		LOC_DRAG,
		LOC_WINENTER,
		LOC_WINEXIT,
		WIN_ASCII_EVENTS,
		WIN_LEFT_KEYS,
		WIN_RIGHT_KEYS,
		WIN_TOP_KEYS,
		NULL, NULL);
	notify_interpose_event_func(obj,
		(Notify_func) win1_event_proc, NOTIFY_SAFE);
	return obj;
}

/*
 * Create object `canvas1' in the specified instance.
 */
Xv_opaque
strip_chart_win1_canvas1_create(strip_chart_win1_objects *ip, Xv_opaque owner)
{
	extern Notify_value	strip_chart_win1_canvas1_event_callback(Xv_window, Event *, Notify_arg, Notify_event_type);
	extern Xv_opaque	strip_chart_menu1_create(caddr_t, Xv_opaque);
	Xv_opaque	obj;
	
	obj = xv_create(owner, CANVAS,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, 0,
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
		CANVAS_X_PAINT_WINDOW, TRUE,
		NULL);
	xv_set(canvas_paint_window(obj), WIN_MENU, strip_chart_menu1_create((caddr_t) ip, ip->win1), NULL);
	xv_set(canvas_paint_window(obj), WIN_CONSUME_EVENTS,
		WIN_MOUSE_BUTTONS,
		LOC_MOVE,
		LOC_DRAG,
		LOC_WINENTER,
		LOC_WINEXIT,
		WIN_ASCII_EVENTS,
		WIN_LEFT_KEYS,
		WIN_RIGHT_KEYS,
		WIN_TOP_KEYS,
		NULL, NULL);
	notify_interpose_event_func(canvas_paint_window(obj),
		(Notify_func) strip_chart_win1_canvas1_event_callback, NOTIFY_SAFE);
	/*
	 * This line is here for backwards compatibility. It will be
	 * removed for the next release.
	 */
	xv_set(canvas_paint_window(obj), XV_KEY_DATA, INSTANCE, ip, NULL);
	return obj;
}

/*
 * Initialize an instance of object `config_pu'.
 */
strip_chart_config_pu_objects *
strip_chart_config_pu_objects_initialize(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	if (!ip && !(ip = (strip_chart_config_pu_objects *) calloc(1, sizeof (strip_chart_config_pu_objects))))
		return (strip_chart_config_pu_objects *) NULL;
	if (!ip->config_pu)
		ip->config_pu = strip_chart_config_pu_config_pu_create(ip, owner);
	if (!ip->controls1)
		ip->controls1 = strip_chart_config_pu_controls1_create(ip, ip->config_pu);
	if (!ip->run_mode_st)
		ip->run_mode_st = strip_chart_config_pu_run_mode_st_create(ip, ip->controls1);
	if (!ip->units_st)
		ip->units_st = strip_chart_config_pu_units_st_create(ip, ip->controls1);
	if (!ip->zone_st)
		ip->zone_st = strip_chart_config_pu_zone_st_create(ip, ip->controls1);
	if (!ip->config_dismiss_bt)
		ip->config_dismiss_bt = strip_chart_config_pu_config_dismiss_bt_create(ip, ip->controls1);
	if (!ip->archive_time_tx)
		ip->archive_time_tx = strip_chart_config_pu_archive_time_tx_create(ip, ip->controls1);
	if (!ip->url_tx)
		ip->url_tx = strip_chart_config_pu_url_tx_create(ip, ip->controls1);
	if (!ip->update_interval_tx)
		ip->update_interval_tx = strip_chart_config_pu_update_interval_tx_create(ip, ip->controls1);
	if (!ip->delay_tx)
		ip->delay_tx = strip_chart_config_pu_delay_tx_create(ip, ip->controls1);
	if (!ip->message2)
		ip->message2 = strip_chart_config_pu_message2_create(ip, ip->controls1);
	if (!ip->message1)
		ip->message1 = strip_chart_config_pu_message1_create(ip, ip->controls1);
	if (!ip->trace_width_tx)
		ip->trace_width_tx = strip_chart_config_pu_trace_width_tx_create(ip, ip->controls1);
	if (!ip->scale_tx)
		ip->scale_tx = strip_chart_config_pu_scale_tx_create(ip, ip->controls1);
	if (!ip->field_st)
		ip->field_st = strip_chart_config_pu_field_st_create(ip, ip->controls1);
	return ip;
}

/*
 * Create object `config_pu' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_config_pu_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, FRAME_CMD,
		XV_KEY_DATA, INSTANCE, ip,
		XV_WIDTH, 584,
		XV_HEIGHT, 253,
		XV_LABEL, "Configuration",
		XV_SHOW, FALSE,
		FRAME_SHOW_FOOTER, FALSE,
		FRAME_SHOW_RESIZE_CORNER, FALSE,
		FRAME_CMD_PUSHPIN_IN, FALSE,
		NULL);
	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
	return obj;
}

/*
 * Create object `controls1' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_controls1_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, 0,
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
		WIN_BORDER, FALSE,
		NULL);
	gcm_initialize_colors(obj, NULL, NULL);
	return obj;
}

/*
 * Create object `run_mode_st' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_run_mode_st_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern void		run_mode_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_CHOICE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 8,
		XV_Y, 6,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_CHOOSE_NONE, FALSE,
		PANEL_LABEL_STRING, "Modes:",
		PANEL_NOTIFY_PROC, run_mode_proc,
		PANEL_CHOICE_STRINGS,
			"Archive",
			"Live",
			"Slave",
			NULL,
		NULL);
	return obj;
}

/*
 * Create object `units_st' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_units_st_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern void		set_units_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_CHOICE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 232,
		XV_Y, 6,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_CHOOSE_NONE, FALSE,
		PANEL_NOTIFY_PROC, set_units_proc,
		PANEL_CHOICE_STRINGS,
			"Metric",
			"English",
			NULL,
		NULL);
	return obj;
}

/*
 * Create object `zone_st' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_zone_st_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern void		zone_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_CHOICE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 370,
		XV_Y, 6,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_CHOOSE_NONE, FALSE,
		PANEL_NOTIFY_PROC, zone_proc,
		PANEL_CHOICE_STRINGS,
			"UTC",
			"Local Time",
			NULL,
		NULL);
	return obj;
}

/*
 * Create object `config_dismiss_bt' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_config_dismiss_bt_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern void		dismiss_config_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_BUTTON,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 514,
		XV_Y, 8,
		PANEL_ITEM_COLOR, gcm_color_index("Yellow"),
		PANEL_LABEL_STRING, "CLOSE",
		PANEL_NOTIFY_PROC, dismiss_config_proc,
		NULL);
	return obj;
}

/*
 * Create object `archive_time_tx' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_archive_time_tx_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	set_arch_time_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 8,
		XV_Y, 41,
		PANEL_VALUE_DISPLAY_LENGTH, 36,
		PANEL_VALUE_STORED_LENGTH, 128,
		PANEL_LABEL_STRING, "Plot Ends at: (yyyy mm dd hh mm ss):",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_VALUE, "2003 10 31 23 00 00 UTC",
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, set_arch_time_proc,
		NULL);
	return obj;
}

/*
 * Create object `url_tx' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_url_tx_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	set_url_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 8,
		XV_Y, 64,
		PANEL_VALUE_DISPLAY_LENGTH, 62,
		PANEL_VALUE_STORED_LENGTH, 1024,
		PANEL_LABEL_STRING, "Source:",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_VALUE, "./",
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, set_url_proc,
		NULL);
	return obj;
}

/*
 * Create object `update_interval_tx' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_update_interval_tx_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	update_interval_tx(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 8,
		XV_Y, 90,
		PANEL_VALUE_DISPLAY_LENGTH, 8,
		PANEL_VALUE_STORED_LENGTH, 80,
		PANEL_LABEL_STRING, "Update Every",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, update_interval_tx,
		NULL);
	return obj;
}

/*
 * Create object `delay_tx' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_delay_tx_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	delay_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 242,
		XV_Y, 90,
		PANEL_VALUE_DISPLAY_LENGTH, 8,
		PANEL_VALUE_STORED_LENGTH, 80,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, delay_proc,
		NULL);
	return obj;
}

/*
 * Create object `message2' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_message2_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 312,
		XV_Y, 91,
		PANEL_LABEL_STRING, "Seconds after :00",
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

/*
 * Create object `message1' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_message1_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 178,
		XV_Y, 92,
		PANEL_LABEL_STRING, "min",
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

/*
 * Create object `trace_width_tx' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_trace_width_tx_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	trace_width_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 8,
		XV_Y, 112,
		PANEL_VALUE_DISPLAY_LENGTH, 8,
		PANEL_VALUE_STORED_LENGTH, 80,
		PANEL_LABEL_STRING, "Trace Line Width",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, trace_width_proc,
		NULL);
	return obj;
}

/*
 * Create object `scale_tx' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_scale_tx_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	scale_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 312,
		XV_Y, 114,
		PANEL_VALUE_DISPLAY_LENGTH, 8,
		PANEL_VALUE_STORED_LENGTH, 80,
		PANEL_LABEL_STRING, "Seconds per pixel:",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, scale_proc,
		NULL);
	return obj;
}

/*
 * Create object `field_st' in the specified instance.
 */
Xv_opaque
strip_chart_config_pu_field_st_create(strip_chart_config_pu_objects *ip, Xv_opaque owner)
{
	extern void		active_field_st(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TOGGLE, PANEL_FEEDBACK, PANEL_MARKED,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 12,
		XV_Y, 136,
		PANEL_CHOICE_NCOLS, 4,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_NOTIFY_PROC, active_field_st,
		PANEL_CHOICE_STRINGS,
			"Precip Rate",
			"Precip Accum",
			"Ceiling",
			"Visibility",
			"Flight Category",
			"Temperature",
			"Humidity",
			"Wind Speed",
			"Wind direction",
			"Barometer",
			"Precip Alternate",
			"Spare 1",
			"Spare 2",
			"Freezing Precip",
			"Dew Pt",
			"Wx Type",
			NULL,
		PANEL_VALUE, 0,
		NULL);
	return obj;
}

