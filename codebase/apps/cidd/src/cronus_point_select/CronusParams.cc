// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// CronusParams.cc
//
// TDRP C++ code file for class 'CronusParams'.
//
// Code for program cronus
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file CronusParams.cc
 *
 * @class CronusParams
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "CronusParams.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  CronusParams::CronusParams()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "CronusParams";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  CronusParams::CronusParams(const CronusParams& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "CronusParams";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  CronusParams::~CronusParams()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void CronusParams::operator=(const CronusParams& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int CronusParams::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int CronusParams::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool CronusParams::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int CronusParams::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int CronusParams::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int CronusParams::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void CronusParams::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void CronusParams::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int CronusParams::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int CronusParams::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void CronusParams::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void CronusParams::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int CronusParams::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int CronusParams::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void CronusParams::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RUNTIME MANAGEMENT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("nowcast");
    tt++;
    
    // Parameter 'fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fmq_url");
    tt->descr = tdrpStrDup("URL for fmq communication");
    tt->help = tdrpStrDup("Example syntax:  fmqp:://$(HOST)::$(PROJECT)/fmq/cronus");
    tt->val_offset = (char *) &fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://$(HOST)::$(PROJECT)/fmq/cronus");
    tt++;
    
    // Parameter 'fmq_wait'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("fmq_wait");
    tt->descr = tdrpStrDup("Number of seconds to wait for each fmq communication");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fmq_wait - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.l = 0;
    tt->max_val.l = 30;
    tt->single_val.l = 1;
    tt++;
    
    // Parameter 'fmq_delay'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("fmq_delay");
    tt->descr = tdrpStrDup("Number of seconds to delay prior to firing off a\ntrigger signal. May be useful if there are more than\none instance of cronus running so that the cronii\ndo not request processing at the same time.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fmq_delay - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'benchmark_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("benchmark_dir");
    tt->descr = tdrpStrDup("Directory for benchmarking file output");
    tt->help = tdrpStrDup("Leave blank to disable benchmarking");
    tt->val_offset = (char *) &benchmark_dir - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("MESSAGING\n\nMessaging levels: INFO, DEBUG\n  INFO level provides information for user.\n  DEBUG level provided information for the developer.\nMessage categories: GENERAL, INGEST, TRIGGER \n  GENERAL category provides information on\n    application processing.\n  INGEST category provides information on\n    data input.\n  TRIGGER category provides information on\n    external process communication.\n");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'info_general'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("info_general");
    tt->descr = tdrpStrDup("Info general category messaging option");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &info_general - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'info_ingest'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("info_ingest");
    tt->descr = tdrpStrDup("Info ingest category messaging option");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &info_ingest - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'debug_general'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_general");
    tt->descr = tdrpStrDup("Debug general category messaging option");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug_general - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_trigger'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_trigger");
    tt->descr = tdrpStrDup("Debug trigger category messaging option");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug_trigger - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'log_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("log_dir");
    tt->descr = tdrpStrDup("Directory for log file output");
    tt->help = tdrpStrDup("Leave blank to disable log file output\nIf no log file is specified, log messages will be send to to standard output");
    tt->val_offset = (char *) &log_dir - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'show_log_on_error'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("show_log_on_error");
    tt->descr = tdrpStrDup("Option to suppress GUI Log display upon error or warning");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &show_log_on_error - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'issue_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("issue_time");
    tt->descr = tdrpStrDup("Date/Time to issue nowcast (YYYY/MM/DD HH:MM:SS)");
    tt->help = tdrpStrDup("Used only in ARCHIVE mode");
    tt->val_offset = (char *) &issue_time - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'nowcast_count'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nowcast_count");
    tt->descr = tdrpStrDup("Number of nowcasts to issue for each forecast request");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nowcast_count - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 0;
    tt->max_val.i = 1000;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'nowcast_frequency'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("nowcast_frequency");
    tt->descr = tdrpStrDup("Frequency (in minutes) of multiple nowcasts.\nUsed only when nowcast_count > 1");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nowcast_frequency - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.l = 1;
    tt->max_val.l = 60;
    tt->single_val.l = 6;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("OUTPUT GRID GEOMETRY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'grid_origin_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_origin_lat");
    tt->descr = tdrpStrDup("Latitude of grid origin");
    tt->help = tdrpStrDup("Should be centered on the area of interest");
    tt->val_offset = (char *) &grid_origin_lat - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = -1000;
    tt->max_val.d = 1000;
    tt->single_val.d = 39.787;
    tt++;
    
    // Parameter 'grid_origin_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_origin_lon");
    tt->descr = tdrpStrDup("Longitude of grid origin");
    tt->help = tdrpStrDup("Should be centered on the area of interest");
    tt->val_offset = (char *) &grid_origin_lon - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = -1000;
    tt->max_val.d = 1000;
    tt->single_val.d = -104.546;
    tt++;
    
    // Parameter 'grid_nx'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("grid_nx");
    tt->descr = tdrpStrDup("Number of cells in the output grid");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_nx - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 1;
    tt->max_val.i = 2000;
    tt->single_val.i = 100;
    tt++;
    
    // Parameter 'grid_ny'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("grid_ny");
    tt->descr = tdrpStrDup("Number of cells in the output grid");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_ny - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 1;
    tt->max_val.i = 2000;
    tt->single_val.i = 100;
    tt++;
    
    // Parameter 'grid_dx'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("grid_dx");
    tt->descr = tdrpStrDup("Size of the output grid cells (in km)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_dx - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 0.001;
    tt->max_val.f = 10;
    tt->single_val.f = 1;
    tt++;
    
    // Parameter 'grid_dy'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("grid_dy");
    tt->descr = tdrpStrDup("Size of the output grid cells (in km)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_dy - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 0.001;
    tt->max_val.f = 10;
    tt->single_val.f = 1;
    tt++;
    
    // Parameter 'grid_minx'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("grid_minx");
    tt->descr = tdrpStrDup("Horizontal distance (in km) of grid's lower left corner\nfrom the grid's origin");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_minx - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = -2000;
    tt->max_val.f = 2000;
    tt->single_val.f = -50;
    tt++;
    
    // Parameter 'grid_miny'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("grid_miny");
    tt->descr = tdrpStrDup("Vertical distance (in km) of grid's lower left corner\nfrom the grid's origin");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_miny - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = -2000;
    tt->max_val.f = 2000;
    tt->single_val.f = -50;
    tt++;
    
    // Parameter 'grid_rotation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_rotation");
    tt->descr = tdrpStrDup("Grid rotation (in degrees) relative to true north");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_rotation - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = -360;
    tt->max_val.d = 360;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_projection'
    // ctype is '_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("grid_projection");
    tt->descr = tdrpStrDup("Projection type of grid");
    tt->help = tdrpStrDup("Projections currently supported are FLAT and LATLON");
    tt->val_offset = (char *) &grid_projection - &_start_;
    tt->enum_def.name = tdrpStrDup("projection_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FLAT");
      tt->enum_def.fields[0].val = FLAT;
      tt->enum_def.fields[1].name = tdrpStrDup("LATLON");
      tt->enum_def.fields[1].val = LATLON;
    tt->single_val.e = FLAT;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("FORECAST SPECIFICATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'forecasts'
    // ctype is '_forecasts_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("forecasts");
    tt->descr = tdrpStrDup("Forecast outputs to be computed.");
    tt->help = tdrpStrDup("Forecasts are computed and output in order of specification.\n  NAME:    user-defined forecast name.\n  PERIOD:  forecast period (in minutes).\n  URL:     location of output forecast data, for example,\n           mdvp:://$(HOST)::$(PROJECT)/mdv/cronus");
    tt->array_offset = (char *) &_forecasts - &_start_;
    tt->array_n_offset = (char *) &forecasts_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(forecasts_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("forecasts_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_forecasts->name - (char *) _forecasts;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("period");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_forecasts->period - (char *) _forecasts;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("url");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_forecasts->url - (char *) _forecasts;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("not_set");
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'input_datasets'
    // ctype is '_input_datasets_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("input_datasets");
    tt->descr = tdrpStrDup("Input data specifications");
    tt->help = tdrpStrDup("  NAME:          user-defined dataset name.\n  URL:           location of input dataset.\n  LOOK_BACK:     search margin (in minutes).\n  PROCESS_NAME:  executable name of process \n                 which generates input data.\n                 Used for fmq triggering");
    tt->array_offset = (char *) &_input_datasets - &_start_;
    tt->array_n_offset = (char *) &input_datasets_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(input_datasets_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("input_datasets_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_input_datasets->name - (char *) _input_datasets;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("url");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_input_datasets->url - (char *) _input_datasets;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("look_back");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_input_datasets->look_back - (char *) _input_datasets;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("process_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_input_datasets->process_name - (char *) _input_datasets;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("process_instance");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_input_datasets->process_instance - (char *) _input_datasets;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("not_set");
      tt->struct_vals[1].s = tdrpStrDup("not_set");
      tt->struct_vals[2].i = 0;
      tt->struct_vals[3].s = tdrpStrDup("not_set");
      tt->struct_vals[4].s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'composite_list'
    // ctype is '_composite_list_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("composite_list");
    tt->descr = tdrpStrDup("List of input datasets that need compositing.");
    tt->help = tdrpStrDup("  NUM :   Input dataset number requiring compositing\n          (first one is 0)\n  COMPOSITEMIN : Minimum height to composite.\n  COMPOSITEMAX : Maximum height to composite.\n\nFor example, if this is set as follows :\n\ncomposite_list = {\n                   {0, 0.5, 3.5},\n                   {2, 4.0, 6.5}\n                  };\n\nThe the first input data set (number 0) will be composited\nfrom height 0.5 to 3.5, and the third input data set (number\n2) will be composited from level 4.0 to 6.5. Default is to do\nno compositing, ie. an empty list.\n\nThere is one rather\nsubtle point - the item composite_list should\nbe set as an array in the cronus param file:\n\ncomposite_list = {\n                  {20, 1.0, 5.0 }\n};\n\nAnd never as a single value, like this :\n\ncomposite_list = { 20, 1.0, 5.0 }\n\nOtherwise cronusPointSelect cannot do compositing.");
    tt->array_offset = (char *) &_composite_list - &_start_;
    tt->array_n_offset = (char *) &composite_list_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(composite_list_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("composite_list_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("num");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_composite_list->num - (char *) _composite_list;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("compositeMin");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_composite_list->compositeMin - (char *) _composite_list;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("compositeMax");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_composite_list->compositeMax - (char *) _composite_list;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'interest_fields'
    // ctype is '_interest_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("interest_fields");
    tt->descr = tdrpStrDup("Interest fields to be used in computing forecasts");
    tt->help = tdrpStrDup("  FORECAST:       user-defined forecast name from\n                  'forecasts' parameter list.\n  OUTPUT_FIELD:   user-defined output field name.\n  INPUT_DATASET:  user-defined input dataset name from\n                  'input_datasets' parameter list.\n  INPUT_FIELD:    input field name from mdv file.\n  WEIGHT:         weight to be applied to interest field\n                  in computing final forecast\n  FUZZY_FCN:      name of fuzzy logic membership function \n                  to be applied to input field data.\n                  Leave black to disable application\n                  of membership function\n");
    tt->array_offset = (char *) &_interest_fields - &_start_;
    tt->array_n_offset = (char *) &interest_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_fields_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("interest_fields_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("forecast");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_interest_fields->forecast - (char *) _interest_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_field");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_interest_fields->output_field - (char *) _interest_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("input_dataset");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_interest_fields->input_dataset - (char *) _interest_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("input_field");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_interest_fields->input_field - (char *) _interest_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("weight");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_interest_fields->weight - (char *) _interest_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("fuzzy_fcn");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_interest_fields->fuzzy_fcn - (char *) _interest_fields;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("not_set");
      tt->struct_vals[1].s = tdrpStrDup("not_set");
      tt->struct_vals[2].s = tdrpStrDup("not_set");
      tt->struct_vals[3].s = tdrpStrDup("not_set");
      tt->struct_vals[4].f = 0;
      tt->struct_vals[5].s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'forecast_transformations'
    // ctype is '_forecast_transformations_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("forecast_transformations");
    tt->descr = tdrpStrDup("Postprocessing data transformations to be performed on the final forecast");
    tt->help = tdrpStrDup("  FORECAST:       user-defined forecast name from\n                  'forecasts' parameter list.\n  INTEREST_MASK:  user-defined interest field name from\n                  'interest_fields.output_field' parameter list\n                  used for masking out final forecast.\n                  Leave blank to disable masking.\n  MEAN_EXTENT:    extent of neighboring grid cells used in\n                  calculating mean values for smoothing\n                  final forecast.  Set to 0 to disable smoothing");
    tt->array_offset = (char *) &_forecast_transformations - &_start_;
    tt->array_n_offset = (char *) &forecast_transformations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(forecast_transformations_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("forecast_transformations_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("forecast");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_forecast_transformations->forecast - (char *) _forecast_transformations;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest_mask");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_forecast_transformations->interest_mask - (char *) _forecast_transformations;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("mean_extent");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_forecast_transformations->mean_extent - (char *) _forecast_transformations;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("not_set");
      tt->struct_vals[1].s = tdrpStrDup("not_set");
      tt->struct_vals[2].i = 0;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("FUZZY LOGIC MEMBERSHIP FUNCTIONS\n\nThe types of fuzzy function are :\n\nDISTANCE_RAMP : Equivalent to RAMP\n\nLINEAR_BELL : All four x,y points are used.\n              The intent is to make a shape like :\n\n                  ______________\n                 /              \\ \n         ______ /                \\______ \n\n              NOTE that for the middle section of the function,\n              the value y3 is used, there is NO interpolation. The\n              code in libs/euclid/src/include/euclid/FuzzyFcn.hh\n              is as follows :\n\n         if ( value <= x[0] )\n           answer = y[0];\n         else if ( value > x[0] && value <= x[1] )\n           answer = ((value-x[0])/(x[1]-x[0]))*(y[1]-y[0]) + y[0];\n         else if ( value > x[1] && value <= x[2] )\n           answer = y[2];\n         else if ( value > x[2] && value <= x[3] )\n           answer = ((value-x[2])/(x[3]-x[2]))*(y[3]-y[2]) + y[2];\n         else\n           answer = y[3];\n\nRAMP : The first two x,y points are used.\n       Linear interpolation is done between the two\n       points. The end y values are used outside of\n       the x range specified. The code is :\n\n       if ( value < x[0] )\n         answer = y[0];\n       else if ( value > x[1] )\n         answer = y[1];\n       else\n        answer = ((value-x[0])/(x[1]-x[0]))*(y[1]-y[0]) + y[0];\n\n       The shape is :\n\n               ____________\n              /\n             /\n            /\n------------\n\nRESCALE : Only the scale value is used. Non-missing input values\n          are mutliplied by the scale.\n\nSTEP : x,y pairs are taken so long as the x values are\n       increasing in value. When an x value that decreases\n       in value is encountered, it is rejected and no further\n       reading is done.\n\n       The highest value of i for which value < x(i) is found\n       and then y(i) is returned. The code is :\n\n       answerFound = false;\n       numJumps = y.size() - 1;\n       for( i=0;  !answerFound && i < numJumps; i++ ) {\n        if ( value <= x[i] ) {\n         answer = y[i];\n         answerFound = true;\n        }\n       }\n      if ( !answerFound ) {\n       answer = y[i];\n      }\n\n      The shape looks something like : \n\n                               ________\n                    __________|\n            _______|\n           |\n------------\n\nFOUR_POINT_RAMP : Similar to RAMP but all four x,y pairs are used.\n                Interpolation is done between the points. The\n                end y values are used outside of the x range.\n                The code is :\n\n           if ( value <= x[0] )\n              answer = y[0];\n           else if ( value > x[0] && value <= x[1] )\n              answer = ((value-x[0])/(x[1]-x[0]))*(y[1]-y[0]) + y[0];\n           else if ( value > x[1] && value <= x[2] )\n              answer = ((value-x[1])/(x[2]-x[1]))*(y[2]-y[1]) + y[1];\n           else if ( value > x[2] && value <= x[3] )\n              answer = ((value-x[2])/(x[3]-x[2]))*(y[3]-y[2]) + y[2];\n           else\n              answer = y[3];\n\n                The shape looks like :\n\n                              ___________\n                             /\n                            /\n                           + \n                     +\n               +\n         /\n________/\n\nY values are limited to the range -1, 1, the value for shrink must\nnot be negative - it is reserved for future use.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'fuzzy_field'
    // ctype is '_fuzzy_field'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy_field");
    tt->descr = tdrpStrDup("shrink: in km");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy_field - &_start_;
    tt->array_n_offset = (char *) &fuzzy_field_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_field);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("fuzzy_field");
    tt->struct_def.nfields = 12;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy_field->interest - (char *) _fuzzy_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("fz_fn_type_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("type");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy_field->type - (char *) _fuzzy_field;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("fz_fn_type_t");
        tt->struct_def.fields[1].enum_def.nfields = 6;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("DISTANCE_RAMP");
        tt->struct_def.fields[1].enum_def.fields[0].val = DISTANCE_RAMP;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("LINEAR_BELL");
        tt->struct_def.fields[1].enum_def.fields[1].val = LINEAR_BELL;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("RAMP");
        tt->struct_def.fields[1].enum_def.fields[2].val = RAMP;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("RESCALE");
        tt->struct_def.fields[1].enum_def.fields[3].val = RESCALE;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("STEP");
        tt->struct_def.fields[1].enum_def.fields[4].val = STEP;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("FOUR_POINT_RAMP");
        tt->struct_def.fields[1].enum_def.fields[5].val = FOUR_POINT_RAMP;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_fuzzy_field->x1 - (char *) _fuzzy_field;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_fuzzy_field->y1 - (char *) _fuzzy_field;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_fuzzy_field->x2 - (char *) _fuzzy_field;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_fuzzy_field->y2 - (char *) _fuzzy_field;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_fuzzy_field->x3 - (char *) _fuzzy_field;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_fuzzy_field->y3 - (char *) _fuzzy_field;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_fuzzy_field->x4 - (char *) _fuzzy_field;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_fuzzy_field->y4 - (char *) _fuzzy_field;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("shrink");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_fuzzy_field->shrink - (char *) _fuzzy_field;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("scale");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_fuzzy_field->scale - (char *) _fuzzy_field;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("not_set");
      tt->struct_vals[1].e = DISTANCE_RAMP;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 0;
      tt->struct_vals[7].d = 0;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].d = 0;
      tt->struct_vals[10].d = 0;
      tt->struct_vals[11].d = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
