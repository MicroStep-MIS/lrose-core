// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program DrawFmqPolygonStats
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DrawFmqPolygonStats");
    tt->comment_text = tdrpStrDup("This program works with CIDD to allow the user to enter a polygon that is then used to calculate some statistics in the defined fields.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters controlling debug outputs.");
    tt++;
    
    // Parameter 'debug_level'
    // ctype is '_debug_level_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug_level");
    tt->descr = tdrpStrDup("Debug level");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug_level - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_level_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[2].val = DEBUG_EXTRA;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROCESS PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT/OUTPUT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_type'
    // ctype is '_input_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_type");
    tt->descr = tdrpStrDup("Type of program input");
    tt->help = tdrpStrDup("\tINPUT_DRAW_FMQ - The input comes from a CIDD draw fmq.\n\tINPUT_GEN_POLY_SPDB - The input comes from a GenPoly polygon statistics SPDB database. This is used to regenerate statistics for previously entered polygons.\n");
    tt->val_offset = (char *) &input_type - &_start_;
    tt->enum_def.name = tdrpStrDup("input_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INPUT_DRAW_FMQ");
      tt->enum_def.fields[0].val = INPUT_DRAW_FMQ;
      tt->enum_def.fields[1].name = tdrpStrDup("INPUT_GEN_POLY_SPDB");
      tt->enum_def.fields[1].val = INPUT_GEN_POLY_SPDB;
    tt->single_val.e = INPUT_DRAW_FMQ;
    tt++;
    
    // Parameter 'cidd_draw_fmq'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cidd_draw_fmq");
    tt->descr = tdrpStrDup("URL for the CIDD drawing FMQ");
    tt->help = tdrpStrDup("Must match the FMQ URL specified in the dexport_info parameter in the associated CIDD parameter file.\nUsed only if input_type is set to INPUT_DRAW_FMQ.");
    tt->val_offset = (char *) &cidd_draw_fmq - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::fmq/poly_stats");
    tt++;
    
    // Parameter 'input_gen_poly_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_gen_poly_url");
    tt->descr = tdrpStrDup("URL for the input GenPoly SPDB database");
    tt->help = tdrpStrDup("Used only if input_type is set to INPUT_GEN_POLY.");
    tt->val_offset = (char *) &input_gen_poly_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/polygon_stats_orig");
    tt++;
    
    // Parameter 'apply_polygon_to_all_elevations'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_polygon_to_all_elevations");
    tt->descr = tdrpStrDup("Flag indicating whether to use the same polygon for all vertical levels.");
    tt->help = tdrpStrDup("If true, the entered polygon will be applied to all elevation angles for that radar volume. In this case, the user-entered polygon ID number will be used for the polygon at the lowest elevation angle and this number will be incremented for the polygons at higher elevation angles. The polygon may be changed by entering another polygon with the same ID number.\nIf false, the user must enter a different polygon at each elevation angle of the data.\nUsed only if input_type is set to INPUT_DRAW_FMQ. If input type is INPUT_GEN_POLY_SPDB then each polygon in the SPDB database will be applied only to the elevation angle for that polygon. ");
    tt->val_offset = (char *) &apply_polygon_to_all_elevations - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'start_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("start_time");
    tt->descr = tdrpStrDup("Reprocessing start time");
    tt->help = tdrpStrDup("Used only if input_type is set to INPUT_GEN_POLY.");
    tt->val_offset = (char *) &start_time - &_start_;
    tt->single_val.s = tdrpStrDup("2008 2 2 0 0 0");
    tt++;
    
    // Parameter 'end_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("end_time");
    tt->descr = tdrpStrDup("Reprocessing end time");
    tt->help = tdrpStrDup("Used only if input_type is set to INPUT_GEN_POLY.");
    tt->val_offset = (char *) &end_time - &_start_;
    tt->single_val.s = tdrpStrDup("2008 2 3 0 0 0");
    tt++;
    
    // Parameter 'input_mdv_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_mdv_url");
    tt->descr = tdrpStrDup("URL for the MDV grids used to calculate the statistics.");
    tt->help = tdrpStrDup("These grids must be PPI grids.");
    tt->val_offset = (char *) &input_mdv_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::mdv/data");
    tt++;
    
    // Parameter 'mdv_search_margin'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("mdv_search_margin");
    tt->descr = tdrpStrDup("Search margin, in seconds, for the input MDV data files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &mdv_search_margin - &_start_;
    tt->single_val.l = 600;
    tt++;
    
    // Parameter 'use_mdv_field_names'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_mdv_field_names");
    tt->descr = tdrpStrDup("Flag indicating whether to use field names or field numbers to identify the fields in the input MDV files.");
    tt->help = tdrpStrDup("All fields must be identified in the same manner.");
    tt->val_offset = (char *) &use_mdv_field_names - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_spdb_url");
    tt->descr = tdrpStrDup("URL for the GenPoly SPDB database that will contain the entered polygon and the associated statistics.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/poly_stats");
    tt++;
    
    // Parameter 'stat_fields'
    // ctype is '_stat_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("stat_fields");
    tt->descr = tdrpStrDup("Statistics will be calculated for each of these fields.");
    tt->help = tdrpStrDup("\tfield_name - The name of the field as it appears in the MDV file. Used only if use_mdv_field_names is set to true.\n\tfield_num - The 0-based index of the field in the MDV file. Used only if use_mdv_field_names is set to false.\n\tis_log - Flag indicating whether this is a dBz value. If true, the statistics will be calculated on the inverse log of the data values.\n");
    tt->array_offset = (char *) &_stat_fields - &_start_;
    tt->array_n_offset = (char *) &stat_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(stat_fields_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("stat_fields_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_stat_fields->field_name - (char *) _stat_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_stat_fields->field_num - (char *) _stat_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("is_log");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_stat_fields->is_log - (char *) _stat_fields;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("RHO");
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].b = pFALSE;
    tt++;
    
    // Parameter 'dbz_field'
    // ctype is '_dbz_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbz_field");
    tt->descr = tdrpStrDup("Dbz field to use in calculating the statistics on the ZDR field.");
    tt->help = tdrpStrDup("Statistics will be calculated on this field as well, so it shouldn't be included in the stat_fields list.");
    tt->val_offset = (char *) &dbz_field - &_start_;
    tt->struct_def.name = tdrpStrDup("dbz_fields_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dbz_field.field_name - (char *) &dbz_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dbz_field.field_num - (char *) &dbz_field;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'zdr_field'
    // ctype is '_dbz_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("zdr_field");
    tt->descr = tdrpStrDup("Zdr field");
    tt->help = tdrpStrDup("The dbz_field will be used to separate the ZDR values into their horizontal and vertical components for statistics calculations. The output will include statistics for the horizontal components (the dbz_field), the veritcal components and ZDR itself.");
    tt->val_offset = (char *) &zdr_field - &_start_;
    tt->struct_def.name = tdrpStrDup("dbz_fields_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &zdr_field.field_name - (char *) &zdr_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &zdr_field.field_num - (char *) &zdr_field;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("ZDR");
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'threshold_fields'
    // ctype is '_threshold_field_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("threshold_fields");
    tt->descr = tdrpStrDup("Fields to use for thresholding.");
    tt->help = tdrpStrDup("This field must be in the MDV file with the statistics fields.\n\tfield_name - The name of the field as it appears in the MDV file. Used only if use_mdv_field_names is set to true.\n\tfield_num - The 0-based index of the field in the MDV file. Used only if use_mdv_field_names is set to false.\n\tcomparison - Comparison to use on the threshold field. For example, if this is set to THRESH_GREATER_THAN, then the statistics will only be calculated using the statistic field values with in the polygon where the threshold field value is greater than the specified threshold value.\n\tvalue - Value to use for thresholding.\nNote that data values where the threshold field is missing will not be included in the calculated statistics.\n");
    tt->array_offset = (char *) &_threshold_fields - &_start_;
    tt->array_n_offset = (char *) &threshold_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(threshold_field_info_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("threshold_field_info_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_threshold_fields->field_name - (char *) _threshold_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_threshold_fields->field_num - (char *) _threshold_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("thresh_compare_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("comparison");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_threshold_fields->comparison - (char *) _threshold_fields;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("thresh_compare_t");
        tt->struct_def.fields[2].enum_def.nfields = 6;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("THRESH_GREATER_THAN");
        tt->struct_def.fields[2].enum_def.fields[0].val = THRESH_GREATER_THAN;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("THRESH_GREATER_THAN_OR_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[1].val = THRESH_GREATER_THAN_OR_EQUAL;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("THRESH_LESS_THAN");
        tt->struct_def.fields[2].enum_def.fields[2].val = THRESH_LESS_THAN;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("THRESH_LESS_THAN_OR_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[3].val = THRESH_LESS_THAN_OR_EQUAL;
        tt->struct_def.fields[2].enum_def.fields[4].name = tdrpStrDup("THRESH_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[4].val = THRESH_EQUAL;
        tt->struct_def.fields[2].enum_def.fields[5].name = tdrpStrDup("THRESH_NOT_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[5].val = THRESH_NOT_EQUAL;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_threshold_fields->value - (char *) _threshold_fields;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].e = THRESH_GREATER_THAN_OR_EQUAL;
      tt->struct_vals[3].d = 10;
    tt++;
    
    // Parameter 'dropsize_thresh_fields'
    // ctype is '_threshold_field_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dropsize_thresh_fields");
    tt->descr = tdrpStrDup("List of threshold fields to use when calculating the drop size statistics.");
    tt->help = tdrpStrDup("The grid values must satisfy the threhsold_field_info criteria along with all of these criteria in order to be included in the drop size statistic calculations.");
    tt->array_offset = (char *) &_dropsize_thresh_fields - &_start_;
    tt->array_n_offset = (char *) &dropsize_thresh_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(threshold_field_info_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("threshold_field_info_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dropsize_thresh_fields->field_name - (char *) _dropsize_thresh_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dropsize_thresh_fields->field_num - (char *) _dropsize_thresh_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("thresh_compare_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("comparison");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_dropsize_thresh_fields->comparison - (char *) _dropsize_thresh_fields;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("thresh_compare_t");
        tt->struct_def.fields[2].enum_def.nfields = 6;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("THRESH_GREATER_THAN");
        tt->struct_def.fields[2].enum_def.fields[0].val = THRESH_GREATER_THAN;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("THRESH_GREATER_THAN_OR_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[1].val = THRESH_GREATER_THAN_OR_EQUAL;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("THRESH_LESS_THAN");
        tt->struct_def.fields[2].enum_def.fields[2].val = THRESH_LESS_THAN;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("THRESH_LESS_THAN_OR_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[3].val = THRESH_LESS_THAN_OR_EQUAL;
        tt->struct_def.fields[2].enum_def.fields[4].name = tdrpStrDup("THRESH_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[4].val = THRESH_EQUAL;
        tt->struct_def.fields[2].enum_def.fields[5].name = tdrpStrDup("THRESH_NOT_EQUAL");
        tt->struct_def.fields[2].enum_def.fields[5].val = THRESH_NOT_EQUAL;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_dropsize_thresh_fields->value - (char *) _dropsize_thresh_fields;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("RHOHV");
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].e = THRESH_GREATER_THAN_OR_EQUAL;
      tt->struct_vals[3].d = 0.95;
    tt++;
    
    // Parameter 'min_dropsize_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_dropsize_zdr");
    tt->descr = tdrpStrDup("Minimum ZDR value used when calculating dropsize statistics.");
    tt->help = tdrpStrDup("If the ZDR value is greater than this value, then this value will be used in the calculations instead.");
    tt->val_offset = (char *) &min_dropsize_zdr - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_dropsize_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_dropsize_zdr");
    tt->descr = tdrpStrDup("Maximum ZDR value used when calculating dropsize statistics.");
    tt->help = tdrpStrDup("If the ZDR value is greater than this value, then this value will be used in the calculations instead.");
    tt->val_offset = (char *) &max_dropsize_zdr - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DISCRETE FIELD STATISTICS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'discrete_fields'
    // ctype is '_discrete_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("discrete_fields");
    tt->descr = tdrpStrDup("List of discrete fields to process. These fields will have mode and a percentage of each discrete value calculated and included in the SPDB database. They will also be included in the histogram output if that is requested.");
    tt->help = tdrpStrDup("\tfield_name - The name of the field as it appears in the MDV file. Used only if use_mdv_field_names is set to true.\n\tfield_num - The 0-based index of the field in the MDV file. Used only if use_mdv_field_names is set to false.\n");
    tt->array_offset = (char *) &_discrete_fields - &_start_;
    tt->array_n_offset = (char *) &discrete_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(discrete_fields_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("discrete_fields_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_discrete_fields->field_name - (char *) _discrete_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_discrete_fields->field_num - (char *) _discrete_fields;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("PID");
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("HISTOGRAM PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_histogram_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_histogram_file");
    tt->descr = tdrpStrDup("Flag indicating whether to write the polygon histograms to a file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_histogram_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'histogram_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("histogram_file_path");
    tt->descr = tdrpStrDup("Full path for the histogram file.");
    tt->help = tdrpStrDup("Used only if write_histogram_file is set to true.");
    tt->val_offset = (char *) &histogram_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./histograms.txt");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
