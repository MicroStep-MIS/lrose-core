/*********************************************************
 * parameter definitions for Hsrl2Radx
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * June 2015
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Reads UW HSRL data files in CfRadial format, with range in ht MSL, and converts to a standard CfRadial, with range measured from the instrument instead of MSL.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME_FMQ, REALTIME_FILE, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = 
  "In REALTIME_FMQ, the program reads raw rays from an FMQ and writes output to an FMQ.  "
  "In REALTIME_FILE mode, the program waits for a new input file.  "
  "In ARCHIVE mode, it moves through the data between the start "
  "and end times set on the command line. "
  "In FILELIST mode, it moves through the list of file names "
  "specified on the command line. "
  "Paths (in ARCHIVE mode, at least) MUST contain a "
  "day-directory above the data file -- ./data_file.ext will not "
  "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef string {
  p_default = "/tmp/fmq/hsrl_raw";
  p_descr = "Path to input FMQ.";
  p_help = "REATIME_FMQ mode only. The FMQ consists of 2 files, ??.buf and ??.stat. Specify only the root, not the extensions.";
} input_fmq_path;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "REALTIME_FILE mode only. Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is _latest_data_info file available?";
  p_help = "REALTIME_FILE mode only. If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.";
} latest_data_info_avail;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to recurse to subdirectories while looking for new files.";
  p_help = "REALTIME_FILE mode only. If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE."; 
} search_recursively;

paramdef int {
  p_default = 5;
  p_descr = "Maximum depth for recursive directory scan.";
  p_help = "REALTIME_FILE mode only. Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.";
} max_recursion_depth;

paramdef int {
  p_default = 2;
  p_min = 1;
  p_descr = "Sleep time between checking directory for input - secs.";
  p_help = "REALTIME_FILE mode only. If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.";
} wait_between_checks;

paramdef int {
  p_default = 5;
  p_descr = "File quiescence when checking for files - secs.";
  p_help = "REALTIME_FILE mode only. This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.";
} file_quiescence;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "REALTIME_FILE mode only. If set, only files with this extension will be processed.";
} search_ext;

commentdef {
  p_header = "OPTION TO OVERRIDE GATE GEOMETRY";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the start range.";
  p_help = "If true, the specified start range in this file will be used. If not, the start range in the data file will be used.";
} override_start_range;

paramdef double {
  p_default = 0.0;
  p_descr = "Specified start range (km).";
  p_help = "See override_start_range.";
} start_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the gate spacing.";
  p_help = "If true, the specified gate spacing in this file will be used. If not, the gate spacing in the data file will be used.";
} override_gate_spacing;

paramdef double {
  p_default = 0.0075;
  p_descr = "Specified gate spacing (km).";
  p_help = "See override_gate_spacing.";
} gate_spacing_km;

commentdef {
  p_header = "OPTION TO READ GEOREF DATA FROM AIRCRAFT SYSTEM";
  p_text = "If not read from aircraft, need to set the instrument location from the config file.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the instrument location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} read_georef_data_from_aircraft_system;

paramdef double {
  p_default = -999;
  p_descr = "Instrument latitude (deg).";
  p_help = "See override_instrument_location.";
} instrument_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Instrument longitude (deg).";
  p_help = "See override_instrument_location.";
} instrument_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Instrument altitude (meters).";
  p_help = "See override_instrument_location.";
} instrument_altitude_meters;

commentdef {
  p_header = "OPTION TO SET RANGE RELATIVE TO INSTRUNENT - CfRadial files only";
  p_text = "This applies to python-generated CfRadial files only";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert from ht in MSL to range relative to instrument.";
  p_help = "The HSRL CfRadial files have range stored in height MSL rather than range from the instrument. This option allows you to convert to distance from the instrument.";
} set_range_relative_to_instrument;

paramdef int {
  p_default = 0;
  p_descr = "Integer value for telescope direction is up.";
  p_help = "This value indicates the telescope is pointing up. If the telescope_direction value is not equal to this value it is pointing down.";
} telescope_direction_is_up;

commentdef {
  p_header = "OPTION TO CORRECT ANTENNA ANGLES";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to apply an offset to the azimuth values.";
  p_help = "If TRUE, this offset will be ADDED to the measured azimuth angles. This is useful, for example, in the case of a mobile platform which is not set up oriented to true north. Suppose you have a truck (like the DOWs) which is oriented off true north. Then if you add in the truck HEADING relative to true north, the measured azimuth angles will be adjusted by the heading, to give azimuth relative to TRUE north.";
} apply_azimuth_offset;

paramdef double {
  p_default = 0;
  p_descr = "Azimuth offset (degrees).";
  p_help = "See 'apply_azimuth_offset'. This value will be ADDED to the measured azimuths.";
} azimuth_offset;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to apply an offset to the elevation values.";
  p_help = "If TRUE, this offset will be ADDED to the measured elevation angles. This is useful to correct for a systematic bias in measured elevation angles.";
} apply_elevation_offset;

paramdef double {
  p_default = 0;
  p_descr = "Elevation offset (degrees).";
  p_help = "See 'apply_elevation_offset'. This value will be ADDED to the measured elevations.";
} elevation_offset;

commentdef {
  p_header = "READING RAW NetCDF DATA FILES";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to combine range gates on read.";
  p_help = "If true, the specified number of range gates will be combined on read to create mean values with lower noisiness.";
} combine_bins_on_read;

paramdef int {
  p_default = 1;
  p_descr = "Number of bins to combine into a single gate.";
  p_help = "In range, we will combine this number of gates to produce a data set with lower spatial resolution but less noiry data.";
} n_bins_per_gate;

paramdef double {
  p_default = -0.300;
  p_descr = "Start range to first bin (km).";
  p_help = "Takes into account dead zone caused by digitizer starting before the pulse.";
} raw_bin_start_range_km;

paramdef double {
  p_default = 0.0075;
  p_descr = "Spacing of raw bins (km).";
  p_help = "The distance between the ray bins in km.";
} raw_bin_spacing_km;

paramdef string {
  p_default = "combined_hi";
  p_descr = "Name of combined_hi field in netCDF file.";
  p_help = "";
} combined_hi_field_name;

paramdef string {
  p_default = "combined_lo";
  p_descr = "Name of combined_lo field in netCDF file.";
  p_help = "";
} combined_lo_field_name;

paramdef string {
  p_default = "molecular";
  p_descr = "Name of molecular field in netCDF file.";
  p_help = "";
} molecular_field_name;

paramdef string {
  p_default = "cross";
  p_descr = "Name of cross field in netCDF file.";
  p_help = "";
} cross_field_name;

paramdef string {
  p_default = "/h/eol/brads/git/hsrl_configuration/projDir/calfiles/baseline_correction_20150601T0000.blc";
  p_descr = "location of baseline calibration file.";
  p_help = "";
} baseline_calibration_path;

paramdef string {
  p_default = "/h/eol/brads/git/hsrl_configuration/projDir/calfiles/diff_default_geofile_20120201T0000.geo";
  p_descr = "location of diff_default_geofile calibration file.";
  p_help = "";
} diff_default_geofile_path;

paramdef string {
  p_default = "/h/eol/brads/git/hsrl_configuration/projDir/calfiles/geofile_default_20150601T0000.geo";
  p_descr = "location of geofile_default calibration file.";
  p_help = "";
} geofile_default_path;

paramdef string {
  p_default = "/h/eol/brads/git/hsrl_configuration/projDir/calfiles/afterpulse_default_20061001T0000.ap";
  p_descr = "location of afterpulse_default calibration file.";
  p_help = "";
} afterpulse_default_path;

paramdef string {
  p_default = "/h/eol/brads/git/hsrl_configuration/projDir/calfiles/calvals_gvhsrl.txt";
  p_descr = "location of calvals_gvhsrl calibration file.";
  p_help = "";
} calvals_gvhsrl_path;

paramdef string {
  p_default = "combined_hi_dead_time";
  p_descr = "Name of combined_hi_dead_time field in CalVals file.";
  p_help = "";
} combined_hi_dead_time_name;

paramdef string {
  p_default = "combined_lo_dead_time";
  p_descr = "Name of combined_lo_dead_time field in CalVals file.";
  p_help = "";
} combined_lo_dead_time_name;

paramdef string {
  p_default = "cross_pol_dead_time";
  p_descr = "Name of cross_pol_dead_time field in CalVals file.";
  p_help = "";
} cross_pol_dead_time_name;

paramdef string {
  p_default = "molecular_dead_time";
  p_descr = "Name of molecular_dead_time field in CalVals file.";
  p_help = "";
} molecular_dead_time_name;

paramdef string {
  p_default = "binwidth";
  p_descr = "Name of binWidth field in CalVals file.";
  p_help = "";
} bin_width_name;

paramdef string {
  p_default = "i2_scan_adjustment";
  p_descr = "Name of coefficient field in CalVals file.";
  p_help = "";
} scan_adjustment_name;

commentdef {
  p_header = "OUTPUT FMQ IN REALTIME_FMQ mode";
}

paramdef string {
  p_default = "/tmp/fmq/hsrl_moments";
  p_descr = "Path to output FMQ.";
  p_help = "REATIME_FMQ mode only. The FMQ consists of 2 files, ??.buf and ??.stat. Specify only the root, not the extensions.";
} output_fmq_path;

commentdef {
  p_header = "OUTPUT FMQ DETAILS";
};

paramdef string {
  p_default = "fmqp:://localhost::/tmp/fmq/hsrl_raw";
  p_descr = "URL for output FMQ.";
  p_help = "The FMQ consists of 2 files, ??.buf and ??.stat.";
} output_fmq_url;

paramdef int {
  p_default = 1000000;
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer.";
} output_fmq_size;

paramdef int {
  p_default = 500;
  p_descr = "Number of slots in the output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = false;
  p_descr = "Option to compress the FMQ data on write.";
  p_help = "This helps to keep the size of the queue entries small. Should only be used for remote FMQs over slow networks.";
} output_fmq_compress;

paramdef int {
  p_default = 10;
  p_descr = "Number of rays between sending params.";
  p_help = "The params will be sent when this number of rays have been written.";
} nrays_for_params;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set up the FMQ as blocking.";
  p_help = "If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, Test2Dsr will then block until there is space for more data.";
} write_blocking;

paramdef int {
  p_private = TRUE;
  p_default = 5;
  p_descr = "Number of seconds between reports to DataMapper.";
  p_help = "If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.";
} data_mapper_report_interval;

commentdef {
  p_header = "OPTION TO SPECIFY FIELD NAMES FOR OUTPUT FILES";
}

paramdef boolean {
  p_default = false;
  p_descr = "Set the field names and output encoding";
  p_help = "If false, all fields will be used.";
} set_output_fields;

typedef struct {
  string input_field_name; 
  string output_field_name; 
  string long_name; 
  string standard_name; 
  string output_units;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {
      input_field_name = "beta_a_backscat",
      output_field_name = "beta_a_backscat",
      long_name = "particulate_backscatter_cross_section_per_unit_volume",
      standard_name = "beta_a_backscat",
      output_units = "1/m.st"
    }
    ,
    {
      input_field_name = "extinction",
      output_field_name = "extinction",
      long_name = "aerosol_plus_molecular_extinction_profile",
      standard_name = "aerosol_plus_molecular_extinction_profile",
      output_units = "1/km"
    }
    ,
    {
      input_field_name = "od",
      output_field_name = "od",
      long_name = "optical_depth",
      standard_name = "aerosol_plus_molecular_optical_depth",
      output_units = ""
    }
    ,
    {
      input_field_name = "linear_depol",
      output_field_name = "linear_depol",
      long_name = "linear_depolarization_ratio_for_particulate",
      standard_name = "linear_depolarization_ratio",
      output_units = ""
    }
    ,
    {
      input_field_name = "temperature_profile",
      output_field_name = "temperature_profile",
      long_name = "temperature_profile",
      standard_name = "temperature_profile",
      output_units = "K"
    }
    ,
    {
      input_field_name = "pressure_profile",
      output_field_name = "pressure_profile",
      long_name = "pressure_profile",
      standard_name = "pressure_profile",
      output_units = "hpa"
    }
  };
  p_descr = "Output field details.";
  p_help = "Set the details for the output fields. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long name or standard name are empty, the existing names are used.";
} output_fields[];

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out the unspecified fields as they are.";
  p_help = "If false, only the fields listed in output_fields will be written. If this is true, all other fields will be written unchanged.";
} write_other_fields_unchanged;

paramdef boolean {
  p_default = false;
  p_descr = "Option to exclude fields in the specified list.";
  p_help = "If true, the specified fields will be excluded. This may be easier than specifiying all of the fields to be included, if that list is very long.";
} exclude_specified_fields;

paramdef string {
  p_default = { "DBZ", "VEL" };
  p_descr = "List of fields to be excluded.";
  p_help = "List the names to be excluded";
} excluded_fields[];

commentdef {
  p_header = "OPTION TO OVERRIDE SELECTED GLOBAL ATTRIBUTES";
}

paramdef string {
  p_default = "";
  p_descr = "Option to override the version global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the version attribute.";
} version_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the title global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the title attribute.";
} title_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the institution global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the institution attribute.";
} institution_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the references global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the references attribute.";
} references_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the source global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the source attribute.";
} source_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the history global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the history attribute.";
} history_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the comment global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the comment attribute.";
} comment_override;

paramdef string {
  p_default = "";
  p_descr = "Option to override the author global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to override the author attribute.";
} author_override;

commentdef {
  p_header = "OUTPUT FORMAT";
  p_text = "Files are written in CfRadial";
}

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT OPTIONS FOR CfRadial FILES";
}

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the instrument name.";
  p_help = "If true, the name provided will be used.";
} override_instrument_name;

paramdef string {
  p_default = "unknown";
  p_descr = "Instrument name.";
  p_help = "See override_instrument_name.";
} instrument_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the site name.";
  p_help = "If true, the name provided will be used.";
} override_site_name;

paramdef string {
  p_default = "unknown";
  p_descr = "Site name.";
  p_help = "See override_site_name.";
} site_name;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.";
} output_filename_mode;

paramdef string {
  p_default = "";
  p_descr = "Optional prefix for output filename.";
  p_help = "If empty, the standard prefix will be used.";
} output_filename_prefix;

paramdef boolean {
  p_default = true;
  p_descr = "Option to include the instrument name in the file name.";
  p_help = "Default is true. Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.";
} include_instrument_name_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to include sub-seconds in date-time part of file name.";
  p_help = "Default is true. Only applies to CfRadial files. If true, the millisecs of the start and end time will be included in the file name.";
} include_subsecs_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use a hyphen between date and time in filename.";
  p_help = "Default is false. Only applies to CfRadial files. Normally an underscore is used.";
} use_hyphen_in_file_name_datetime_part;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;

