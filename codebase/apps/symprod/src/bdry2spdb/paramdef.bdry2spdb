/**********************************************************
 * paramdef.bdry2spdb
 *
 */

commentdef {
  p_header = "Reads boundary (e.g. gust front) data in ASCII files and converts to SPDB.";
}

/***********************************************************************
 * Debugging
 */

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = { false };
} debug;

paramdef long
{
  p_descr = "malloc debug level";
  p_help = "0 = none; 1 = corruption checking, 2 = records all malloc blocks and checks; 3 = printout of all mallocs etc.";
  p_min = { 0 };
  p_max = { 3 };
  p_default = { 0 };
} malloc_debug_level;

/***********************************************************************
 * Operational information
 */

paramdef string
{
  p_descr = "procmap instance";
  p_default = { "Test" };
} instance;

paramdef enum mode_t
{
  p_descr = "operational mode";
  p_help = "In ARCHIVE mode, exits after processing all files in the input directory; in REALTIME mode, keeps looking for new files in the input directory and processes them as they arrive.";
  p_options = { REALTIME,
                ARCHIVE };
  p_default = { REALTIME };
} mode;

paramdef long
{
  p_descr = "sleep seconds";
  p_help = "Number of seconds to sleep between looking for new input files.";
  p_min = { 1 };
  p_default = { 2 };
} sleep_seconds;

paramdef long
{
  p_descr = "processing delay in seconds";
  p_help = "The number of seconds to wait before processing an input file.  This delay allows activity on the file to finish before we start reading it.";
  p_default = { 1 };
} processing_delay;

paramdef string
{
  p_descr = "input directory";
  p_help = "Path for directory where Kavouras is putting the lightning files.";
  p_default = { "." };
} input_dir;

paramdef string
{
  p_descr = "input file substring";
  p_help = "Substring which is a part of every input file to be processed.";
  p_default = { ".ltg" };
} input_substring;

paramdef long
{
  p_descr = "expire seconds";
  p_help = "If >= 0, adds the given number of seconds to the product data time to determine the database expire time; if < 0, uses the expire time in the product as the expire time in the database.";
  p_default = { 360 };
} expire_secs;

paramdef boolean
{
  p_descr = "process old data flag";
  p_help = "If TRUE, all existing files in the input directory will be processed; if FALSE, only files received after starting this process will be used.";
  p_default = { true };
} process_old_data;

paramdef string
{
  p_descr = "SPDB destinations";
  p_help = "An array of destinations for the SPDB lightning data.  Note that the first element in this array MUST be the local disk version of the database if check_old_data is set to TRUE.";
} spdb_destinations[];
