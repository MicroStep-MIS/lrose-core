INSTALLING TITAN
================

Mike Dixon
RAP, NCAR, P.O.Box 3000, Boulder, CO, 80307-3000, USA
(303)-497-8440
dixon@ncar.ucar.edu

December 1994

Refer to README_DISTRIBUTION for details about retrieving the
software.

HOST OPERATING SYSTEM
=====================

Set the environment variable HOST_OS to one of the following:

      SUNOS4         (Sun BSD 4.3.x)
      SUNOS5         (Sun Solaris 2.x)
      IRIX4          (SGI 4.x)
      IRIX5          (SGI 5.x)
      HPUX           (HP)
      AIX            (IBM)
      ULTRIX         (DEC) (must define XDRU_SWAP for compiling)
                     Note: the Ultrix port is not complete.

DIRECTORY STRUCTURE AND ENVIRONMENT VARIABLES
=============================================

You will by now have retrieved the distribution into a directory.
Set the environment variable $RAP_DIR to this directory.

Then, set the following variables (assuming C shell):

  setenv RAP_MAKE_INC_DIR $RAP_DIR/make_include
  setenv RAP_MAKE_BIN_DIR $RAP_DIR/make_bin

Create directories for the include files, libraries, binaries,
docs and man pages and set the following:

  setenv RAP_INC_DIR ???/include
  setenv RAP_LIB_DIR ???/lib
  setenv RAP_BIN_DIR ???/bin
  setenv RAP_DOC_DIR ???/doc
  setenv RAP_MAN_DIR ???/man

The man and doc directories are not used much yet, but will be
used more in the future.

Create a directory for the titan operations, and set the following:

  setenv TITAN_HOME ???/titan

Optionally, for debugging and profiling, create directories and set
the following:

  setenv RAP_DEBUG_LIB_DIR ???/lib_debug
  setenv RAP_PROFILE_LIB_DIR ???/lib_profile

CONFIGURING MAKE FOR YOUR SYSTEM
================================

Check the file $RAP_DIR/make_include/dix_make.$HOST_OS

This file specifies the compiler options, the system include files
and the system libraries and library paths needed at link time.
Edit this file to match your system, and the compiler you wish
to use. It must be an ANSI-C compiler.

INSTALLING THE INCLUDE FILES
============================

cd $RAP_DIR/libraries
make install_include

INSTALLING THE LIBRARIES, AND RELATED EXECUTABLES
=================================================

cd $RAP_DIR/libraries
make depend (optional)
make all
make install_lib
make install_bin
make clean_all

This should compile the libraries and install them in $RAP_LIB_DIR.
Any relevant executables will be installed in $RAP_BIN_DIR.

INSTALLING THE TITAN EXECUTABLES
================================

cd $RAP_DIR/projects/titan/src
make depend (optional)
make all
make install_bin
make clean_all

This should compile the executables and install them in $RAP_BIN_DIR.

INSTALLING TITAN (map files, param files etc)
=============================================

cd $RAP_DIR/projects/titan
make install_titan

This will make the directories needed to run TITAN, and copy
relevant files into them. The subdirectories loaded with files are
color_scales, doc, maps, params, prologues and scripts. The subdirectories
created for files generated by running TITAN are cdata, clutter, output,
precip_forecast, storms and tables.

INSTALLING THE TITAN ANALYSIS EXECUTABLES
=========================================

cd $RAP_DIR/projects/titan_analysis/src
make depend (optional)
make all
make install_bin
make clean_all



If all the above steps were successful, intallation should be complete.




NOTES
=====

SOURCE STRUCTURE
----------------

Source is grouped as libraries and projects. In general, libraries
produce .a files, and projects produce executables. There can be
exceptions. For example, the tdrp library produces the executable
tdrp_gen which is used to convert tdrp parameter files into code.

Example directories are:

  $RAP_DIR/libraries/Makefile

  $RAP_DIR/libraries/dixutil/src/Makefile
  $RAP_DIR/libraries/dixutil/src/include/dix_util/*.h
  $RAP_DIR/libraries/dixutil/src/misc/Makefile
  $RAP_DIR/libraries/dixutil/src/misc/*.c
  $RAP_DIR/libraries/dixutil/src/graphics/Makefile
  $RAP_DIR/libraries/dixutil/src/graphics/*.c

  $RAP_DIR/libraries/toolsa/src/Makefile
  $RAP_DIR/libraries/toolsa/src/include/toolsa/*.h
  $RAP_DIR/libraries/toolsa/src/sockutil/Makefile
  $RAP_DIR/libraries/toolsa/src/sockutil/*.c
  $RAP_DIR/libraries/toolsa/src/servmap/Makefile
  $RAP_DIR/libraries/toolsa/src/servmap/*.c

  $RAP_DIR/projects/titan/params/*.params
  $RAP_DIR/projects/titan/color_scales/*.colors
  $RAP_DIR/projects/titan/maps/*.map
  $RAP_DIR/projects/titan/src/Makefile
  $RAP_DIR/projects/titan/src/storm_ident/Makefile
  $RAP_DIR/projects/titan/src/storm_ident/*.c
  $RAP_DIR/projects/titan/src/rview/Makefile
  $RAP_DIR/projects/titan/src/rview/*.c


POSSIBLE MAKEFILE TARGETS
-------------------------

  1. Compiling.

    all: default
    debug: -g option, perhaps using dbmalloc, or similar
    profile: -pg, for mprof, or similar
    opt: optimized
    lint: run lint on source files
    depend: produce header dependencies in Makefiles
    pure: link for purify

  2. Installing.

    install_include: install include files in $RAP_INC_DIR
    install_lib: install libraries in $RAP_LIB_DIR
    install_bin: install binaries in $RAP_BIN_DIR
    install_man: install man pages
    install_doc: install docs
    install_all: install_include install_lib install_bin
    install_debug_lib: install debug libs in $RAP_DEBUG_LIB_DIR
    install_profile_lib: install profile libs in $RAP_PROFILE_LIB_DIR

  3. Cleaning

    clean: remove *.o, *.ln, *~, core etc
    clean_lib: remove *.a
    clean_bin: remove executables
    clean_tdrp: remove files generated for tdrp applications
    clean_xdr: remove files generated for xdr applications
    clean_depend: remove dependencies - usually prior to checkin
    clean_all: clean clean_lib clean_bin


STANDARD COMPILATION AND INSTALLATION PROCEDURES
------------------------------------------------

A standard installation would go through the following steps:

1. For the libraries:

  make install_include
  make depend
  make (or make opt)
  make install_lib

2. For the projects:

  make depend
  make (or make opt)
  make install_bin

COMPILATION AND INSTALLATION PROCEDURES USING TDRP
--------------------------------------------------

If the tdrp paramdefs files are changed, tdrp_gen will be
needed for code generation.

Therefore, tdrp_gen must be made first, and the binary installed
in the path. Also, cpp must be in the path.

