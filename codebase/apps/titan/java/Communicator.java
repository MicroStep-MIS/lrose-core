///////////////////////////////////////////////////////////////////////
//
// Communicator
//
// Communicate with the radar
//
// Mike Dixon
//
// Dec 2002
//
////////////////////////////////////////////////////////////////////////

import java.util.*;
import javax.swing.*;

public class Communicator {
    
    private TrControl _app = null;
    private Parameters _params;
    private ControlPanel _controlPanel;
    private AScope _aScope;
    private MessageQueue _guiCommands; // generated by GUI actions
    private MessageQueue _commandsToRadar; // written to the radar
    private MessageQueue _repliesFromRadar; // read from the radar
    
    public Communicator(TrControl app,
			Parameters params,
			ControlPanel controlPanel,
			AScope aScope,
			MessageQueue guiCommands) {
	
	_app = app;
	_params = params;
	_guiCommands = guiCommands;
	_controlPanel = controlPanel;
	_aScope = aScope;

	// queues to talk to/from radar
	
	_commandsToRadar = new MessageQueue();
	_repliesFromRadar = new MessageQueue();
	
	// create writer and start
	
	Writer writer = new Writer();
	writer.start();
	
	// create reader and start

	Reader reader = new Reader();
	reader.start();

	// create the simulator and start
	
	Simulator simulator =
	    new Simulator(_params, _commandsToRadar, _repliesFromRadar);
	simulator.start();

    }

    public class Writer extends Thread {
	
	// Writer takes messages from the GUI and writes them to the radar
	
	public void run() {
	    
	    while (true) {
		
		// get a command from the queue
		
		AsciiMessage command = (AsciiMessage) _guiCommands.pop();
		
		if (command != null) {
		    // put it to the write queue
		    _commandsToRadar.push(command);
		} else {
		    // sleep a bit
		    Thread t = Thread.currentThread();
		    try { t.sleep(50); }
		    catch (InterruptedException e) { }
		}

	    } // while

	} // run()

    } // class Writer

    public class Reader extends Thread {

	// Reader reads messages from the radar
	
	public void run() {
	    
	    while (true) {
		
		// get a message from the read queue
		
		Message message = (Message) _repliesFromRadar.pop();
		
		if (message == null) {
		    // sleep a bit
		    Thread t = Thread.currentThread();
		    try { t.sleep(50); }
		    catch (InterruptedException e) { return; }
		    continue;
		}

		if (message.getType() == MessageType.ASCII) {
		    
		    AsciiMessage ascii = (AsciiMessage) message;
		    
		} else if (message.getType() == MessageType.BEAM) {
		    
		    BeamMessage beam = (BeamMessage) message;
		    _controlPanel.setAntennaPosition(beam.getEl(),
						     beam.getAz());

		    _aScope.setBeamMessage(beam);
		    
// 		    System.err.println("el: " + beam.getEl());
// 		    System.err.println("az: " + beam.getAz());
// 		    System.err.println("startRange: " + beam.getStartRange());
// 		    System.err.println("gateSpacing: " + beam.getGateSpacing());
// 		    System.err.println("prf: " + beam.getPrf());
// 		    System.err.println("nGates: " + beam.getNGates());
		    
		} else if (message.getType() == MessageType.STATUS) {
		    
		    StatusMessage status = (StatusMessage) message;

		    _controlPanel.setMainPowerIndicator(status.getMainPower());
		    _controlPanel.setMagnetronPowerIndicator(status.getMagnetronPower());
		    _controlPanel.setServoPowerIndicator(status.getServoPower());
		    _controlPanel.setRadiateIndicator(status.getRadiate());
		    
		}
		
	    } // while
	    
	} // run()

    } // Reader
    
}


