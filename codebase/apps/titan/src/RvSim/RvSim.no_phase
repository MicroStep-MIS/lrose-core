/**********************************************************************
 * TDRP params for RvSim
 **********************************************************************/

//======================================================================
//
// Program name: RvSim.
//
// RvSim simulates raw IQ data with multiple trips and writes it to a 
//   netCDF file.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "no_phase";

//======================================================================
//
// GATE-BY_GATE POWER,VEL,WIDTH.
//
//======================================================================
 
///////////// gate_data ///////////////////////////////
//
// The length of this array specifies the number of gates.
//
// Type: struct
//   typedef struct {
//      double trip1_power;
//      double trip1_vel;
//      double trip1_width;
//      double trip2_power;
//      double trip2_vel;
//      double trip2_width;
//   }
//
// 1D array - variable length.
//

gate_data = {
  { 0.0005, 10, 3, 1e-20, -6, 4}
};

///////////// nsamples ////////////////////////////////
//
// Number of samples per beam.
// Type: int
//

nsamples = 64;

///////////// use_exponential /////////////////////////
//
// Option to simulate with the exponential function.
// If FALSE a smooth gaussian is produced. If TRUE, the data is random 
//   around the gaussian.
// Type: boolean
//

use_exponential = FALSE;

///////////// exponential_scale ///////////////////////
//
// Scale factor for exponential distribution.
// When computing the random variation about the gaussian the random 
//   value is multiplied by this factor.
// Type: double
//

exponential_scale = 0.2;

///////////// force_zero_phase ////////////////////////
//
// Option to force the phase to 0.
// This has the effect of generating only real parts.
// Type: boolean
//

force_zero_phase = TRUE;

///////////// apply_phase_codes ///////////////////////
//
// Apply phase codes to the IQ data.
// Type: boolean
//

apply_phase_codes = FALSE;

///////////// trip1_phase_index ///////////////////////
//
// Index of phase shift for first pulse in file.
// The pulses repeat their phases on a 32-phase cycle. In the program we 
//   compute the phase table. This is the index into that table of the 
//   first pulse in the file. This therefore applies to trip1. The 
//   transmitted phase of other pulses are determined by their position in 
//   the array of pulses in the file.
// Type: int
//

trip1_phase_index = 1;

///////////// negate_phase_codes //////////////////////
//
// Option to multiple phase codes by -1.
// In some data sets the phase codes are negated. Set this to true for 
//   such data cases.
// Type: boolean
//

negate_phase_codes = TRUE;

//======================================================================
//
// RADAR AND SCAN DETAILS.
//
//======================================================================
 
///////////// wavelength //////////////////////////////
//
// The wavelength of the radar (cm).
// Type: double
//

wavelength = 10;

///////////// prt /////////////////////////////////////
//
// The PRT of the data (miscro-secs).
// Type: int
//

prt = 1000;

///////////// start_gate //////////////////////////////
//
// The start gate number in the data set.
// Type: int
//

start_gate = 1;

///////////// start_az ////////////////////////////////
//
// The starting azimuith for the data (deg).
// Type: double
//

start_az = 30;

///////////// delta_az ////////////////////////////////
//
// The delta azimuth between samples (deg).
// Type: double
//

delta_az = 0.01;

///////////// elevation ///////////////////////////////
//
// The elevation angle of the data (deg).
// Type: double
//

elevation = 0.5;

///////////// receiver_noise //////////////////////////
//
// Receiver noise (watts).
// Type: double
//

receiver_noise = 0;

//======================================================================
//
// OUTPUT FILE.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory for NetCDF files.
// Type: string
//

output_dir = "./output";

///////////// output_file_name ////////////////////////
//
// Name of output file.
// Type: string
//

output_file_name = "test_no_phase.nc";

///////////// write_ldata_info_file ///////////////////
//
// Option to write _latest_data_info file in output dir.
// If TRUE, _latest_data_info is written to the output directory.
// Type: boolean
//

write_ldata_info_file = FALSE;

