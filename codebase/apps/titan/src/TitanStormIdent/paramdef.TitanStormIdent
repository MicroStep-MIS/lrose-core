/*********************************************************
 * parameter definitions for TitanStormIdent
 *
 * Mike Dixon, RAP, NCXAR, Boulder, CO, USA, 80307-3000
 * Dave Albo
 *
 * August, 2014
 */

commentdef {
  p_header = "TitanStormIdent is the identification portion of Titan (Thunderstorm Identification, Tracking, Analysis and Nowcasting). It identifies storms in 3-D radar data stored in MDV format, and writes out SPDB storm products";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_EXTRA, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = {DEBUG_OFF};
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODE OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "\nREALTIME mode: Waits for a new input data.\n\nARCHIVE mode: Iterates through the files between the start and end times set by the user.";
} mode;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Forecast mode";
  p_help = "If TRUE, the input data is assumed to be forecast data with more than one lead time";
} forecast_mode;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "input";
  p_descr = "URL for input MDV data.";
  p_help = "The input MDV data files are stored at this URL. In REALTIME mode the program monitors the latest_data_info file for this URL and processes a new scan each time new data arrives.";
} input_url;

paramdef int {
  p_default = 360;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

commentdef {
  p_header = "DATA FIELDS IN INPUT FILES.";
}

typedef struct {
  string name;
  int num;
} field_t;

paramdef struct field_t {
  p_default = { "DBZ", 0 };
  p_descr = "Reflectivity field details.";
  p_help = "If the field name is specified, that is used. If the field name is empty, the field number is used.";
} dbz_field;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to negate the data values in the dBZ field.";
  p_help = "If true, the data values in the dbz field will be multiplied by -1. This is useful for running Titan on fields such as satellite IR fields, in which 'storms' are areas of high negaive instead of high positive values.";
} negate_dbz_field;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag to indicate if velocity data is available";
  p_help = "If this is set, velocity data is available in the radar volumes. Velocity-based computations will be carried out. If not, velocity-based computations will be omitted.";
} vel_available;

paramdef struct field_t {
  p_default = { "VEL", 0 };
  p_descr = "Velocity field details.";
  p_help = "If the field name is specified, that is used. If the field name is empty, the field number is used. Note that the usage must be consistent with the dbz_field parameter, i.e. if you specify the name for reflectivity you must also specify the name for velocity, and vice versa.";
} vel_field;


commentdef {
  p_header = "REMAPPING THE VERTICAL LEVELS TO CONSTANT SPACING.";
  p_text = "If the input files do not have constant vertical levels, you will need to remap the vertical levels appropriately. See the following parameters.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to remap the Z levels onto a grid with constant dz.";
  p_help = "Field data will be remapped onto the specified Z levels using the nearest neighbor method. See 'remap_z_grid'. Note that this actually changes the data. Whereas 'override_vlevels' only changes the vlevels in the headers, and does not change the data.";
} remap_z_to_constant_grid;

typedef struct {
  int nz;
  double minz;
  double dz;
} remap_z_grid_t;

paramdef struct remap_z_grid_t {
  p_default = { 10, 0, 1 };
  p_descr = "Specified Z levels for remapping.";
} remap_z_grid;

commentdef {
  p_header = "STORM IDENTIFICATION PARAMETERS.";
}

paramdef double {
  p_default = 35.0;
  p_descr = "Lower dBZ threshold for storm identification (dBZ).";
  p_help = "Storms are defined as regions with reflectivity values in excess of this value.";
} low_dbz_threshold;

paramdef double {
  p_default = 80.0;
  p_descr = "Upper dBZ threshold (dBZ).";
  p_help = "The reflectivity histograms will have a range from the low_dbz_threshold to the high_dbz_threshold.";
} high_dbz_threshold;

paramdef int {
  p_default = 1;
  p_min = 1;
  p_descr = "Min overlap between storm fragments.";
  p_help = "A storm is made up of a series of adjacent 'runs' of data in the EW direction. When testing for overlap, some minimum number of overlap grids must be used. This is that minimum overlap in grid units.";
} min_grid_overlap;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set specific dbz threshold for storm tops.";
  p_help = "If FALSE, 'low_dbz_threshold' will be used to determine storm tops. If TRUE, 'tops_dbz_threshold' will be used to determine storm tops.";
} set_dbz_threshold_for_tops;

paramdef double {
  p_default = 18.0;
  p_descr = "dBZ threshold for identification of storm tops (dBZ).";
  p_help = "See 'set_dbz_threshold_for_tops'.";
} tops_dbz_threshold;

commentdef {
  p_header = "LIMITS TO BASE, TOP, STORM SIZE.";
}

paramdef double {
  p_default = 0.0;
  p_descr = "Storm base threshold (km).";
  p_help = "Storms identification is only performed using CAPPIs at or above this threshold. Reflectivity values in CAPPIs below the base are ignored.";
} base_threshold;

paramdef double {
  p_default = 30.0;
  p_descr = "Storm top threshold (km).";
  p_help = "Storms identification is only performed using CAPPIs at or below this threshold. Reflectivity values in CAPPIs above the top are ignored.";
} top_threshold;

paramdef double {
  p_default = 30.0;
  p_descr = "Minimum storm size (km2 or km3 depending on input grid type).";
  p_help = "Storms must exceed this size to be considered valie.  If the data is 2D (i.e. nz == 1), the units are km2; if the data is 3D, units are km3.";
} min_storm_size;

paramdef double {
  p_default = 1000000000.0;
  p_descr = "Maximum storm size (km2 or km3 depending on input grid type).";
  p_help = "Storms must not exceed this size to be considered valid.  If the data is 2D (i.e. nz == 1), the units are km2; if the data is 3D, the units are km3.";
} max_storm_size;

commentdef {
  p_header = "OPTIONS TO CHECK RANGE LIMITS AND SECOND TRIP.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check for storm range limits.";
  p_help = "If the storm is at the limit of radar range, a flag is set.";
} check_range_limits;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check for second trip characteristics.";
  p_help = "If set, the storm orientation and shape are checked for second trip characteristics. An elongated, low storm with a major axis lined up with the radar indicates a likely second-trip echo. For a storm to be considered second-trip, all 3 of the following tests must be passwd: (a) the horizontal aspect ratio exceeds the given parameter; (b) the vertical aspect ratio exceeds the given parameter; (c) the horizontal orientation lies close to the line from the radra. If the storm is thought to be second-trip, the second-trip flag is set.";
} check_second_trip;

paramdef double {
  p_default = 4.0;
  p_min = 1.0;
  p_max = 20.0;
  p_descr = "Second trip detection vertical aspect threshold.";
  p_help = "If the vertical aspect ratio exceeds this value, the storm may be flagged as second-trip.";
} sectrip_vert_aspect;

paramdef double {
  p_default = 4.0;
  p_min = 1.0;
  p_max = 20.0;
  p_descr = "Second trip detection horizontal aspect threshold.";
  p_help = "If the horizontal aspect ratio (based on the ellipse) exceeds this value, the storm may be flagged as second-trip.";
} sectrip_horiz_aspect;

paramdef double {
  p_default = 10.0;
  p_min = 1.0;
  p_max = 90.0;
  p_descr = "Allowable second trip orientation error.";
  p_help = "For a storm to be flagged as second-trip, the orientation must be aligned with the storm azimuth from the radar, within this allowable error.";
} sectrip_orientation_error;

commentdef {
  p_header = "OPTION TO IDENTIFY CONVECTIVE REGIONS.";
  p_text = "Titan is generally intended for identifying and tracking convective storms. Regions of stratiform rain, especially with embedded bright-band, can confuse the algorithm and lead to the identification of large blobs, often close to the radar. Using this option to identify convective regions prior to storm identification can help mitigate this problem.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to identify convective regions prior to storm identification.";
  p_help = "If TRUE, an algorithm will be run to identify the convective regions first, and then remove the non-convective regions before we identify the storms. The parameters in this section control the algorithm that finds the convective regions.";
} identify_convective_regions;

paramdef double {
  p_default = 0.0;
  p_descr = "Min height used in analysis (km).";	
  P_help = "Only data at or above this altitude is used.";
} convection_finder_min_valid_height;

paramdef double {
  p_default = 25.0;
  p_descr = "Max height used in analysis (km).";	
  p_help = "Only data at or below this altitude is used.";
} convection_finder_max_valid_height;

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum reflectivity threshold for this analysis (dBZ).";
  p_help = "Reflectivity below this threshold is set to missing.";
} convection_finder_min_valid_dbz;

paramdef double {
  p_default = 53;
  p_descr = "Reflectivity value that indicates definite convection.";
  p_help = "If the reflectivity exceeds this value at a point, we assume convection is definitely active at that point. To use this, we first compute the column maximum reflectivity. If the column max dbz at a point exceeds this threshold, then we flag that point as convective.";
} dbz_threshold_for_definite_convection;

paramdef double {
  p_default = 5.0;
  p_descr = "Radius of convective influence (km).";
  p_help = "Given definite convection at a point (see above), we set all points within this radius to be convective.";
} convective_radius_km;

paramdef double {
  p_default = 5.0;
  p_descr = "Radius for texture analysis (km).";
  p_help = "We determine the reflectivity 'texture' at a point by computing the standard deviation of the square of the reflectivity, for all grid points within this radius of the central point. We then compute the square root of that sdev.";
} convection_finder_texture_radius_km;

paramdef double {
  p_default = 0.33;
  p_descr = "Minimum fraction of surroundingpoints for texture computations.";
  p_help = "For a valid computation of texture, we require at least this fraction of points around the central point to have reflectivity in excess of min_valid_dbz.";
} convection_finder_min_valid_fraction_for_texture;

paramdef double {
  p_default = 15.0;
  p_descr = "Minimum texture value for convection at a point.";
  p_help = "If the texture at a point exceeds this value, we set the convective flag at this point. We then expand the convective influence around the point using convetive_radius_km.";
} convection_finder_min_texture_value;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to write out the gridded fields computed for the convective filter.";
  p_help = "For debugging and analysis purposes it is useful to be able to write out and displa y the grids computed in this step.";
} convection_finder_write_debug_files;

paramdef string {
  p_default = "mdv/convection";
  p_descr = "Output URL.";
  p_help = "Output files are written to this URL.";
} convection_finder_output_url;

commentdef {
  p_header = "PRECIP RATE AND MASS PARAMETERS.";
}

paramdef double {
  p_default = 55.0;
  p_descr = "Hail reflectivity threshold";
  p_help = "The threshold between rain and hail (dBZ)";
} hail_dbz_threshold;

typedef struct {
  double coeff;
  double expon;
} zr_t;

paramdef struct zr_t {
  p_descr = "Z-R parameters for rainfall";
  p_help = "Parameters in Z-R relationship for rainfall.";
  p_default = {200.0, 1.6};
} ZR;

paramdef struct zr_t {
  p_descr = "Z-M parameters for rain";
  p_help = "Parameters in Z-M relationship for rain.";
  p_default = {20465.0, 1.75};
} ZM;

typedef enum {
  PRECIP_FROM_COLUMN_MAX,
  PRECIP_AT_SPECIFIED_HT,
  PRECIP_AT_LOWEST_VALID_HT,
  PRECIP_FROM_LOWEST_AVAILABLE_REFL
} precip_mode_t;

paramdef enum precip_mode_t {
  p_default = PRECIP_FROM_COLUMN_MAX;
  p_descr = "Mode for computing precipitation.";
  p_help = "PRECIP_FROM_COLUMN_MAX: compute precip from the column-max reflectivity.\n\nPRECIP_AT_SPECIFIED_HT: specify the height of the plane from which precip is to be computed. See 'precip_plane_ht'.\n\nPRECIP_FROM_LOWEST_VALID_HT: compute precip from the lowest valid plane in the storm, i.e. the CAPPI corresponding to 'base_threshold'.\n\nPRECIP_FROM_LOWEST_AVAILABLE_REFL: compute precip from lowest available reflectivity in a column, i.e. from the lowest point at which non-missing reflectivity appears."; 
} precip_computation_mode;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum height for computing precip (km).";
  p_help = "See 'precip_mode'. This is the minimum height, in km MSL, of any plane used for computing precip, for the following modes: PRECIP_FROM_COLUMN_MAX or PRECIP_FROM_LOWEST_AVAILABLE_REFL. Data from planes outside these limits will not be used.";
} precip_min_ht;

paramdef double {
  p_default = 6.0;
  p_descr = "Maximum height for computing precip (km).";
  p_help = "See 'precip_mode'. This is the maximum height, in km MSL, of any plane used for computing precip, for the following modes: PRECIP_FROM_COLUMN_MAX or PRECIP_FROM_LOWEST_AVAILABLE_REFL. Data from planes outside these limits will not be used.";
} precip_max_ht;

paramdef double {
  p_default = 2.0;
  p_descr = "Height of precip plane (km).";
  p_help = "See 'precip_mode'. This is the height, in km MSL, of the plane from which precip will be computed if precip_mode is PRECIP_AT_SPECIFIED_HT.";
} precip_plane_ht;

commentdef {
  p_header = "REFLECTIVITY DISTRIBUTION.";
  p_text = "NOTE: the 2D reflectivity histogram will be computed for a plane in the same manner as precipitation. See 'precip_mode' parameter for more details.";
}

paramdef double {
  p_default = 3.0;
  p_descr = "Dbz histogram interval.";
  p_help = "Reflectivity interval for the 2-D and 3-D reflectivity distributions.";
} dbz_hist_interval;

commentdef {
  p_header = "OPTION FOR CALCULATING HAIL METRICS.";
}

paramdef string {
  p_default = "hail";
  p_descr = "Option for calculating additional special features.";
  p_help = "Currently, 'hail' is the only special feature available. More features may be available to choose from in the future.";
} special_feature;

paramdef struct zr_t {
  p_descr = "Z-M parameters for hail";
  p_help = "Parameters in Z-M relationship for hail.";
  p_default = {3668298, 1.416};
} hail_ZM;

paramdef double {
  p_default = 6.0;
  p_descr = "Height of the 0C isotherm (km)";
  p_help = "This value may be dynamically set in the future.";
} ht_of_freezing;

paramdef double {
  p_default = 45.0;
  p_descr = "Reflectivity threshold (dBZ) for hail mass";
  p_help = "This value is used for calculating VIHM (vertically integrated hail mass) and Hail Mass Aloft";
} hail_mass_dbz_threshold;


commentdef {
  p_header = "The Foote-Krauss Category (FOKR)";
  p_text = "The FOKR Category is intended to separate non-hailstorms (Category 0 and 1) from potentially developing hailers (Cat. 2), likely hailstorms (Cat. 3) and severe hailstorms (Cat. 4)";
}

paramdef double {
  p_default = 40.0;
  p_descr = "For S-band use 40, for C-band use use 40";
} FOKR_cat1_zmax_thresh;
 
paramdef double {
  p_default = 45.0;
  p_descr = "For S-band use 45, for C-band use 45.";
} FOKR_cat2_zmax_thresh;

paramdef double {
  p_default = 55.0;
  p_descr = "For S-band use 55, for C-band use 45.";
} FOKR_cat3_zmax_thresh;

paramdef double {
  p_default = 65.0;
  p_descr = "For S-band use 65, for C-band use 55.";
} FOKR_cat4_zmax_thresh;

commentdef {
  p_header = "Option for reading in dynamic low dbz threshold values";
}

paramdef string {
  p_default = "";
  p_descr = "URL for low dbz threshold information";
  p_help = "If not empty, and if forecast_mode=true, the low_dbz_threshold parameter value will be replaced with a value from this URL at a matching lead time and a closeby gen time if possible. If no matching gen/lead time can be found, or the URL is empty, the parameter value low_dbz_threshold that has been specified is used.  The URL is assumed to contain special XML content having thresholds as a function of lead time, with each SPDB chunk repesenting a particular gen time.  When the threshold is set dynamically, the histogram interval dbz_hist_interval can also change dynamically";
} low_dbz_threshold_spdb_url;

paramdef int
{
  p_descr = "URl lookback";
  p_help = "If low_dbz_threshold_spdb_url is not empty, this param specifies the maximum lookback within the SPDB in which to get information.";
  p_default = 86400;
} low_dbz_threshold_spdb_lookback_seconds;

paramdef int
{
  p_descr = "URL lookahead";
  p_help = "If low_dbz_threshold_spdb_url is not empty, this param specifies the maximum lookahead within the SPDB in which to get information";
  p_default = -1;
} low_dbz_threshold_spdb_lookahead_seconds;

paramdef boolean
{
  p_descr = "Archive mode rerun dynamic low dbz threshold flag";
  p_help = "If TRUE, and the program is run in archive mode, the program will attempt to read the SPDB threshold information using the last day in the archive range, if FALSE it will use the closest matching day to the day being processes, based on the lookback and lookahead tolerances. This is to handle the case where the program is being re run, and you want to use the 'best' thresholds from a previous run.";
  p_default = FALSE;
} low_dbz_threshold_spdb_archive_rerun;

paramdef boolean
{
  p_descr = "Assume partitioned lead times in dynamic low dbz threshold data";
  p_help = "If TRUE, the data in the low_dbz_threshold_spdb_url can be assumed to be partitioned into lead times at a lower resolution than the local lead time resolution, where partitions are evenly spaced lead time ranges, that is to say dt = lt1-lt0 = lt2-lt1 = lt3-lt2,..., and the partitions are then [lt0, lt1), [lt1,lt2), [ltn,ltn+dt).  lt0,lt1,...ltn are the lead times found the low_dbz_threshold_spdb_url.  If FALSE, the lead times must match the data lead times exactly";
  p_default = FALSE;
} low_dbz_threshold_spdb_is_partitioned;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef string {
  p_default = "spdbp:://localhost::$(DATA_DIR)/titan/spdb/storms";
  p_descr = "Storms data directory. The storm files are written to this directory in SPDB format as titan storms.";
  p_help = "This can be any SPDB url, typically on localhost, or an absolute path";
} storm_data_dir;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to store runs in storm file";
  p_help = "If set, the raw storm runs are stored in the storm file. A run is a contiguous block of reflectivity in the X direction for a given Y and Z. This is a useful way of storing storm grid locations reasonably efficiently. If the runs are stored, the exact 3D storm shape can be recreated from the storm file.";
} store_storm_runs;
