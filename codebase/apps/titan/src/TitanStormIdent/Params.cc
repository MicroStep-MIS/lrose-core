// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
// ** Copyright UCAR (c) 1992 - 2017
// ** University Corporation for Atmospheric Research(UCAR)
// ** National Center for Atmospheric Research(NCAR)
// ** Boulder, Colorado, USA
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program TitanStormIdent
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("TitanStormIdent is the identification portion of Titan (Thunderstorm Identification, Tracking, Analysis and Nowcasting). It identifies storms in 3-D radar data stored in MDV format, and writes out SPDB storm products");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[2].val = DEBUG_EXTRA;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODE OF OPERATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("\nREALTIME mode: Waits for a new input data.\n\nARCHIVE mode: Iterates through the files between the start and end times set by the user.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'forecast_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("forecast_mode");
    tt->descr = tdrpStrDup("Forecast mode");
    tt->help = tdrpStrDup("If TRUE, the input data is assumed to be forecast data with more than one lead time");
    tt->val_offset = (char *) &forecast_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA INPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_url");
    tt->descr = tdrpStrDup("URL for input MDV data.");
    tt->help = tdrpStrDup("The input MDV data files are stored at this URL. In REALTIME mode the program monitors the latest_data_info file for this URL and processes a new scan each time new data arrives.");
    tt->val_offset = (char *) &input_url - &_start_;
    tt->single_val.s = tdrpStrDup("input");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max valid age of rdata input files in realtime mode (secs)");
    tt->help = tdrpStrDup("This the max valid age for an incoming file. The program will wait for a data file more recent than this age.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA FIELDS IN INPUT FILES.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'dbz_field'
    // ctype is '_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbz_field");
    tt->descr = tdrpStrDup("Reflectivity field details.");
    tt->help = tdrpStrDup("If the field name is specified, that is used. If the field name is empty, the field number is used.");
    tt->val_offset = (char *) &dbz_field - &_start_;
    tt->struct_def.name = tdrpStrDup("field_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dbz_field.name - (char *) &dbz_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dbz_field.num - (char *) &dbz_field;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'negate_dbz_field'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("negate_dbz_field");
    tt->descr = tdrpStrDup("Option to negate the data values in the dBZ field.");
    tt->help = tdrpStrDup("If true, the data values in the dbz field will be multiplied by -1. This is useful for running Titan on fields such as satellite IR fields, in which 'storms' are areas of high negaive instead of high positive values.");
    tt->val_offset = (char *) &negate_dbz_field - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'vel_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("vel_available");
    tt->descr = tdrpStrDup("Flag to indicate if velocity data is available");
    tt->help = tdrpStrDup("If this is set, velocity data is available in the radar volumes. Velocity-based computations will be carried out. If not, velocity-based computations will be omitted.");
    tt->val_offset = (char *) &vel_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'vel_field'
    // ctype is '_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vel_field");
    tt->descr = tdrpStrDup("Velocity field details.");
    tt->help = tdrpStrDup("If the field name is specified, that is used. If the field name is empty, the field number is used. Note that the usage must be consistent with the dbz_field parameter, i.e. if you specify the name for reflectivity you must also specify the name for velocity, and vice versa.");
    tt->val_offset = (char *) &vel_field - &_start_;
    tt->struct_def.name = tdrpStrDup("field_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &vel_field.name - (char *) &vel_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &vel_field.num - (char *) &vel_field;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("VEL");
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("REMAPPING THE VERTICAL LEVELS TO CONSTANT SPACING.");
    tt->comment_text = tdrpStrDup("If the input files do not have constant vertical levels, you will need to remap the vertical levels appropriately. See the following parameters.");
    tt++;
    
    // Parameter 'remap_z_to_constant_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remap_z_to_constant_grid");
    tt->descr = tdrpStrDup("Option to remap the Z levels onto a grid with constant dz.");
    tt->help = tdrpStrDup("Field data will be remapped onto the specified Z levels using the nearest neighbor method. See 'remap_z_grid'. Note that this actually changes the data. Whereas 'override_vlevels' only changes the vlevels in the headers, and does not change the data.");
    tt->val_offset = (char *) &remap_z_to_constant_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remap_z_grid'
    // ctype is '_remap_z_grid_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("remap_z_grid");
    tt->descr = tdrpStrDup("Specified Z levels for remapping.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &remap_z_grid - &_start_;
    tt->struct_def.name = tdrpStrDup("remap_z_grid_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nz");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &remap_z_grid.nz - (char *) &remap_z_grid;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("minz");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &remap_z_grid.minz - (char *) &remap_z_grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("dz");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &remap_z_grid.dz - (char *) &remap_z_grid;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 10;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 1;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("STORM IDENTIFICATION PARAMETERS.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'low_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold");
    tt->descr = tdrpStrDup("Lower dBZ threshold for storm identification (dBZ).");
    tt->help = tdrpStrDup("Storms are defined as regions with reflectivity values in excess of this value.");
    tt->val_offset = (char *) &low_dbz_threshold - &_start_;
    tt->single_val.d = 35;
    tt++;
    
    // Parameter 'high_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("high_dbz_threshold");
    tt->descr = tdrpStrDup("Upper dBZ threshold (dBZ).");
    tt->help = tdrpStrDup("The reflectivity histograms will have a range from the low_dbz_threshold to the high_dbz_threshold.");
    tt->val_offset = (char *) &high_dbz_threshold - &_start_;
    tt->single_val.d = 80;
    tt++;
    
    // Parameter 'min_grid_overlap'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_grid_overlap");
    tt->descr = tdrpStrDup("Min overlap between storm fragments.");
    tt->help = tdrpStrDup("A storm is made up of a series of adjacent 'runs' of data in the EW direction. When testing for overlap, some minimum number of overlap grids must be used. This is that minimum overlap in grid units.");
    tt->val_offset = (char *) &min_grid_overlap - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'set_dbz_threshold_for_tops'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_dbz_threshold_for_tops");
    tt->descr = tdrpStrDup("Option to set specific dbz threshold for storm tops.");
    tt->help = tdrpStrDup("If FALSE, 'low_dbz_threshold' will be used to determine storm tops. If TRUE, 'tops_dbz_threshold' will be used to determine storm tops.");
    tt->val_offset = (char *) &set_dbz_threshold_for_tops - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'tops_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("tops_dbz_threshold");
    tt->descr = tdrpStrDup("dBZ threshold for identification of storm tops (dBZ).");
    tt->help = tdrpStrDup("See 'set_dbz_threshold_for_tops'.");
    tt->val_offset = (char *) &tops_dbz_threshold - &_start_;
    tt->single_val.d = 18;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("LIMITS TO BASE, TOP, STORM SIZE.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'base_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("base_threshold");
    tt->descr = tdrpStrDup("Storm base threshold (km).");
    tt->help = tdrpStrDup("Storms identification is only performed using CAPPIs at or above this threshold. Reflectivity values in CAPPIs below the base are ignored.");
    tt->val_offset = (char *) &base_threshold - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'top_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("top_threshold");
    tt->descr = tdrpStrDup("Storm top threshold (km).");
    tt->help = tdrpStrDup("Storms identification is only performed using CAPPIs at or below this threshold. Reflectivity values in CAPPIs above the top are ignored.");
    tt->val_offset = (char *) &top_threshold - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'min_storm_size'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_storm_size");
    tt->descr = tdrpStrDup("Minimum storm size (km2 or km3 depending on input grid type).");
    tt->help = tdrpStrDup("Storms must exceed this size to be considered valie.  If the data is 2D (i.e. nz == 1), the units are km2; if the data is 3D, units are km3.");
    tt->val_offset = (char *) &min_storm_size - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'max_storm_size'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_storm_size");
    tt->descr = tdrpStrDup("Maximum storm size (km2 or km3 depending on input grid type).");
    tt->help = tdrpStrDup("Storms must not exceed this size to be considered valid.  If the data is 2D (i.e. nz == 1), the units are km2; if the data is 3D, the units are km3.");
    tt->val_offset = (char *) &max_storm_size - &_start_;
    tt->single_val.d = 1e+09;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("OPTIONS TO CHECK RANGE LIMITS AND SECOND TRIP.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'check_range_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_range_limits");
    tt->descr = tdrpStrDup("Option to check for storm range limits.");
    tt->help = tdrpStrDup("If the storm is at the limit of radar range, a flag is set.");
    tt->val_offset = (char *) &check_range_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_second_trip'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_second_trip");
    tt->descr = tdrpStrDup("Option to check for second trip characteristics.");
    tt->help = tdrpStrDup("If set, the storm orientation and shape are checked for second trip characteristics. An elongated, low storm with a major axis lined up with the radar indicates a likely second-trip echo. For a storm to be considered second-trip, all 3 of the following tests must be passwd: (a) the horizontal aspect ratio exceeds the given parameter; (b) the vertical aspect ratio exceeds the given parameter; (c) the horizontal orientation lies close to the line from the radra. If the storm is thought to be second-trip, the second-trip flag is set.");
    tt->val_offset = (char *) &check_second_trip - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sectrip_vert_aspect'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sectrip_vert_aspect");
    tt->descr = tdrpStrDup("Second trip detection vertical aspect threshold.");
    tt->help = tdrpStrDup("If the vertical aspect ratio exceeds this value, the storm may be flagged as second-trip.");
    tt->val_offset = (char *) &sectrip_vert_aspect - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 1;
    tt->max_val.d = 20;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'sectrip_horiz_aspect'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sectrip_horiz_aspect");
    tt->descr = tdrpStrDup("Second trip detection horizontal aspect threshold.");
    tt->help = tdrpStrDup("If the horizontal aspect ratio (based on the ellipse) exceeds this value, the storm may be flagged as second-trip.");
    tt->val_offset = (char *) &sectrip_horiz_aspect - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 1;
    tt->max_val.d = 20;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'sectrip_orientation_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sectrip_orientation_error");
    tt->descr = tdrpStrDup("Allowable second trip orientation error.");
    tt->help = tdrpStrDup("For a storm to be flagged as second-trip, the orientation must be aligned with the storm azimuth from the radar, within this allowable error.");
    tt->val_offset = (char *) &sectrip_orientation_error - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 1;
    tt->max_val.d = 90;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("OPTION TO IDENTIFY CONVECTIVE REGIONS.");
    tt->comment_text = tdrpStrDup("Titan is generally intended for identifying and tracking convective storms. Regions of stratiform rain, especially with embedded bright-band, can confuse the algorithm and lead to the identification of large blobs, often close to the radar. Using this option to identify convective regions prior to storm identification can help mitigate this problem.");
    tt++;
    
    // Parameter 'identify_convective_regions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("identify_convective_regions");
    tt->descr = tdrpStrDup("Option to identify convective regions prior to storm identification.");
    tt->help = tdrpStrDup("If TRUE, an algorithm will be run to identify the convective regions first, and then remove the non-convective regions before we identify the storms. The parameters in this section control the algorithm that finds the convective regions.");
    tt->val_offset = (char *) &identify_convective_regions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'convection_finder_min_valid_height'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_min_valid_height");
    tt->descr = tdrpStrDup("Min height used in analysis (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &convection_finder_min_valid_height - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'convection_finder_max_valid_height'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_max_valid_height");
    tt->descr = tdrpStrDup("Max height used in analysis (km).");
    tt->help = tdrpStrDup("Only data at or below this altitude is used.");
    tt->val_offset = (char *) &convection_finder_max_valid_height - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'convection_finder_min_valid_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_min_valid_dbz");
    tt->descr = tdrpStrDup("Minimum reflectivity threshold for this analysis (dBZ).");
    tt->help = tdrpStrDup("Reflectivity below this threshold is set to missing.");
    tt->val_offset = (char *) &convection_finder_min_valid_dbz - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'dbz_threshold_for_definite_convection'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_threshold_for_definite_convection");
    tt->descr = tdrpStrDup("Reflectivity value that indicates definite convection.");
    tt->help = tdrpStrDup("If the reflectivity exceeds this value at a point, we assume convection is definitely active at that point. To use this, we first compute the column maximum reflectivity. If the column max dbz at a point exceeds this threshold, then we flag that point as convective.");
    tt->val_offset = (char *) &dbz_threshold_for_definite_convection - &_start_;
    tt->single_val.d = 53;
    tt++;
    
    // Parameter 'convective_radius_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convective_radius_km");
    tt->descr = tdrpStrDup("Radius of convective influence (km).");
    tt->help = tdrpStrDup("Given definite convection at a point (see above), we set all points within this radius to be convective.");
    tt->val_offset = (char *) &convective_radius_km - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'convection_finder_texture_radius_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_texture_radius_km");
    tt->descr = tdrpStrDup("Radius for texture analysis (km).");
    tt->help = tdrpStrDup("We determine the reflectivity 'texture' at a point by computing the standard deviation of the square of the reflectivity, for all grid points within this radius of the central point. We then compute the square root of that sdev.");
    tt->val_offset = (char *) &convection_finder_texture_radius_km - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'convection_finder_min_valid_fraction_for_texture'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_min_valid_fraction_for_texture");
    tt->descr = tdrpStrDup("Minimum fraction of surroundingpoints for texture computations.");
    tt->help = tdrpStrDup("For a valid computation of texture, we require at least this fraction of points around the central point to have reflectivity in excess of min_valid_dbz.");
    tt->val_offset = (char *) &convection_finder_min_valid_fraction_for_texture - &_start_;
    tt->single_val.d = 0.33;
    tt++;
    
    // Parameter 'convection_finder_min_texture_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_min_texture_value");
    tt->descr = tdrpStrDup("Minimum texture value for convection at a point.");
    tt->help = tdrpStrDup("If the texture at a point exceeds this value, we set the convective flag at this point. We then expand the convective influence around the point using convetive_radius_km.");
    tt->val_offset = (char *) &convection_finder_min_texture_value - &_start_;
    tt->single_val.d = 15;
    tt++;
    
    // Parameter 'convection_finder_write_debug_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_write_debug_files");
    tt->descr = tdrpStrDup("Option to write out the gridded fields computed for the convective filter.");
    tt->help = tdrpStrDup("For debugging and analysis purposes it is useful to be able to write out and displa y the grids computed in this step.");
    tt->val_offset = (char *) &convection_finder_write_debug_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'convection_finder_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("convection_finder_output_url");
    tt->descr = tdrpStrDup("Output URL.");
    tt->help = tdrpStrDup("Output files are written to this URL.");
    tt->val_offset = (char *) &convection_finder_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdv/convection");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("PRECIP RATE AND MASS PARAMETERS.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'hail_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hail_dbz_threshold");
    tt->descr = tdrpStrDup("Hail reflectivity threshold");
    tt->help = tdrpStrDup("The threshold between rain and hail (dBZ)");
    tt->val_offset = (char *) &hail_dbz_threshold - &_start_;
    tt->single_val.d = 55;
    tt++;
    
    // Parameter 'ZR'
    // ctype is '_zr_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ZR");
    tt->descr = tdrpStrDup("Z-R parameters for rainfall");
    tt->help = tdrpStrDup("Parameters in Z-R relationship for rainfall.");
    tt->val_offset = (char *) &ZR - &_start_;
    tt->struct_def.name = tdrpStrDup("zr_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("coeff");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ZR.coeff - (char *) &ZR;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("expon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ZR.expon - (char *) &ZR;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 200;
      tt->struct_vals[1].d = 1.6;
    tt++;
    
    // Parameter 'ZM'
    // ctype is '_zr_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ZM");
    tt->descr = tdrpStrDup("Z-M parameters for rain");
    tt->help = tdrpStrDup("Parameters in Z-M relationship for rain.");
    tt->val_offset = (char *) &ZM - &_start_;
    tt->struct_def.name = tdrpStrDup("zr_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("coeff");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ZM.coeff - (char *) &ZM;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("expon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ZM.expon - (char *) &ZM;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 20465;
      tt->struct_vals[1].d = 1.75;
    tt++;
    
    // Parameter 'precip_computation_mode'
    // ctype is '_precip_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("precip_computation_mode");
    tt->descr = tdrpStrDup("Mode for computing precipitation.");
    tt->help = tdrpStrDup("PRECIP_FROM_COLUMN_MAX: compute precip from the column-max reflectivity.\n\nPRECIP_AT_SPECIFIED_HT: specify the height of the plane from which precip is to be computed. See 'precip_plane_ht'.\n\nPRECIP_FROM_LOWEST_VALID_HT: compute precip from the lowest valid plane in the storm, i.e. the CAPPI corresponding to 'base_threshold'.\n\nPRECIP_FROM_LOWEST_AVAILABLE_REFL: compute precip from lowest available reflectivity in a column, i.e. from the lowest point at which non-missing reflectivity appears.");
    tt->val_offset = (char *) &precip_computation_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("precip_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PRECIP_FROM_COLUMN_MAX");
      tt->enum_def.fields[0].val = PRECIP_FROM_COLUMN_MAX;
      tt->enum_def.fields[1].name = tdrpStrDup("PRECIP_AT_SPECIFIED_HT");
      tt->enum_def.fields[1].val = PRECIP_AT_SPECIFIED_HT;
      tt->enum_def.fields[2].name = tdrpStrDup("PRECIP_AT_LOWEST_VALID_HT");
      tt->enum_def.fields[2].val = PRECIP_AT_LOWEST_VALID_HT;
      tt->enum_def.fields[3].name = tdrpStrDup("PRECIP_FROM_LOWEST_AVAILABLE_REFL");
      tt->enum_def.fields[3].val = PRECIP_FROM_LOWEST_AVAILABLE_REFL;
    tt->single_val.e = PRECIP_FROM_COLUMN_MAX;
    tt++;
    
    // Parameter 'precip_min_ht'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("precip_min_ht");
    tt->descr = tdrpStrDup("Minimum height for computing precip (km).");
    tt->help = tdrpStrDup("See 'precip_mode'. This is the minimum height, in km MSL, of any plane used for computing precip, for the following modes: PRECIP_FROM_COLUMN_MAX or PRECIP_FROM_LOWEST_AVAILABLE_REFL. Data from planes outside these limits will not be used.");
    tt->val_offset = (char *) &precip_min_ht - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'precip_max_ht'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("precip_max_ht");
    tt->descr = tdrpStrDup("Maximum height for computing precip (km).");
    tt->help = tdrpStrDup("See 'precip_mode'. This is the maximum height, in km MSL, of any plane used for computing precip, for the following modes: PRECIP_FROM_COLUMN_MAX or PRECIP_FROM_LOWEST_AVAILABLE_REFL. Data from planes outside these limits will not be used.");
    tt->val_offset = (char *) &precip_max_ht - &_start_;
    tt->single_val.d = 6;
    tt++;
    
    // Parameter 'precip_plane_ht'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("precip_plane_ht");
    tt->descr = tdrpStrDup("Height of precip plane (km).");
    tt->help = tdrpStrDup("See 'precip_mode'. This is the height, in km MSL, of the plane from which precip will be computed if precip_mode is PRECIP_AT_SPECIFIED_HT.");
    tt->val_offset = (char *) &precip_plane_ht - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("REFLECTIVITY DISTRIBUTION.");
    tt->comment_text = tdrpStrDup("NOTE: the 2D reflectivity histogram will be computed for a plane in the same manner as precipitation. See 'precip_mode' parameter for more details.");
    tt++;
    
    // Parameter 'dbz_hist_interval'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_hist_interval");
    tt->descr = tdrpStrDup("Dbz histogram interval.");
    tt->help = tdrpStrDup("Reflectivity interval for the 2-D and 3-D reflectivity distributions.");
    tt->val_offset = (char *) &dbz_hist_interval - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("OPTION FOR CALCULATING HAIL METRICS.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'special_feature'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("special_feature");
    tt->descr = tdrpStrDup("Option for calculating additional special features.");
    tt->help = tdrpStrDup("Currently, 'hail' is the only special feature available. More features may be available to choose from in the future.");
    tt->val_offset = (char *) &special_feature - &_start_;
    tt->single_val.s = tdrpStrDup("hail");
    tt++;
    
    // Parameter 'hail_ZM'
    // ctype is '_zr_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("hail_ZM");
    tt->descr = tdrpStrDup("Z-M parameters for hail");
    tt->help = tdrpStrDup("Parameters in Z-M relationship for hail.");
    tt->val_offset = (char *) &hail_ZM - &_start_;
    tt->struct_def.name = tdrpStrDup("zr_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("coeff");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &hail_ZM.coeff - (char *) &hail_ZM;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("expon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &hail_ZM.expon - (char *) &hail_ZM;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 3.6683e+06;
      tt->struct_vals[1].d = 1.416;
    tt++;
    
    // Parameter 'ht_of_freezing'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ht_of_freezing");
    tt->descr = tdrpStrDup("Height of the 0C isotherm (km)");
    tt->help = tdrpStrDup("This value may be dynamically set in the future.");
    tt->val_offset = (char *) &ht_of_freezing - &_start_;
    tt->single_val.d = 6;
    tt++;
    
    // Parameter 'hail_mass_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hail_mass_dbz_threshold");
    tt->descr = tdrpStrDup("Reflectivity threshold (dBZ) for hail mass");
    tt->help = tdrpStrDup("This value is used for calculating VIHM (vertically integrated hail mass) and Hail Mass Aloft");
    tt->val_offset = (char *) &hail_mass_dbz_threshold - &_start_;
    tt->single_val.d = 45;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("The Foote-Krauss Category (FOKR)");
    tt->comment_text = tdrpStrDup("The FOKR Category is intended to separate non-hailstorms (Category 0 and 1) from potentially developing hailers (Cat. 2), likely hailstorms (Cat. 3) and severe hailstorms (Cat. 4)");
    tt++;
    
    // Parameter 'FOKR_cat1_zmax_thresh'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("FOKR_cat1_zmax_thresh");
    tt->descr = tdrpStrDup("For S-band use 40, for C-band use use 40");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FOKR_cat1_zmax_thresh - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'FOKR_cat2_zmax_thresh'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("FOKR_cat2_zmax_thresh");
    tt->descr = tdrpStrDup("For S-band use 45, for C-band use 45.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FOKR_cat2_zmax_thresh - &_start_;
    tt->single_val.d = 45;
    tt++;
    
    // Parameter 'FOKR_cat3_zmax_thresh'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("FOKR_cat3_zmax_thresh");
    tt->descr = tdrpStrDup("For S-band use 55, for C-band use 45.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FOKR_cat3_zmax_thresh - &_start_;
    tt->single_val.d = 55;
    tt++;
    
    // Parameter 'FOKR_cat4_zmax_thresh'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("FOKR_cat4_zmax_thresh");
    tt->descr = tdrpStrDup("For S-band use 65, for C-band use 55.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FOKR_cat4_zmax_thresh - &_start_;
    tt->single_val.d = 65;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("Option for reading in dynamic low dbz threshold values");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'low_dbz_threshold_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold_spdb_url");
    tt->descr = tdrpStrDup("URL for low dbz threshold information");
    tt->help = tdrpStrDup("If not empty, and if forecast_mode=true, the low_dbz_threshold parameter value will be replaced with a value from this URL at a matching lead time and a closeby gen time if possible. If no matching gen/lead time can be found, or the URL is empty, the parameter value low_dbz_threshold that has been specified is used.  The URL is assumed to contain special XML content having thresholds as a function of lead time, with each SPDB chunk repesenting a particular gen time.  When the threshold is set dynamically, the histogram interval dbz_hist_interval can also change dynamically");
    tt->val_offset = (char *) &low_dbz_threshold_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'low_dbz_threshold_spdb_lookback_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold_spdb_lookback_seconds");
    tt->descr = tdrpStrDup("URl lookback");
    tt->help = tdrpStrDup("If low_dbz_threshold_spdb_url is not empty, this param specifies the maximum lookback within the SPDB in which to get information.");
    tt->val_offset = (char *) &low_dbz_threshold_spdb_lookback_seconds - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'low_dbz_threshold_spdb_lookahead_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold_spdb_lookahead_seconds");
    tt->descr = tdrpStrDup("URL lookahead");
    tt->help = tdrpStrDup("If low_dbz_threshold_spdb_url is not empty, this param specifies the maximum lookahead within the SPDB in which to get information");
    tt->val_offset = (char *) &low_dbz_threshold_spdb_lookahead_seconds - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'low_dbz_threshold_spdb_archive_rerun'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold_spdb_archive_rerun");
    tt->descr = tdrpStrDup("Archive mode rerun dynamic low dbz threshold flag");
    tt->help = tdrpStrDup("If TRUE, and the program is run in archive mode, the program will attempt to read the SPDB threshold information using the last day in the archive range, if FALSE it will use the closest matching day to the day being processes, based on the lookback and lookahead tolerances. This is to handle the case where the program is being re run, and you want to use the 'best' thresholds from a previous run.");
    tt->val_offset = (char *) &low_dbz_threshold_spdb_archive_rerun - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'low_dbz_threshold_spdb_lookup_mode'
    // ctype is '_lookup_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold_spdb_lookup_mode");
    tt->descr = tdrpStrDup("low_dbz_threshold_url lookup mode");
    tt->help = tdrpStrDup("EXACT = thresholds URL must have exactly matching lead times as the data\nPARTITION = the data in the low_dbz_threshold_spdb_url can be assumed to be partitioned into lead times at a lower resolution than the local lead time resolution, where partitions are evenly spaced lead time ranges, that is to say dt = lt1-lt0 = lt2-lt1 = lt3-lt2,..., and the partitions are then [lt0, lt1), [lt1,lt2), [ltn,ltn+dt).  lt0,lt1,...ltn are the lead times found the low_dbz_threshold_spdb_url.\nINTERPOLATE = the data in the low_deb_threshold_spdb_url can be at a lower resolution than the lookup lead times, and then threshold values are then computed using linear interpolation");
    tt->val_offset = (char *) &low_dbz_threshold_spdb_lookup_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("lookup_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("EXACT");
      tt->enum_def.fields[0].val = EXACT;
      tt->enum_def.fields[1].name = tdrpStrDup("PARTITION");
      tt->enum_def.fields[1].val = PARTITION;
      tt->enum_def.fields[2].name = tdrpStrDup("INTERPOLATE");
      tt->enum_def.fields[2].val = INTERPOLATE;
    tt->single_val.e = EXACT;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'storm_data_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("storm_data_dir");
    tt->descr = tdrpStrDup("Storms data directory. The storm files are written to this directory in SPDB format as titan storms.");
    tt->help = tdrpStrDup("This can be any SPDB url, typically on localhost, or an absolute path");
    tt->val_offset = (char *) &storm_data_dir - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::$(DATA_DIR)/titan/spdb/storms");
    tt++;
    
    // Parameter 'store_storm_runs'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("store_storm_runs");
    tt->descr = tdrpStrDup("Option to store runs in storm file");
    tt->help = tdrpStrDup("If set, the raw storm runs are stored in the storm file. A run is a contiguous block of reflectivity in the X direction for a given Y and Z. This is a useful way of storing storm grid locations reasonably efficiently. If the runs are stored, the exact 3D storm shape can be recreated from the storm file.");
    tt->val_offset = (char *) &store_storm_runs - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
