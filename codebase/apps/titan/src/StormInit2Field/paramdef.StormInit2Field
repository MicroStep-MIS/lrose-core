
commentdef {
  p_header = "StormInit2Field reads the SPDB GenPts written by\n"
	"StormInitLocation and writes out gridded MDV files with\n"
	"a gaussian placed at each StormInit point.\n\n"
	"The program is run in archive mode with start\n"
	"and end times specified in the following manner :\n\n"
	"StormInit2Field -start YYYY MM DD hh mm ss -end YYYY MM DD hh mm ss\n"
	"with quotes around the YYYY MM DD hh mm ss arguments.";
}

 
paramdef enum triggerMode_t {
  p_options = { TRIGGER_ARCHIVE, TRIGGER_INTERVAL, TRIGGER_LDATAINFO, TRIGGER_FMQ };
  p_default = { TRIGGER_LDATAINFO };
  p_descr = "Decide how the program is triggered.";
  p_help = "The program can be triggered in one of four ways.\n\n"
        " (1) TRIGGER_ARCHIVE - the program is run in archive mode\n"
        "     on existing data. The start and end times are determined\n"
        "     on the command line with -start and -end in the usual way.\n"
        "     Specifying these argumnets automatically invokes this mode."
        "     The time step is determined by the timeStep parameter.\n\n"
        " (2) TRIGGER_INTERVAL - the program wakes up at regular intervals and\n"
        "     runs. These intervals are determined by the timeStep parameter."
        "     This enables the program to run in realtime on a machine remote\n"
        "     from where the data are.\n\n"
        " (3) TRIGGER_LDATAINFO - the program triggers directly from\n"
        "     the titan output using the DsInputPath class. The timeStep\n"
        "     parameter is ignored. This has the advantage that the program\n"
        "     is triggered directly by Titan; but it does mean that it must\n"
        "     run on the same machine as the Titan system (since DsInputPath\n"
        "     is inherrently a local device at the time of writing).\n"
	" (4) TRIGGER_FMQ - the program triggers on a nowcast FMQ sent\n"
	"     by the StormInitDetect process.";
} triggerMode;

paramdef string {
  p_descr = "FMQ to trigger from if triggerMode is TRIGGER_FMQ.";
  p_help = "FMQ will be sent by StormInitDetect.";
  p_default = {"fmqp:://localhost::./fmq.StormInit"};
} triggerFmq;

paramdef string {
  p_descr = "Directory to trigger from if triggerMode is TRIGGER_LDATAINFO.";
  p_help = "Note that the data are not read from here - this is used\n"
        "soley for triggering. Data are always read from titanUrl.";
  p_default = {"/Some/Directory/Structure"};
} triggerDir;
 
 paramdef long {
  p_descr = "Maximum valid age if triggerMode is TRIGGER_LDATAINFO, seconds.\n";
  p_help =  "The default should be fine.";
  p_default = 1800;
} maxValidAge;

paramdef string {
  p_descr = "Input SPDB URL";
  p_help = "The GenPt structures that drive the program\n"
	"are read from this SPDB URL."; 
  p_default = {"spdbp:://localhost::spdb/StormInitLoc"};
} spdbUrl;

paramdef string {
  p_descr = "Output MDV URL";
  p_help = "The climatology is written here."; 
  p_default = {"mdvp:://localhost::mdv/Climatology"};
} mdvUrl; 

paramdef boolean {
  p_descr = "Set to print more messages as data are processed.";
  p_help = "Can usually be FALSE"; 
  p_default = FALSE;
} debug;

paramdef boolean {
  p_descr = "Prints really verbose messages on boundary distance calcs.";
  p_help = "Can usually be FALSE"; 
  p_default = FALSE;
} debug_bdry;

paramdef long
{
  p_descr = "Trigger interval, seconds.";
  p_help = "Program wakes up every interval to process data in\n"
        "REALTIME mode. In ARCHIVE mode, start and end times are\n"
        "specified on the command line. The program begins at the\n"
        "start time and increments its way to the end time in steps of\n"
        "TriggerInterval.";
  p_default = { 300 };
} TriggerInterval;

paramdef long
{
  p_descr = "Time to look back on triggering, seconds.";
  p_help = "While the TriggerInterval parameter defines how often the\n"
        "program wakes up to process data, the LookBack parameter defines\n"
        "how far back in time the program will look for data when it does\n"
        "wake up.\n\nThe reason LookBack is not identical to TriggerInterval\n"
        "is that the ltg data may take some time to arrive. Thus, making\n"
        "LookBack larger than TriggerInterval allows for some temporal\n"
        "overlap to ensure that all data are processed.";
  p_default = { 360 };
} LookBack;

//
// Modality.
//
 
paramdef enum mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = {REALTIME};
  p_descr = "Operation mode";
  p_help = "Archive mode automatically invoked by -interval option.";
} Mode;

paramdef enum timestampMode_t {
  p_options = { TIMESTAMP_START, TIMESTAMP_MIDDLE, TIMESTAMP_END };
  p_default = {TIMESTAMP_END};
  p_descr = "Timestamp mode";
  p_help = "To timestamp at start, middle or end of the window considered.";
} timestampMode;

paramdef string {
  p_descr = "Instance to check in to Procmap with";
  p_help = "Set to something unique."; 
  p_default = {"primary"};
} Instance;


paramdef enum weighting_t
{
  p_descr = "Weight to give storms";
  p_help = "The option to weight entries in the storm initiation\n"
	"climatology. Entries can be weighted by the duration\n"
	"of the storm, the maximum area the storm reached,"
	"or no weight (all storms count equally).";
  p_options = { WEIGHT_NONE, WEIGHT_DURATION, WEIGHT_AREA };
  p_default = { WEIGHT_NONE };
} weighting;

paramdef double {
  p_descr = "Radius of influence to apply to gaussians at\n"
	"storm init points, Km.";
  p_help = "For each storm initialization point, the program adds\n"
	"a truncated gaussian of this radius to the output grid. The spatial\n"
	"decay of the gaussian is controled by the halfLife parameter.\n"
	"The extent of the gaussian - ie. where it is truncated - is\n"
	"contolled by this parameter.";
  p_default = 25.0;
} radius;

paramdef double {
  p_descr = "Half life of gaussians at storm init points, Km.";
  p_help = "For each storm initialization point, the program adds\n"
	"a gaussian of this radius to the output grid. The spatial\n"
	"decay of the gaussian is controled by the halfLife parameter.";
  p_default = 10.0;
} halfLife;


commentdef {
  p_header = "AREA, DURATION THESHOLDS";
}

typedef struct {
  double min;
  double max;
} thresh_t;

paramdef boolean {
  p_descr = "Option to apply thresholds to maximum storm area.";
  p_help = "By default all areas are included.";
  p_default = FALSE;
} applyAreaThresholds;

paramdef struct thresh_t {
  p_descr = "Threshold to apply to maximum storm area.";
  p_help = "Relevant only if applyAreaThresholds is TRUE.";
  p_default = {0, 30000};
} areaThresholds;

paramdef boolean {
  p_descr = "Option to apply thresholds to maximum storm duration.";
  p_help = "By default all durations are included.";
  p_default = FALSE;
} applyDurationThresholds;

paramdef struct thresh_t {
  p_descr = "Threshold to apply to maximum storm duration.";
  p_help = "Relevant only if applyDurationThresholds is TRUE.";
  p_default = {0, 30000};
} durationThresholds;

commentdef {
  p_header = "PARAMETERS DEFINING THE OUTPUT GRID";
}

typedef enum {
  OUTPUT_PROJ_FLAT, OUTPUT_PROJ_LATLON, OUTPUT_PROJ_LAMBERT
} output_projection_t;
 
paramdef enum output_projection_t {
  p_default = OUTPUT_PROJ_FLAT;
  p_descr = "Projection of output grid.";
  p_help = "FLAT - (x,y) Cartesian data in km from a given origin.\n"
           "LATLON - lat/lon grid with constant grid spacing.\n";
           "LAMBERT - Lambert Conformal projection with constant grid spacing.\n";
} output_projection;

typedef struct {
  double lat;
  double lon;
} output_origin_t;
 
paramdef struct output_origin_t {
  p_descr = "Origin of output grid.";
  p_help = "Used with OUTPUT_PROJ_FLAT and OUTPUT_PROJ_LAMBERT.";
  p_default = {40.0, -104.0};
} output_origin;

paramdef double {
  p_descr = "Rotation of output grid.";
  p_help = "Used with OUTPUT_PROJ_FLAT.";
  p_default = 0.0;
  p_min = 0.0;
  p_max = 360.0;
} output_rotation;

typedef struct {
  double lat_1;
  double lat_2;
} output_std_parallels_t;
 
paramdef struct output_std_parallels_t {
  p_descr = "Standard parallels of the output grid.";
  p_help = "Used with OUTPUT_PROJ_LAMBERT only.";
  p_default = {20.0, 45.0};
} output_std_parallels;

typedef struct {
  long nx;
  long ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_t;
 
paramdef struct grid_t {
  p_descr = "Output grid parameters.";
  p_help = "The grid params for the output grid.";
  p_default = {300, 300, -149.5, -149.5, 1.0, 1.0};
} output_grid;

commentdef {
  p_header = "Options to require proximity between\n"
	"boundaries and init points.";
}

paramdef boolean {
  p_descr = "If set, only storm init points that are close\n"
	"to a boundary are accepted into the MDV file.";
  p_help = "Set if this is useful."; 
  p_default = FALSE;
} boundaryProximityRequired;

paramdef string {
  p_descr = "SPDB URL for boundaries.";
  p_help = "Relevant only if boundaryProximityRequired is TRUE."; 
  p_default = {"spdbp:://localhost::spdb/boundaries"};
} boundarySpdbUrl;

paramdef long {
  p_descr = "Lookback time for boundaries, seconds. Relevant\n"
	"only if boundaryProximityRequired is set.";
  p_help = "The program considers all boundaries within this\n"
	"margin before the trigger time."; 
  p_default = 1800;
} boundaryLookback;

paramdef double {
  p_descr = "How close a stormInitPoint must be to a boundary to be\n"
	"included in the MDV output if boundaryProximityRequired\n"
	"is TRUE, in Km.";
  p_help = "Relevant only if boundaryProximityRequired is TRUE."; 
  p_default = 50.0;
} boundaryProximity;





