/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*******************************************
 * storm_ident_tdrp.h
 *
 * TDRP header file for 'storm_ident' module.
 *
 * Code for program storm_ident
 *
 * This header file has been automatically
 * generated by TDRP, do not modify.
 *
 *******************************************/

#ifndef _storm_ident_tdrp_h
#define _storm_ident_tdrp_h

#ifdef __cplusplus
extern "C" {
#endif

#include <tdrp/tdrp.h>

/*
 * typedefs
 */

typedef enum {
  DEBUG_OFF = 0,
  DEBUG_NORM = 1,
  DEBUG_VERBOSE = 2
} storm_ident_debug;

typedef enum {
  ARCHIVE = 0,
  REALTIME = 1
} storm_ident_mode;

typedef enum {
  PROJ_FLAT = 0,
  PROJ_LATLON = 1
} storm_ident_projection;

typedef struct {
  double coeff;
  double expon;
} storm_ident_ZR;

typedef struct {
  double coeff;
  double expon;
} storm_ident_ZM;

typedef struct {
  long hour;
  long min;
} storm_ident_restart_time;

/*
 * typedef for main struct - storm_ident_tdrp_struct
 */

typedef struct {

  size_t struct_size;

  /***** debug *****/

  storm_ident_debug debug;

  /***** malloc_debug_level *****/

  long malloc_debug_level;

  /***** instance *****/

  char* instance;

  /***** mode *****/

  storm_ident_mode mode;

  /***** tracking *****/

  tdrp_bool_t tracking;

  /***** start_storm_track *****/

  tdrp_bool_t start_storm_track;

  /***** storm_track_command_line *****/

  char* storm_track_command_line;

  /***** shmem_key *****/

  long shmem_key;

  /***** rdata_dir *****/

  char* rdata_dir;

  /***** rdata_file_ext *****/

  char* rdata_file_ext;

  /***** storm_data_dir *****/

  char* storm_data_dir;

  /***** projection *****/

  storm_ident_projection projection;

  /***** dbz_field *****/

  long dbz_field;

  /***** vel_field *****/

  long vel_field;

  /***** vel_available *****/

  tdrp_bool_t vel_available;

  /***** low_dbz_threshold *****/

  double low_dbz_threshold;

  /***** high_dbz_threshold *****/

  double high_dbz_threshold;

  /***** base_threshold *****/

  double base_threshold;

  /***** top_threshold *****/

  double top_threshold;

  /***** min_storm_size *****/

  double min_storm_size;

  /***** max_storm_size *****/

  double max_storm_size;

  /***** check_range_limits *****/

  tdrp_bool_t check_range_limits;

  /***** check_second_trip *****/

  tdrp_bool_t check_second_trip;

  /***** sectrip_vert_aspect *****/

  double sectrip_vert_aspect;

  /***** sectrip_horiz_aspect *****/

  double sectrip_horiz_aspect;

  /***** sectrip_orientation_error *****/

  double sectrip_orientation_error;

  /***** hail_dbz_threshold *****/

  double hail_dbz_threshold;

  /***** ZR *****/

  storm_ident_ZR ZR;

  /***** ZM *****/

  storm_ident_ZM ZM;

  /***** dbz_hist_interval *****/

  double dbz_hist_interval;

  /***** store_storm_runs *****/

  tdrp_bool_t store_storm_runs;

  /***** store_proj_runs *****/

  tdrp_bool_t store_proj_runs;

  /***** create_verification_files *****/

  tdrp_bool_t create_verification_files;

  /***** verify_dir *****/

  char* verify_dir;

  /***** check_morphology *****/

  tdrp_bool_t check_morphology;

  /***** create_morphology_files *****/

  tdrp_bool_t create_morphology_files;

  /***** morphology_dir *****/

  char* morphology_dir;

  /***** morphology_erosion_threshold *****/

  double morphology_erosion_threshold;

  /***** morphology_refl_divisor *****/

  double morphology_refl_divisor;

  /***** check_tops *****/

  tdrp_bool_t check_tops;

  /***** create_tops_files *****/

  tdrp_bool_t create_tops_files;

  /***** tops_dir *****/

  char* tops_dir;

  /***** min_radar_tops *****/

  double min_radar_tops;

  /***** tops_edge_margin *****/

  double tops_edge_margin;

  /***** vel_to_m_per_sec_scale *****/

  double vel_to_m_per_sec_scale;

  /***** max_missing_data_gap *****/

  double max_missing_data_gap;

  /***** max_realtime_valid_age *****/

  double max_realtime_valid_age;

  /***** auto_restart *****/

  tdrp_bool_t auto_restart;

  /***** restart_time *****/

  storm_ident_restart_time restart_time;

  /***** restart_overlap_period *****/

  long restart_overlap_period;

  /***** remove_old_files_on_restart *****/

  tdrp_bool_t remove_old_files_on_restart;

  /***** restart_no_delay *****/

  tdrp_bool_t restart_no_delay;

} storm_ident_tdrp_struct;

/*
 * function prototypes
 */

/*************************************************************
 * storm_ident_tdrp_load_from_args()
 *
 * Loads up TDRP using the command line args.
 *
 * Check TDRP_usage() for command line actions associated with
 * this function.
 *
 *   argc, argv: command line args
 *
 *   storm_ident_tdrp_struct *params: loads up this struct
 * 
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *   char **params_path_p: if non-NULL, this is set to point to
 *                         the path of the params file used.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int storm_ident_tdrp_load_from_args(int argc, char **argv,
                                storm_ident_tdrp_struct *params,
                                char **override_list,
                                char **params_path_p);

/*************************************************************
 * storm_ident_tdrp_load()
 *
 * Loads up TDRP for a given module.
 *
 * This version of load gives the programmer the option to load
 * up more than one module for a single application. It is a
 * lower-level routine than storm_ident_tdrp_load_from_args,
 * and hence more flexible, but the programmer must do more work.
 *
 *   char *param_file_path: the parameter file to be read in.
 *
 *   storm_ident_tdrp_struct *params: loads up this struct
 *
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *  expand_env: flag to control environment variable
 *                expansion during tokenization.
 *              If TRUE, environment expansion is set on.
 *              If FALSE, environment expansion is set off.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int storm_ident_tdrp_load(char *param_file_path,
                      storm_ident_tdrp_struct *params,
                      char **override_list,
                      int expand_env, int debug);

/*************************************************************
 * storm_ident_tdrp_load_defaults()
 *
 * Loads up defaults for a given module.
 *
 * See storm_ident_tdrp_load() for more details.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int storm_ident_tdrp_load_defaults(storm_ident_tdrp_struct *params,
                               int expand_env);

/*************************************************************
 * storm_ident_tdrp_sync()
 *
 * Syncs the user struct data back into the parameter table,
 * in preparation for printing.
 */

extern void storm_ident_tdrp_sync(void);

/*************************************************************
 * storm_ident_tdrp_print()
 * 
 * Print params file
 *
 * The modes supported are:
 *
 *   PRINT_SHORT:   main comments only, no help or descriptions
 *                  structs and arrays on a single line
 *   PRINT_NORM:    short + descriptions and help
 *   PRINT_LONG:    norm  + arrays and structs expanded
 *   PRINT_VERBOSE: long  + private params included
 */

extern void storm_ident_tdrp_print(FILE *out, tdrp_print_mode_t mode);

/*************************************************************
 * storm_ident_tdrp_free_all()
 *
 * Frees up all TDRP dynamic memory.
 */

extern void storm_ident_tdrp_free_all(void);

/*************************************************************
 * storm_ident_tdrp_check_all_set()
 *
 * Return TRUE if all set, FALSE if not.
 *
 * If out is non-NULL, prints out warning messages for those
 * parameters which are not set.
 */

extern int storm_ident_tdrp_check_all_set(FILE *out);

/*************************************************************
 * storm_ident_tdrp_check_is_set()
 *
 * Return TRUE if parameter is set, FALSE if not.
 *
 */

extern int storm_ident_tdrp_check_is_set(char *param_name);

/*************************************************************
 * storm_ident_tdrp_array_realloc()
 *
 * Realloc 1D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int storm_ident_tdrp_array_realloc(char *param_name,
                              int new_array_n);

/*************************************************************
 * storm_ident_tdrp_array2D_realloc()
 *
 * Realloc 2D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int storm_ident_tdrp_array2D_realloc(char *param_name,
                                 int new_array_n1,
                                 int new_array_n2);

/*************************************************************
 * storm_ident_tdrp_table()
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *storm_ident_tdrp_table(void);

/*************************************************************
 * storm_ident_tdrp_init()
 *
 * Module table initialization function.
 *
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *storm_ident_tdrp_init(storm_ident_tdrp_struct *params);

#ifdef __cplusplus
}
#endif

#endif

