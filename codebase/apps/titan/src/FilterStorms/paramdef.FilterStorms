/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
 ** Copyright UCAR (c) 2000
 ** University Corporation for Atmospheric Research(UCAR)
 ** National Center for Atmospheric Research(NCAR)
 ** Research Applications Program(RAP)
 ** P.O.Box 3000, Boulder, Colorado, 80307-3000, USA
 ** All rights reserved. Licenced use only.
 ** Do not copy or distribute without authorization
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
/****************************************************************
 * parameter definitions for FilterStorms
 *  
 * Nancy Rehak
 * February 2003
 */

commentdef
{
  p_text = "This program is used to filter storms in a TITAN SPDB "
           "database. "
           "The storms can be filtered by size or by information "
           "in an associated likelihood grid.";
}

/****************************************************************
 * Debugging and process control.
 */

commentdef
{
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_WARNINGS,
  DEBUG_NORM,		
  DEBUG_VERBOSE	
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the "
           "appropriate level of detail.";
  p_default = DEBUG_OFF;
} debug;

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/*********************************************************
 * Input and output data
 */

commentdef
{
  p_header = "INPUT AND OUTPUT DATA.";
}

typedef enum
{
  LATEST_DATA,
  TIME_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In LATEST_DATA mode, the program waits for new data from the "
           "MDV location specified by the latest_data_trigger parameter.\n"
           "In TIME_LIST mode, the program operates on archive data as "
           "specified in the time_list_trigger parameter.";
  p_default = "LATEST_DATA";
} trigger_mode;

typedef struct
{
  string start_time;
  string end_time;
} time_list_trigger_t;

paramdef struct time_list_trigger_t
{
  p_descr = "Trigger information used when using the TIME_LIST trigger";
  p_help = "start_time specifies the archive start time in any format "
           "recognized by the DateTime class.\n"
           "end_time specifies the archive end time in any format "
           "recognized by the DateTime class.";
  p_default = { "2001/1/1 00:00:00",
                "2002/1/2 00:00:00" };
} time_list_trigger;

paramdef string
{
  p_descr = "Input URL";
  p_help = "URL of the input TITAN SPDB database.";
  p_default = "spdbp:://localhost::spdb/storms";
} input_url;

paramdef long
{
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
  p_min = 0;
  p_default = 7200;
} max_realtime_valid_age;

paramdef boolean
{
  p_descr = "Flag indicating whether to output the storms that pass the test";
  p_help = "If true, any storms passing the filter test will be written to the "
           "URL specified in the passing_output_url.";
  p_default = TRUE;
} write_passing_storms;

paramdef string
{
  p_descr = "URL for writing passing storms";
  p_help = "Used only if write_passing_storms is set to TRUE.";
  p_default = "spdbp:://localhost::spdb/storms/passing";
} passing_storms_url;

paramdef boolean
{
  p_descr = "Flag indicating whether to output the storms that fail the test";
  p_help = "If true, any storms failing the filter test will be written to the "
           "URL specified in the failing_output_url.";
  p_default = FALSE;
} write_failing_storms;

paramdef string
{
  p_descr = "URL for writing failing storms";
  p_help = "Used only if write_failing_storms is set to TRUE.";
  p_default = "spdbp:://localhost::spdb/storms/failing";
} failing_storms_url;

typedef enum
{
  MISSING_NO_OUTPUT,
  MISSING_PASSING,
  MISSING_FAILING
} missing_input_action_t;

paramdef enum missing_input_action_t
{
  p_descr = "Flag indicating how to operate when filtering based on another "
            "dataset and the other dataset isn't currently available.";
  p_help = "If you are filtering based on another dataset, for example "
           "using an interest field or a partition field filter, this "
           "flag indicates how to operate when this other dataset isn't "
           "available.\n"
           "\tMISSING_NO_OUTPUT - If the dataset used for filtering isn't "
           "available, there will be no output written to either the "
           "passing or failing database.\n"
           "\tMISSING_PASSING - If the dataset used for filtering isn't "
           "available, all of the storms in the input storm database will "
           "be written to the output passing database.\n"
           "\tMISSING_FAILING - If the dataset used for filtering isn't "
           "available, all of the storms in the output storm database will "
           "be written to the output failing database.\n";
  p_default = MISSING_NO_OUTPUT;
} missing_input_action;


/*********************************************************
 * Algorithm parameters
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS.";
}

paramdef boolean
{
  p_descr = "Flag indicating whether to process all storms or just the "
            "storms that have valid forecasts.";
  p_help = "If set to TRUE, only storms with valid forecasts will be "
           "processed. "
           "If set to FALSE, all storms will be processed and the "
           "forecast valid flag will be preserved from the input.";
  p_default = false;
} valid_forecasts_only;

typedef enum
{
  AREA_FILTER,
  LONGITUDE_FILTER,
  INTEREST_FILTER,
  PARTITION_FILTER
} filter_type_t;

paramdef enum filter_type_t
{
  p_descr = "Type of filter to use when filtering the storms";
  p_help = "\n\tAREA_FILTER - Storms are filtered based on storm area. "
           "See the following parameters:\n"
           "\t\tarea_min_storm_size\n"
           "\n\tLONGITUDE_FILTER - Storms are filtered based on the "
           "longitude of the storm centroid. "
           "See the following parameters:\n"
           "\t\tlongitude_min\n"
           "\n\tINTEREST_FILTER - Storms are filtered based on an "
           "interest grid. "
           "See the following parameters:\n"
           "\t\tinterest_url\n"
           "\t\tinterest_field_name\n"
           "\t\tinterest_level_num\n"
           "\t\tinterest_max_valid_secs\n"
           "\t\tinterest_min_value\n"
           "\t\tinterest_storm_growth\n"
           "\n\tPARTITION_FILTER - Storms are filtered based on a "
           "partition grid. "
           "A partition grid is a grid that partitions the grid points "
           "based on some criteria, like the partition field that comes "
           "out of stratiform_filter. "
           "See the following parameters:\n"
           "\t\tpartition_url\n"
           "\t\tpartition_field_name\n"
           "\t\tpartition_level_num\n"
           "\t\tpartition_max_valid_secs\n"
           "\t\tpartition_value\n"
           "\t\tpartition_percent\n"
           "\t\tpartition_storm_growth\n";
  p_default = AREA_FILTER;
} filter_type;

paramdef boolean
{
  p_descr = "Flag indicating whether to output the filter value to the "
            "output databases";
  p_help = "Will output the following values to the algorithm_value field "
           "of the storm entry for each storm in the output database(s):\n"
           "\tAREA_FILTER - the area for the storm.\n"
           "\tLONGITUDE_FILTER - the longitude of the centroid of the "
           "storm.\n"
           "\tINTEREST_FILTER - the maximum interest value inside of the "
           "storm polygon.\n"
           "\tPARTITION_FILTER - the percentage of grid spaces within the "
           "storm that have the given partition value.\n";
  p_default = FALSE;
} output_algorithm_value;

paramdef double
{
  p_descr = "Minimum storm size when using an area filter";
  p_help = "Used only if filter_type is set to AREA_FILTER.\n"
           "If a storm's area is greater than or equal to this value, "
           "the storm will "
           "be included in the \"passing\" list. "
           "Otherwise, the storm will be included in the \"failing\" list.";
  p_default = 100.0;
} area_min_storm_size;

paramdef double
{
  p_descr = "Minimum longitude for storm centroid when using a "
            "longitude filter";
  p_help = "Used only if filter_type is set to LONGITUDE_FILTER.\n"
           "If the longitude of a storm's centroid is greater than or "
           "equal to this value, "
           "the storm will "
           "be included in the \"passing\" list. "
           "Otherwise, the storm will be included in the \"failing\" list.";
  p_default = 0.0;
} longitude_min;

paramdef string
{
  p_descr = "Interest field URL when using an interest filter";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.";
  p_default = "mdvp:://localhost::mdv/interest";
} interest_url;

paramdef string
{
  p_descr = "Interest field name when using an interest filter";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.\n"
           "Specifies the interest field name exactly as it appears "
           "in the interest MDV file.";
  p_default = "interest";
} interest_field_name;

paramdef long
{
  p_descr = "Interest field level when using an interest filter";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.\n"
           "Specifies the level number to use as the interest field "
           "since the interest field must be 2-dimensional. "
           "If set to a negative number, a composite of the interest "
           "field will be used.";
  p_default = 0;
} interest_level_num;

paramdef long
{
  p_descr = "Maximum valid secons for the input interest field";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.\n"
           "Specifies how old the interest field can be. "
           "If the interest field is older than this, it will not "
           "be used.";
  p_default = 3600;
} interest_max_valid_secs;

typedef enum
{
  MAX,
  MIN
} interest_value_type_t;

paramdef enum interest_value_type_t
{
  p_descr = "Data value type when using an interest filter";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.\n"
           "Determines if the interest value found in the polygon "
           "is the Maximum or the Minimum.";
  p_default = "MAX";
} interest_value_type;

paramdef double
{
  p_descr = "Minimun interest value when using an interest filter";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.\n"
           "If the interest value within the storm's polygon "
           "is greater than or equal to this value, "
           "the storm will be included in the \"passing\" list. "
           "Otherwise, the storm will be included in the \"failing\" list. "
           "See interest_value_type for details on what the interest "
           "value is.";
  p_default = 0.5;
} interest_min_value;

paramdef double
{
  p_descr = "Amount (in km) to grow storms when using an interest filter";
  p_help = "Used only if filter_type is set to INTEREST_FILTER.\n"
           "Before comparing to the interest grid, each of the storms "
           "is grown by this amount around its border. "
           "The growth is done by increasing the distance from the "
           "centroid of each vertex in the polygon by this amount. "
           "So, there will be funny results in pathelogical cases, like "
           "bow shaped storms, where the centroid is not within the "
           "polygon.\n"
           "A negative growth value can be used, but strange results will "
           "occur for any storm vertex that is not at least that far from "
           "the centroid.";
  p_default = 0.0;
} interest_storm_growth;

paramdef string
{
  p_descr = "Partition field URL when using a partition filter";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.";
  p_default = "mdvp:://localhost::mdv/partition";
} partition_url;

paramdef string
{
  p_descr = "Partition field name when using a partition filter";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.\n"
           "Specifies the partition field name exactly as it appears "
           "in the partition MDV file.";
  p_default = "partition";
} partition_field_name;

paramdef long
{
  p_descr = "Partition field level when using a partition filter";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.\n"
           "Specifies the level number to use as the partition field "
           "since the partition field must be 2-dimensional.";
  p_min = 0;
  p_default = 0;
} partition_level_num;

paramdef long
{
  p_descr = "Maximum valid seconds for the input partition field";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.\n"
           "Specifies how old the partition field can be. "
           "If the partition field is older than this, it will not "
           "be used.";
  p_default = 3600;
} partition_max_valid_secs;

paramdef double
{
  p_descr = "Partition value when using a partition filter";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.\n"
           "If the storm's polygon is filled with greater than "
           "partition_percent percent of this value, "
           "the storm will be included in the \"passing\" list. "
           "Otherwise, the storm will be included in the \"failing\" list.";
  p_default = 1;
} partition_value;

paramdef double
{
  p_descr = "Percentage of partition value required when using a "
            "partition filter";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.\n"
           "If the storm's polygon is filled with greater than "
           "this percent of the value given in the partition_value parameter, "
           "the storm will be included in the \"passing\" list. "
           "Otherwise, the storm will be included in the \"failing\" list.";
  p_min = 0.0;
  p_max = 1.0;
  p_default = 0.75;
} partition_percent;

paramdef double
{
  p_descr = "Amount (in km) to grow storms when using a partition filter";
  p_help = "Used only if filter_type is set to PARTITION_FILTER.\n"
           "Before comparing to the partition grid, each of the storms "
           "is grown by this amount around its border. "
           "The growth is done by increasing the distance from the "
           "centroid of each vertex in the polygon by this amount. "
           "So, there will be funny results in pathelogical cases, like "
           "bow shaped storms, where the centroid is not within the "
           "polygon.\n"
           "A negative growth value can be used, but strange results will "
           "occur for any storm vertex that is not at least that far from "
           "the centroid.";
  p_default = 0.0;
} partition_storm_growth;
