/*******************************************
 * Alenia2Mom_tdrp.h
 *
 * TDRP header file for 'Alenia2Mom' module.
 *
 * Code for program Alenia2Mom
 *
 * This header file has been automatically
 * generated by TDRP, do not modify.
 *
 *******************************************/

#ifndef _Alenia2Mom_tdrp_h
#define _Alenia2Mom_tdrp_h

#ifdef __cplusplus
extern "C" {
#endif

#include <tdrp/tdrp.h>

/*
 * typedefs
 */

typedef enum {
  DEBUG_OFF = 0,
  DEBUG_NORM = 1,
  DEBUG_VERBOSE = 2
} Alenia2Mom_debug;

typedef enum {
  IN_TAPE = 0,
  IN_UDP = 1
} Alenia2Mom_input_device;

typedef enum {
  LL_FORMAT = 0,
  DS_FORMAT = 1,
  NATIVE_FORMAT = 2
} Alenia2Mom_output_format;

typedef struct {
  double latitude;
  double longitude;
  double altitude;
} Alenia2Mom_ZR;

/*
 * typedef for main struct - Alenia2Mom_tdrp_struct
 */

typedef struct {

  size_t struct_size;

  /***** debug *****/

  Alenia2Mom_debug debug;

  /***** instance *****/

  char* instance;

  /***** malloc_debug_level *****/

  long malloc_debug_level;

  /***** input_device *****/

  Alenia2Mom_input_device input_device;

  /***** input_tape_name *****/

  char* input_tape_name;

  /***** input_tape_wait *****/

  long input_tape_wait;

  /***** input_udp_port *****/

  long input_udp_port;

  /***** output_format *****/

  Alenia2Mom_output_format output_format;

  /***** write_fmq_output *****/

  tdrp_bool_t write_fmq_output;

  /***** write_udp_output *****/

  tdrp_bool_t write_udp_output;

  /***** output_udp_port *****/

  long output_udp_port;

  /***** output_udp_address *****/

  char* output_udp_address;

  /***** output_fmq_path *****/

  char* output_fmq_path;

  /***** output_fmq_size *****/

  long output_fmq_size;

  /***** output_fmq_nslots *****/

  long output_fmq_nslots;

  /***** output_fmq_compress *****/

  tdrp_bool_t output_fmq_compress;

  /***** write_archive_fmq *****/

  tdrp_bool_t write_archive_fmq;

  /***** archive_fmq_path *****/

  char* archive_fmq_path;

  /***** archive_fmq_size *****/

  long archive_fmq_size;

  /***** archive_fmq_nslots *****/

  long archive_fmq_nslots;

  /***** archive_fmq_compress *****/

  tdrp_bool_t archive_fmq_compress;

  /***** radar_name *****/

  char* radar_name;

  /***** site_name *****/

  char* site_name;

  /***** radar_location *****/

  Alenia2Mom_ZR radar_location;

  /***** elev_table *****/

  struct {
    double *val;
    int len;
  } elev_table;
  double *_elev_table;
  int elev_table_n;

  /***** time_correction *****/

  long time_correction;

  /***** use_wallclock_time *****/

  tdrp_bool_t use_wallclock_time;

  /***** polarization_code *****/

  long polarization_code;

  /***** beam_width *****/

  double beam_width;

  /***** wavelength *****/

  double wavelength;

  /***** avg_xmit_pwr *****/

  double avg_xmit_pwr;

  /***** noise_dbz_at_100km *****/

  double noise_dbz_at_100km;

  /***** output_dbz *****/

  tdrp_bool_t output_dbz;

  /***** output_zdr *****/

  tdrp_bool_t output_zdr;

  /***** output_vel *****/

  tdrp_bool_t output_vel;

  /***** output_width *****/

  tdrp_bool_t output_width;

  /***** valid_only *****/

  tdrp_bool_t valid_only;

  /***** rescale_dbz *****/

  tdrp_bool_t rescale_dbz;

  /***** final_dbz_scale *****/

  double final_dbz_scale;

  /***** final_dbz_bias *****/

  double final_dbz_bias;

  /***** print_summary *****/

  tdrp_bool_t print_summary;

  /***** summary_interval *****/

  long summary_interval;

  /***** print_header *****/

  tdrp_bool_t print_header;

  /***** header_interval *****/

  long header_interval;

} Alenia2Mom_tdrp_struct;

/*
 * function prototypes
 */

/*************************************************************
 * Alenia2Mom_tdrp_load_from_args()
 *
 * Loads up TDRP using the command line args.
 *
 * Check TDRP_usage() for command line actions associated with
 * this function.
 *
 *   argc, argv: command line args
 *
 *   Alenia2Mom_tdrp_struct *params: loads up this struct
 * 
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *   char **params_path_p: if non-NULL, this is set to point to
 *                         the path of the params file used.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int Alenia2Mom_tdrp_load_from_args(int argc, char **argv,
                                Alenia2Mom_tdrp_struct *params,
                                char **override_list,
                                char **params_path_p);

/*************************************************************
 * Alenia2Mom_tdrp_load()
 *
 * Loads up TDRP for a given module.
 *
 * This version of load gives the programmer the option to load
 * up more than one module for a single application. It is a
 * lower-level routine than Alenia2Mom_tdrp_load_from_args,
 * and hence more flexible, but the programmer must do more work.
 *
 *   char *param_file_path: the parameter file to be read in.
 *
 *   Alenia2Mom_tdrp_struct *params: loads up this struct
 *
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *  expand_env: flag to control environment variable
 *                expansion during tokenization.
 *              If TRUE, environment expansion is set on.
 *              If FALSE, environment expansion is set off.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int Alenia2Mom_tdrp_load(char *param_file_path,
                      Alenia2Mom_tdrp_struct *params,
                      char **override_list,
                      int expand_env, int debug);

/*************************************************************
 * Alenia2Mom_tdrp_load_defaults()
 *
 * Loads up defaults for a given module.
 *
 * See Alenia2Mom_tdrp_load() for more details.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int Alenia2Mom_tdrp_load_defaults(Alenia2Mom_tdrp_struct *params,
                               int expand_env);

/*************************************************************
 * Alenia2Mom_tdrp_sync()
 *
 * Syncs the user struct data back into the parameter table,
 * in preparation for printing.
 */

extern void Alenia2Mom_tdrp_sync(void);

/*************************************************************
 * Alenia2Mom_tdrp_print()
 * 
 * Print params file
 *
 * The modes supported are:
 *
 *   PRINT_SHORT:   main comments only, no help or descriptions
 *                  structs and arrays on a single line
 *   PRINT_NORM:    short + descriptions and help
 *   PRINT_LONG:    norm  + arrays and structs expanded
 *   PRINT_VERBOSE: long  + private params included
 */

extern void Alenia2Mom_tdrp_print(FILE *out, tdrp_print_mode_t mode);

/*************************************************************
 * Alenia2Mom_tdrp_free_all()
 *
 * Frees up all TDRP dynamic memory.
 */

extern void Alenia2Mom_tdrp_free_all(void);

/*************************************************************
 * Alenia2Mom_tdrp_check_all_set()
 *
 * Return TRUE if all set, FALSE if not.
 *
 * If out is non-NULL, prints out warning messages for those
 * parameters which are not set.
 */

extern int Alenia2Mom_tdrp_check_all_set(FILE *out);

/*************************************************************
 * Alenia2Mom_tdrp_check_is_set()
 *
 * Return TRUE if parameter is set, FALSE if not.
 *
 */

extern int Alenia2Mom_tdrp_check_is_set(char *param_name);

/*************************************************************
 * Alenia2Mom_tdrp_array_realloc()
 *
 * Realloc 1D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int Alenia2Mom_tdrp_array_realloc(char *param_name,
                              int new_array_n);

/*************************************************************
 * Alenia2Mom_tdrp_array2D_realloc()
 *
 * Realloc 2D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int Alenia2Mom_tdrp_array2D_realloc(char *param_name,
                                 int new_array_n1,
                                 int new_array_n2);

/*************************************************************
 * Alenia2Mom_tdrp_table()
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *Alenia2Mom_tdrp_table(void);

/*************************************************************
 * Alenia2Mom_tdrp_init()
 *
 * Module table initialization function.
 *
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *Alenia2Mom_tdrp_init(Alenia2Mom_tdrp_struct *params);

#ifdef __cplusplus
}
#endif

#endif

