/**********************************************************************
 * TDRP params for KinGin2Cf
 **********************************************************************/

//======================================================================
//
// KinGin2Cf reads radar moments from the Kin-San and Gin-San radars in 
//   Japan. It converts the data into Radx and writes the data to files, 
//   normally in CfRadial format.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
// This application registers with procmap. This is the instance used 
//   for registration.
// Type: string
//

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Input directory for searching for files.
// Files will be searched for in this directory.
// Type: string
//

input_dir = ".";

///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file.  In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line. Paths (in ARCHIVE mode, at 
//   least) MUST contain a day-directory above the data file -- 
//   ./data_file.ext will not work as a file path, but 
//   ./yyyymmdd/data_file.ext will.
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = REALTIME;

///////////// max_realtime_data_age_secs //////////////
//
// Maximum age of realtime data (secs).
// Only data less old than this will be used.
// Type: int
//

max_realtime_data_age_secs = 300;

//======================================================================
//
// READ OPTIONS.
//
//======================================================================
 
///////////// set_ngates_constant /////////////////////
//
// Option to force the number of gates to be constant.
// If TRUE, the number of gates on all rays will be set to the maximum, 
//   and gates added to shorter rays will be filled with missing values.
// Type: boolean
//

set_ngates_constant = FALSE;

//======================================================================
//
// RADAR META-DATA.
//
//======================================================================
 
///////////// radar_name //////////////////////////////
//
// Radar name.
// Type: string
//

radar_name = "Kin";

///////////// site_name ///////////////////////////////
//
// Site name.
// Type: string
//

site_name = "Okinawa";

///////////// pulse_width_usec ////////////////////////
//
// Pulse width (usec).
// Type: double
//

pulse_width_usec = 0.5;

///////////// n_samples ///////////////////////////////
//
// Number of samples per dwell.
// The number of samples used for computing moments.
// Type: int
//

n_samples = 64;

//======================================================================
//
// OPTION TO OVERRIDE RADAR LOCATION.
//
//======================================================================
 
///////////// override_radar_location /////////////////
//
// Option to override the radar location.
// If true, the location in this file will be used. If not, the location 
//   in the time series data will be used.
// Type: boolean
//

override_radar_location = FALSE;

///////////// radar_latitude_deg //////////////////////
//
// Radar latitude (deg).
// See override_radar_location.
// Type: double
//

radar_latitude_deg = -999;

///////////// radar_longitude_deg /////////////////////
//
// Radar longitude (deg).
// See override_radar_location.
// Type: double
//

radar_longitude_deg = -999;

///////////// radar_altitude_meters ///////////////////
//
// Radar altitude (meters).
// See override_radar_location.
// Type: double
//

radar_altitude_meters = -999;

//======================================================================
//
// SPECIFY FIELD NAMES AND OUTPUT ENCODING.
//
//======================================================================
 
///////////// output_fields ///////////////////////////
//
// Output field details.
// Set the details for the output fields. The output_field_name is the 
//   ndtCDF variable name. Set the long name to a more descriptive name. 
//   Set the standard name to the CF standard name for this field.
//
// Type: struct
//   typedef struct {
//      string input_field_name;
//      string output_field_name;
//      string long_name;
//      string standard_name;
//      string output_units;
//      output_encoding_t encoding;
//        Options:
//          OUTPUT_ENCODING_ASIS
//          OUTPUT_ENCODING_FLOAT32
//          OUTPUT_ENCODING_INT32
//          OUTPUT_ENCODING_INT16
//          OUTPUT_ENCODING_INT08
//   }
//
// 1D array - variable length.
//

output_fields = {
  {
    input_field_name = "ZHHnsr",
    output_field_name = "DBZHH_F",
    long_name = "DBZ_clutFiltered_H",
    standard_name = "equivalent_reflectivity_factor",
    output_units = "dBZ",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "ZHHnsratc",
    output_field_name = "DBZHH_F_ATC",
    long_name = "DBZ_clutFiltered_attenCorrected_H",
    standard_name = "equivalent_reflectivity_factor",
    output_units = "dBZ",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "ZVVnsr",
    output_field_name = "DBZVV_F",
    long_name = "DBZ_clutFiltered_V",
    standard_name = "equivalent_reflectivity_factor",
    output_units = "dBZ",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "VELnsr",
    output_field_name = "VEL_F",
    long_name = "VEL_clutFiltered",
    standard_name = "radial_velocity_of_scatterers_away_from_instrument",
    output_units = "m/s",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "VELnsrufd",
    output_field_name = "VEL_UFD",
    long_name = "VEL_clutFiltered_unfolded",
    standard_name = "radial_velocity_of_scatterers_away_from_instrument",
    output_units = "m/s",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "ZDRnsr",
    output_field_name = "ZDR_F",
    long_name = "ZDR_clutFiltered",
    standard_name = "log_differential_reflectivity_hv",
    output_units = "dB",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "ZDRnsratc",
    output_field_name = "ZDR_F_ATC",
    long_name = "ZDR_clutFiltered_attenCorrected",
    standard_name = "log_differential_reflectivity_hv",
    output_units = "dB",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "RHOHVnsr",
    output_field_name = "RHOHV_F",
    long_name = "RHOHV_clutFiltered",
    standard_name = "cross_correlation_ratio_hv",
    output_units = "",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "RHOHVnsrsnc",
    output_field_name = "RHOHV_F_SNC",
    long_name = "RHOHV_clutFiltered_snrCorrected",
    standard_name = "cross_correlation_ratio_hv",
    output_units = "",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "PHIDPnsr",
    output_field_name = "PHIDP_F",
    long_name = "PHIDP_clutFiltered",
    standard_name = "differential_phase_hv",
    output_units = "m/s",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "PHIDPnsrfil",
    output_field_name = "PHIDP_F_FIL",
    long_name = "PHIDP_clutFiltered_rangeFiltered",
    standard_name = "differential_phase_hv",
    output_units = "deg",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "KDPnsr",
    output_field_name = "KDP_F",
    long_name = "KDP_clutFiltered",
    standard_name = "specific_differential_phase_hv",
    output_units = "deg/km",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "AH",
    output_field_name = "A_DBZ_H",
    long_name = "DBZ_attenuation",
    standard_name = "reflectivity_attenuation",
    output_units = "dB",
    encoding = OUTPUT_ENCODING_INT16
  }
  ,
  {
    input_field_name = "ADP",
    output_field_name = "A_ZDR",
    long_name = "ZDR_attenuation",
    standard_name = "differential_reflectivity_attenuation",
    output_units = "dB",
    encoding = OUTPUT_ENCODING_INT16
  }
};

//======================================================================
//
// OUTPUT FORMAT.
//
//======================================================================
 
///////////// output_format ///////////////////////////
//
// Format for the output files.
//
// Type: enum
// Options:
//     OUTPUT_FORMAT_CFRADIAL
//     OUTPUT_FORMAT_DORADE
//     OUTPUT_FORMAT_FORAY
//     OUTPUT_FORMAT_NEXRAD
//     OUTPUT_FORMAT_UF
//

output_format = OUTPUT_FORMAT_CFRADIAL;

///////////// netcdf_style ////////////////////////////
//
// NetCDF style - if output_format is CFRADIAL.
// netCDF classic format, netCDF 64-bit offset format, netCDF4 using 
//   HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls.
//
// Type: enum
// Options:
//     CLASSIC
//     NC64BIT
//     NETCDF4
//     NETCDF4_CLASSIC
//

netcdf_style = CLASSIC;

//======================================================================
//
// OUTPUT BYTE-SWAPPING and COMPRESSION.
//
//======================================================================
 
///////////// output_native_byte_order ////////////////
//
// Option to leave data in native byte order.
// If false, data will be byte-swapped as appropriate on output.
// Type: boolean
//

output_native_byte_order = FALSE;

///////////// output_compressed ///////////////////////
//
// Option to compress data fields on output.
// Applies to netCDF and Dorade. UF does not support compression.
// Type: boolean
//

output_compressed = TRUE;

///////////// compression_level ///////////////////////
//
// Compression level for output, if compressed.
// Applies to netCDF only. Dorade compression is run-length encoding, 
//   and has not options..
// Type: int
//

compression_level = 5;

//======================================================================
//
// OUTPUT DIRECTORY AND FILE NAME.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory path.
// Files will be written to this directory.
// Type: string
//

output_dir = "./output";

///////////// compute_output_path_using_end_time //////
//
// Compute the output file name using the end time of the volume or 
//   sweep.
// If false, the start time will be used instead.
// Type: boolean
//

compute_output_path_using_end_time = TRUE;

///////////// append_day_dir_to_output_dir ////////////
//
// Add the day directory to the output directory.
// Path will be output_dir/yyyymmdd/filename.
// Type: boolean
//

append_day_dir_to_output_dir = TRUE;

///////////// append_year_dir_to_output_dir ///////////
//
// Add the year directory to the output directory.
// Path will be output_dir/yyyy/yyyymmdd/filename.
// Type: boolean
//

append_year_dir_to_output_dir = FALSE;

///////////// write_individual_sweeps /////////////////
//
// Option to write out individual sweeps if appropriate.
// If true, the volume is split into individual sweeps for writing. 
//   Applies to CfRadial format. This is always true for DORADE format 
//   files.
// Type: boolean
//

write_individual_sweeps = FALSE;

