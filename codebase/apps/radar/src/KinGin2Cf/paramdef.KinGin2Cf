/*********************************************************
 * parameter definitions for KinGin2Cf
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * March 2012
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "KinGin2Cf reads radar moments from the Kin-San and Gin-San radars in Japan. It converts the data into Radx and writes the data to files, normally in CfRadial format.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

commentdef {
  p_header = "READ OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

commentdef {
  p_header = "RADAR META-DATA";
}

paramdef string {
  p_default = "Kin";
  p_descr = "Radar name";
} radar_name;

paramdef string {
  p_default = "Okinawa";
  p_descr = "Site name";
} site_name;

paramdef double {
  p_default = 0.5;
  p_descr = "Pulse width (usec).";
} pulse_width_usec;

paramdef int {
  p_default = 64;
  p_descr = "Number of samples per dwell.";
  p_help = "The number of samples used for computing moments.";
} n_samples;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

commentdef {
  p_header = "SPECIFY FIELD NAMES AND OUTPUT ENCODING";
}

typedef enum {
  OUTPUT_ENCODING_ASIS,
  OUTPUT_ENCODING_FLOAT32,
  OUTPUT_ENCODING_INT32,
  OUTPUT_ENCODING_INT16,
  OUTPUT_ENCODING_INT08
} output_encoding_t;

typedef struct {
  string input_field_name; 
  string output_field_name; 
  string long_name; 
  string standard_name; 
  string output_units;
  output_encoding_t encoding;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {
      input_field_name = "ZHHnsr",
      output_field_name = "DBZHH_F",
      long_name = "DBZ_clutFiltered_H",
      standard_name = "equivalent_reflectivity_factor",
      output_units = "dBZ",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "ZHHnsratc",
      output_field_name = "DBZHH_F_ATC",
      long_name = "DBZ_clutFiltered_attenCorrected_H",
      standard_name = "equivalent_reflectivity_factor",
      output_units = "dBZ",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "ZVVnsr",
      output_field_name = "DBZVV_F",
      long_name = "DBZ_clutFiltered_V",
      standard_name = "equivalent_reflectivity_factor",
      output_units = "dBZ",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "VELnsr",
      output_field_name = "VEL_F",
      long_name = "VEL_clutFiltered",
      standard_name = "radial_velocity_of_scatterers_away_from_instrument",
      output_units = "m/s",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "VELnsrufd",
      output_field_name = "VEL_UFD",
      long_name = "VEL_clutFiltered_unfolded",
      standard_name = "radial_velocity_of_scatterers_away_from_instrument",
      output_units = "m/s",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "ZDRnsr",
      output_field_name = "ZDR_F",
      long_name = "ZDR_clutFiltered",
      standard_name = "log_differential_reflectivity_hv",
      output_units = "dB",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "ZDRnsratc",
      output_field_name = "ZDR_F_ATC",
      long_name = "ZDR_clutFiltered_attenCorrected",
      standard_name = "log_differential_reflectivity_hv",
      output_units = "dB",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "RHOHVnsr",
      output_field_name = "RHOHV_F",
      long_name = "RHOHV_clutFiltered",
      standard_name = "cross_correlation_ratio_hv",
      output_units = "",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "RHOHVnsrsnc",
      output_field_name = "RHOHV_F_SNC",
      long_name = "RHOHV_clutFiltered_snrCorrected",
      standard_name = "cross_correlation_ratio_hv",
      output_units = "",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "PHIDPnsr",
      output_field_name = "PHIDP_F",
      long_name = "PHIDP_clutFiltered",
      standard_name = "differential_phase_hv",
      output_units = "m/s",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "PHIDPnsrfil",
      output_field_name = "PHIDP_F_FIL",
      long_name = "PHIDP_clutFiltered_rangeFiltered",
      standard_name = "differential_phase_hv",
      output_units = "deg",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "KDPnsr",
      output_field_name = "KDP_F",
      long_name = "KDP_clutFiltered",
      standard_name = "specific_differential_phase_hv",
      output_units = "deg/km",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "AH",
      output_field_name = "A_DBZ_H",
      long_name = "DBZ_attenuation",
      standard_name = "reflectivity_attenuation",
      output_units = "dB",
      encoding = OUTPUT_ENCODING_INT16
    }
    ,
    {
      input_field_name = "ADP",
      output_field_name = "A_ZDR",
      long_name = "ZDR_attenuation",
      standard_name = "differential_reflectivity_attenuation",
      output_units = "dB",
      encoding = OUTPUT_ENCODING_INT16
    }
  };
  p_descr = "Output field details.";
  p_help = "Set the details for the output fields. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field.";
} output_fields[];

commentdef {
  p_header = "OUTPUT FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = "CLASSIC";
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

paramdef int {
  p_default = 5;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Compute the output file name using the end time of the volume or sweep.";
  p_help = "If false, the start time will be used instead.";
} compute_output_path_using_end_time;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;




