//////////////////////////////////////////////////////////////////////
// parameter definitions SpectraPrint
//
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// May 2006
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "SpectraPrint reads raw time-series data, forms the time series into beams, and prints out spectra and time series values for selected elevations, azimuths and gates.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "MODE OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME, FMQ
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the list of file names specified on the command line. In FMQ mode, the program opens the input_fmq, and reads time series data from the queue.";
} mode;

commentdef {
  p_header = "TIME-SERIES FILE DATA INPUT";
};

paramdef string {
  p_default = "./input";
  p_descr = "Dir for input data files.";
  p_help = "This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, the file paths are specified on the command line.";
} input_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use _latest_data_info file as input trigger.";
  p_help = "REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.";
} use_ldata_info_file;

paramdef int {
  p_default = 360;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

paramdef string {
  p_default = "/tmp/fmq/ts";
  p_descr = "FMQ name for time series data.";
  p_help = "This is used in FMQ mode only.";
} input_fmq;

paramdef boolean {
  p_default = false;
  p_descr = "Option to position the input FMQ at the start of the queue.";
  p_help = "FMQ mode only. If false, we start reading at the end of the queue. This is the default behavior. If true, we position the read pointer at the start of the queue, and read all data available in the queue before starting to read new data.";
} position_fmq_at_start;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to invert the sense of the HV flag in alternating mode.";
  p_help = "In alternating dual-pol mode, the HV flag indicates whether the pulse is horizontally or vertically polarized. Normally 1 indicates H and 0 V. This parameter allows you to invert the sense of the flag, so that 1 is interpreted as V and 0 as H.";
} invert_hv_flag;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Does the PRT in the pulse header refer to the previous time interval?.";
  p_help = "If TRUE, the PRT in the pulse header refers to the time from the PREVIOUS pulse to THIS pulse. If FALSE, the PRT in the header refers to the time from THIS pulse to the NEXT pulse.";
} prt_is_for_previous_interval;

paramdef boolean {
  p_default = true;
  p_descr = "Option to check for missing pulses in the time series.";
  p_help = "If missing pulses are found, the beam formed by those pulses will be discarded.";
} check_for_missing_pulses;

commentdef {
  p_header = "RADAR CALIBRATION";
}

paramdef string {
  p_default = "./radar_cal.xml";
  p_descr = "File name for XML calibration file.";
} cal_file_path;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override cal in time series data.";
  p_help = "If false, the cal information in the time series data will be used. If true, the cal info in the param file will be used.";
} use_cal_from_time_series;

commentdef {
  p_header = "RADAR OPERATION";
};

typedef enum {

  /// Single polarization (NEXRAD)
  SP = 0, 
  /// Dual pol, alternating transmission, copolar receiver only
  /// (CP2 SBand)
  DP_ALT_HV_CO_ONLY = 1, 
  /// Dual pol, alternating transmission, co-polar and cross-polar
  ///receivers (SPOL with Mitch Switch and receiver in 
  /// switching mode, CHILL)
  DP_ALT_HV_CO_CROSS = 2,
  /// Dual pol, alternating transmission, fixed H and V receivers (SPOL
  /// with Mitch Switch and receivers in fixed mode)
  DP_ALT_HV_FIXED_HV = 3,
  /// Dual pol, simultaneous transmission, fixed H and V receivers (NEXRAD
  /// upgrade, SPOL with T and receivers in fixed mode)
  DP_SIM_HV_FIXED_HV = 4,
  /// Dual pol, simultaneous transmission, switching H and V receivers
  /// (SPOL with T and receivers in switching mode)
  DP_SIM_HV_SWITCHED_HV = 5,
  /// Dual pol, H transmission, fixed H and V receivers (CP2 X band)
  DP_H_ONLY_FIXED_HV = 6,
  /// Dual pol, V transmission, fixed H and V receivers (CP2 X band)
  DP_V_ONLY_FIXED_HV = 7

} xmit_rcv_mode_t;

paramdef enum xmit_rcv_mode_t {
  p_default = SP;
  p_descr = "Transmit/receive mode in which the radar is operating.";
} xmit_rcv_mode;

typedef enum {
  WINDOW_RECT,
  WINDOW_VONHANN,
  WINDOW_BLACKMAN
} window_t;

paramdef enum window_t {
  p_default = WINDOW_VONHANN;
  p_descr = "Window to be applied before computing spectra.";
} window;

paramdef int {
  p_default = 64;
  p_descr = "Number of samples (pulses) per dwell.";
} n_samples;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Index the beams on even centers?";
  p_help = "If false, the pulses are formed into beams sequentially, with no overlap.";
} index_the_beams;

paramdef double {
  p_default = 1.0;
  p_descr = "Dwell width (deg).";
} indexed_resolution;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Does the receiver path switch every other pulse?";
} switching_receiver;

commentdef {
  p_header = "OVERRIDING RADAR PARAMETERS";
  p_text = "Some radar parameters may be included in the time series data. This section allows you to optionally override some of those values.";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar name.";
  p_help = "If true, the name in this file will be used. If not, the name in the time series data will be used.";
} override_radar_name;

paramdef string {
  p_default = "SPOL";
  p_descr = "Name of the radar.";
  p_help = "See 'override_radar_name'.";
} radar_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = 39.93208;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -105.18175;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = 1742;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the gate geometry.";
  p_help = "If true, the gate_spacing and start_range in the time series data is overridden by the parameters in this file.";
} override_gate_geometry;

paramdef double {
  p_default = 150;
  p_descr = "Gate spacing (meters).";
  p_help = "See override_gate_geometry.";
} gate_spacing_meters;

paramdef double {
  p_default = 150;
  p_descr = "Start range (meters).";
  p_help = "See override_gate_geometry.";
} start_range_meters;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar wavelength.";
  p_help = "If true, the radar wavelength in this file will be used. If not, the wavelength in the time series data will be used if available.";
} override_radar_wavelength;

paramdef double {
  p_default = 10.0;
  p_descr = "Radar wavelength (cm).";
  p_help = "See override_radar_wavelength.";
} radar_wavelength_cm;

commentdef {
  p_header = "SPECTRAL PRINT SELECTION";
};

paramdef double {
  p_default = -20;
  p_descr = "Minimum SNR for writing spectra to file (dB).";
  p_help = "The spectrum will only be printed if the SNR exceeds this value.";
} min_snr_for_spectra;

typedef struct {
  double min_el;
  double max_el;
  double min_az;
  double max_az;
  double min_range;
  double max_range;
} selected_region_t;

paramdef struct selected_region_t {
  p_default = {
    min_el = 0.0,
    max_el = 1.0,
    min_az = 0.0,
    max_az = 1.0,
    min_range = 0.0,
    max_range = 1.0
  };
  p_descr = "Region for selected prints and spectra files.";
  p_help = "See do_selected_print and write_spectra_files.";
} region;

commentdef {
  p_header = "ASCII OUTPUT FILES";
};

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to write out individual spectra to ASCII files.";
} write_ascii_files;

paramdef string {
  p_default = "./output";
  p_descr = "Directory to which spectra files will be written.";
} output_dir;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to add date and time to output file name.";
} include_time_in_file_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to add elevation angle to output file name.";
} include_elevation_in_file_name;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to add azimuth to output file name.";
} include_azimuth_in_file_name;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to add range to output file name.";
} include_range_in_file_name;

commentdef {
  p_header = "SPDB OUTPUT";
};

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to write out to SPDB data base.";
} write_to_spdb;

paramdef string {
  p_default = "spdbp:://localhost::spdb/spectra";
  p_descr = "SPDB URL to which spectra data will be written.";
} output_spdb_url;

commentdef {
  p_header = "FMQ OUTPUT";
};

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to write out to SPDB data base.";
} write_to_fmq;

paramdef string {
  p_default = "fmqp:://localhost::fmq/spectra";
  p_descr = "FMQ URL to which spectra data will be written.";
} output_fmq_url;

paramdef int {
  p_default = 100000000;
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} output_fmq_size;

paramdef int {
  p_default = 1000;
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;


