/**********************************************************************
 * TDRP params for IntfRemove
 **********************************************************************/

//======================================================================
//
// IntfRemove reads DBZ and SNR data in an input DsRadar FMQ, identifies 
//   interference and removes the interference power from the power 
//   fields, and writes the cleaned up data out to a DsRadar queue.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_fmq_url ///////////////////////////
//
// Input URL for dual-pol moments data via DsRadar FMQ.
// Type: string
//

input_fmq_url = "$(DATA_DIR)/fmq/save1";

///////////// seek_to_start_of_input //////////////////
//
// Option to seek to the start of the input FMQ.
// If TRUE, the program will seek to the start of the fmq and read in 
//   data from the entire queue. If FALSE, it will only read new data as 
//   it is added to the FMQ.
// Type: boolean
//

seek_to_start_of_input = TRUE;

//======================================================================
//
// INPUT FIELD INFORMATION.
//
// Names of input fields in the Dsr queue.
//
//======================================================================
 
///////////// dsr_name_DBZ ////////////////////////////
//
// Dsr field name for DBZ.
// Horizontally-polarized reflectivity factor.
// Type: string
//

dsr_name_DBZ = "DBZ";

///////////// SNR_available ///////////////////////////
//
// Is SNR data available?.
// If not, SNR will be computed from DBZ, using noise_dbz_100km.
// Type: boolean
//

SNR_available = TRUE;

///////////// dsr_name_SNR ////////////////////////////
//
// Dsr field name for SNR.
// Signal-to-noise ratio (dB).
// Type: string
//

dsr_name_SNR = "SNR";

///////////// noise_dbz_at_100km //////////////////////
//
// The noise represented as dBZ at 100km range.
// This is used for computing the signal/noise value from the DBZ field.
// Type: double
//

noise_dbz_at_100km = 0;

//======================================================================
//
// INTERFERENCE DETECTION.
//
// Computing a histogram for the SNR field allows us to identify 
//   interference from the apparently raised noise floor.
//
//======================================================================
 
///////////// number_of_range_segments ////////////////
//
// Number of segments, in range, for computing the interference level.
// We analyze the interference by splitting the beam gates into 
//   segments, and computing a histogram of SNR values for that segment. 
//   The reason for having segments is that as the antenna turns the level 
//   of interference will change because of how the beam pattern interacts 
//   with the source of interference. So the gates closer to the radar may 
//   have a different level of interference than the gates further from 
//   the radar.
// Type: int
//

number_of_range_segments = 3;

///////////// snr_hist_min ////////////////////////////
//
// Min value for snr histogram (dB).
// Type: double
//

snr_hist_min = 0;

///////////// snr_hist_max ////////////////////////////
//
// Max value for snr histogram (dB).
// Type: double
//

snr_hist_max = 100;

///////////// snr_hist_delta //////////////////////////
//
// The resolution of the snr histogram (dB).
// Type: double
//

snr_hist_delta = 1;

///////////// mode_threshold //////////////////////////
//
// Min value of mode to indicate interference.
// We compute a density curve from the histogram. If interference is 
//   present, the mode of the density curve will indicate a peak at the 
//   interference snr level. Set this threshold appropriately to separate 
//   interference from other signals. The lower the value the larger the 
//   percentage of beams considered to have interference.
// Type: double
//

mode_threshold = 0.15;

///////////// tail_threshold //////////////////////////
//
// Min density value for computing interference snr.
// We compute interference snr by considering snr values on either side 
//   of the mode. We stop looking when the density value drops below this 
//   value.
// Type: double
//

tail_threshold = 0.005;

///////////// interference_snr_threshold //////////////
//
// SNR threshold for identifying interference.
// A beam is identified as having interference if the interference SNR 
//   exceeds this value.
// Type: double
//

interference_snr_threshold = 2.5;

///////////// print_histogram /////////////////////////
//
// Print out histogram.
// Type: boolean
//

print_histogram = FALSE;

//======================================================================
//
// INTERFERENCE REMOVAL.
//
// Removing interference once it has been found.
//
//======================================================================
 
///////////// interference_margin /////////////////////
//
// Margin of power removed above the detected interference level (dB).
// We remove somewhat more power that the interference detected, to 
//   eliminate the noisyness in the data left after removal.
// Type: double
//

interference_margin = 3;

//======================================================================
//
// DATA OUTPUT.
//
// The cleaned up data will be output to a DsRadarFmq. All of the input 
//   fields will be written to the output. The original input DBZ and SNR 
//   field will be echoed as DBZ_ORIG and SNR_ORIG. If the SNR field was 
//   not available as an input, the derived SNR will be output.
//
//======================================================================
 
///////////// output_fmq_url //////////////////////////
//
// Output URL for cleaned up data via DsRadar FMQ.
// Type: string
//

output_fmq_url = "fmq/interference_removed";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer. Some of this buffer 
//   will be used for control bytes (12 bytes per message).
// Type: int
//

output_fmq_size = 50000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: int
//

output_fmq_nslots = 7200;

///////////// output_fmq_compress /////////////////////
//
// FMQ compression option.
// If TRUE FMQ messages are compressed.
// Type: boolean
//

output_fmq_compress = FALSE;

///////////// apply_median_filter_to_output_DBZ ///////
//
// Option to filter output DBZ with median filter.
// The filter is applied in range.
// Type: boolean
//

apply_median_filter_to_output_DBZ = FALSE;

///////////// DBZ_median_filter_len ///////////////////
//
// Length of median filter for DBZ - gates.
// See 'appply_median_filter_to_DBZ'.
// Type: int
//

DBZ_median_filter_len = 5;

///////////// apply_nexrad_spike_filter ///////////////
//
// Apply NEXRADR spike filter to DBZ and SNR fields.
// The NEXRAD spike filter filters single and double gates with 
//   significantly raised data relative to the surrounding gates.
//    This routine filters the reflectivity data according to the
//    NEXRAD specification DV1208621F, section 3.2.1.2.2, page 3-15.
//   
//    The algorithm is stated as follows:
//   
//    Clutter detection:
//   
//    The nth bin is declared to be a point clutter cell if its power 
//   value
//    exceeds those of both its second nearest neighbors by a threshold
//    value TCN. In other words:
//   
//       if   P(n) exceeds TCN * P(n-2)
//       and  P(n) exceeds TCN * p(n+2)
//   
//     where
//   
//      TCN is the point clutter threshold factor, which is always
//          greater than 1, and typically has a value of 8 (9 dB)
//   
//      P(n) if the poiwer sum value for the nth range cell
//   
//      n is the range gate number
//   
//    Clutter censoring:
//   
//    The formulas for censoring detected strong point clutter in an
//    arbitrary array A via data substitution are as follows. If the nth
//    range cell is an isolated clutter cell (i.e., it si a clutter cell 
//   but
//    neither of its immediate neighboring cells is a clutter cell) then 
//   the 
//    replacement scheme is as follows:
//   
//      Replace A(n-1) with  A(n-2)
//      Replace A(n)   with  0.5 * A(n-2) * A(n+2)
//      Replace A(n+1) with  A(n+2)
//   
//    If the nth and (n+1)th range bins constitute an isolated clutter 
//   pair,
//    the bin replacement scheme is as follows:
//   
//      Replace A(n-1) with  A(n-2)
//      Replace A(n)   with  A(n+2)
//      Replace A(n+1) with  A(n+3)
//      Replace A(n+2) with  A(n+3)
//   
//    Note that runs of more than 2 successive clutter cells cannot 
//   occur
//    because of the nature of the algorithm.
// Type: boolean
//

apply_nexrad_spike_filter = TRUE;

