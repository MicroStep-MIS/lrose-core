/*********************************************************
 * parameter definitions for HsrlMon
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Oct 2017
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "HsrlMon read UW HSRL raw data files in NetCDF format, extracts data for monitoring, and then writes out text files summarizing the monitoring information. This is intended for transmission to the field catalog.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = 
  "\nIn REALTIME mode, the program wakes up at regular intervals, and processes the latest data files.\n\nIn ARCHIVE mode, the program selects the file(s) appropriately for the start and end times.\n\nIn FILELIST mode, it moves through the list of file names specified on the command line. ";
} mode;

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "REALTIME and ARCHIVE modes only. Files will be searched for in this directory, base on the times selected.";
} input_dir;

paramdef string {
  p_default = "raw";
  p_descr = "Name of directory immediately above the files.";
  p_help = "Typical path would be: /data/2015/07/11/raw/gvhsrl_20150711T150000_data_fl1.nc. This is the name of the subdir between the day-dir and the data files.";
} files_sub_dir;

paramdef int {
  p_default = 3600;
  p_descr = "Max time span in file (secs).";
  p_help =  "A new file is always started after this period.";
} max_file_time_span_secs;

paramdef int {
  p_default = 300;
  p_descr = "Interval period over which the monitoring is performed (secs).";
  p_help =  "This is the interval over which the monitoring statistics are computed.";
} monitoring_interval_secs;

paramdef int {
  p_default = 300;
  p_descr = "Interval between processing latest data (secs)";
  p_help =  "REALTIME mode only. The program wakes up at this interval, and processes the latest available data.";
} realtime_interval_secs;

paramdef int {
  p_default = 60;
  p_descr = "Delay in processing latest data (secs)";
  p_help =  "REALTIME mode only. We wait by this period to give the latest data time to be written to the disk files.";
} realtime_delay_secs;

paramdef string {
  p_default = "gvhsrl";
  p_descr = "File name prefix.";
  p_help = "We use this prefix to find the files to be processed. The filename will be prefix_yyyymmddThhmmss*.nc.";
} file_prefix;

paramdef string {
  p_default = "nc";
  p_descr = "File name extension.";
  p_help = "The input files will have this extension, since they are netcdf files.";
} file_ext;

commentdef {
  p_header = "FIELDS FOR MONITORING";
}

typedef struct {
  string name;
  string qualifier;
  double minValidValue;
  double maxValidValue;
  string note;
} monitoring_field_t;

paramdef struct monitoring_field_t {
  
  p_default ={
    {
      name = "tcsaft_temp1",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0,
      note = ""
    }
    ,
    {
      name = "tcsaft_temp2",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0,
      note = ""
    }
    ,
    {
      name = "tcsaft_temp3",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0,
      note = ""
    }
    ,
    {
      name = "tcsaft_temp4",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0,
      note = ""
    }
  }

} monitoring_fields[];

commentdef {
  p_header = "OUTPUT DIRECTORY for STATS files";
  p_text = "The text output files will be named category.platform.yyyymmddhhmmss.fieldname.txt.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to write statistics text files.";
  p_descr = "Generally these are used by the catalog.";
} write_stats_files;

paramdef string {
  p_default = "/tmp/hsrl_mon/stats";
  p_descr = "Output directory path.";
  p_help = "Monitoring statistics files will be written to this directory.";
} stats_output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to create a subdirectory for each day.";
  p_descr = "If true, a subdirectory named YYYYMMDD will be appended to stats_output_dir.";
} stats_write_to_day_dir;

paramdef string {
  p_default = "lidar";
  p_descr = "Set the category string.";
  p_help = "If empty, no category will be included.";
} stats_file_name_category;

paramdef string {
  p_default = "NSF_NCAR_GV_HSRL";
  p_descr = "Set the platform string.";
  p_help = "If empty, no platform will be included.";
} stats_file_name_platform;

paramdef string {
  p_default = "txt";
  p_descr = "These are text files, so normally .txt is used.";
  p_help = "An extension is always required";
} stats_file_name_extension;

paramdef string {
  p_default = ".";
  p_descr = "Set the delimiter between the parts of the file name.";
  p_help = "NOTE: the extension the delimited is always a period: '.'.";
} stats_file_name_delimiter;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes a time part: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the time part will be omitted.";
} stats_include_time_part_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the time part include the seconds: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the SS will be excluuded from the time part.";
} stats_include_seconds_in_time_part;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes the field label (product type).";
  p_help = "If FALSE, the field label will be omitted.";
} stats_include_field_label_in_file_name;

paramdef string {
  p_default = "MonitorStats";
  p_descr = "Field label for stats files.";
} stats_file_field_label;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write latest_data_info files when an image is created.";
  p_descr = "If true, _latest_data_info files will be written to the output directory, and the file write will be registered with the DataMapper.";
} stats_write_latest_data_info;

