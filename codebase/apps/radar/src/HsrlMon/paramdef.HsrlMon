/*********************************************************
 * parameter definitions for HsrlMon
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Oct 2017
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "HsrlMon read UW HSRL raw data files in NetCDF format, extracts data for monitoring, and then writes out text files summarizing the monitoring information. This is intended for transmission to the field catalog.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = 
  "In REALTIME mode, the program waits for a new input file.  "
  "In ARCHIVE mode, it moves through the data between the start "
  "and end times set on the command line. "
  "In FILELIST mode, it moves through the list of file names "
  "specified on the command line. ";
} mode;

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "REALTIME and ARCHIVE modes only. Files will be searched for in this directory.";
} input_dir;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "REALTIME_FILE mode only. Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is _latest_data_info file available?";
  p_help = "REALTIME_FILE mode only. If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.";
} latest_data_info_avail;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to recurse to subdirectories while looking for new files.";
  p_help = "REALTIME_FILE mode only. If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE."; 
} search_recursively;

paramdef int {
  p_default = 5;
  p_descr = "Maximum depth for recursive directory scan.";
  p_help = "REALTIME_FILE mode only. Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.";
} max_recursion_depth;

paramdef int {
  p_default = 2;
  p_min = 1;
  p_descr = "Sleep time between checking directory for input - secs.";
  p_help = "REALTIME_FILE mode only. If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.";
} wait_between_checks;

paramdef int {
  p_default = 5;
  p_descr = "File quiescence when checking for files - secs.";
  p_help = "REALTIME_FILE mode only. This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.";
} file_quiescence;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "REALTIME_FILE mode only. If set, only files with this extension will be processed.";
} search_ext;

commentdef {
  p_header = "READING RAW NetCDF DATA FILES";
}

paramdef string {
  p_default = "combined_hi";
  p_descr = "Name of combined_hi field in netCDF file.";
  p_help = "This name is also used for the field read in from the instrument raw FMQ in real-time";
} combined_hi_field_name;

paramdef string {
  p_default = "combined_lo";
  p_descr = "Name of combined_lo field in netCDF file.";
  p_help = "This name is also used for the field read in from the instrument raw FMQ in real-time";
} combined_lo_field_name;

paramdef string {
  p_default = "molecular";
  p_descr = "Name of molecular field in netCDF file.";
  p_help = "This name is also used for the field read in from the instrument raw FMQ in real-time";
} molecular_field_name;

paramdef string {
  p_default = "cross";
  p_descr = "Name of cross field in netCDF file.";
  p_help = "This name is also used for the field read in from the instrument raw FMQ in real-time";
} cross_field_name;

commentdef {
  p_header = "OUTPUT DIRECTORY";
}

paramdef string {
  p_default = "/tmp/hsrl_mon";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

paramdef string {
  p_default = "";
  p_descr = "Optional prefix for output filename.";
  p_help = "If empty, the standard prefix will be used.";
} output_filename_prefix;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;

