/*********************************************************
 * parameter definitions for HsrlMon
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Oct 2017
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "HsrlMon read UW HSRL raw data files in NetCDF format, extracts data for monitoring, and then writes out text files summarizing the monitoring information. This is intended for transmission to the field catalog.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = 
  "\nIn REALTIME mode, the program wakes up at regular intervals, and processes the latest data files.\n\nIn ARCHIVE mode, the program selects the file(s) appropriately for the start and end times.\n\nIn FILELIST mode, it moves through the list of file names specified on the command line. ";
} mode;

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "REALTIME and ARCHIVE modes only. Files will be searched for in this directory, base on the times selected.";
} input_dir;

paramdef string {
  p_default = "raw";
  p_descr = "Name of directory immediately above the files.";
  p_help = "Typical path would be: /data/2015/07/11/raw/gvhsrl_20150711T150000_data_fl1.nc. This is the name of the subdir between the day-dir and the data files.";
} files_sub_dir;

paramdef int {
  p_default = 3600;
  p_descr = "Max time span in file (secs).";
  p_help =  "A new file is always started after this period.";
} max_file_time_span_secs;

paramdef int {
  p_default = 300;
  p_descr = "Interval period over which the monitoring is performed (secs).";
  p_help =  "This is the interval over which the monitoring statistics are computed.";
} monitoring_interval_secs;

paramdef int {
  p_default = 300;
  p_descr = "Interval between processing latest data (secs)";
  p_help =  "REALTIME mode only. The program wakes up at this interval, and processes the latest available data.";
} realtime_interval_secs;

paramdef int {
  p_default = 60;
  p_descr = "Delay in processing latest data (secs)";
  p_help =  "REALTIME mode only. We wait by this period to give the latest data time to be written to the disk files.";
} realtime_delay_secs;

paramdef string {
  p_default = "gvhsrl";
  p_descr = "File name prefix.";
  p_help = "We use this prefix to find the files to be processed. The filename will be prefix_yyyymmddThhmmss*.nc.";
} file_prefix;

paramdef string {
  p_default = "nc";
  p_descr = "File name extension.";
  p_help = "The input files will have this extension, since they are netcdf files.";
} file_ext;

commentdef {
  p_header = "FIELDS FOR MONITORING";
}

typedef struct {
  string name;
  string qualifier;
  double minValidValue;
  double maxValidValue;
} monitoring_field_t;

paramdef struct monitoring_field_t {
  
  p_default ={
    {
      name = "tcsaft_temp1",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0
    }
    ,
    {
      name = "tcsaft_temp2",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0
    }
    ,
    {
      name = "tcsaft_temp3",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0
    }
    ,
    {
      name = "tcsaft_temp4",
      qualifier = "",
      minValidValue = -100.0,
      maxValidValue = 100.0
    }
  }

} monitoring_fields[];

commentdef {
  p_header = "OUTPUT DIRECTORY";
}

paramdef string {
  p_default = "/tmp/hsrl_mon";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

paramdef string {
  p_default = "";
  p_descr = "Optional prefix for output filename.";
  p_help = "If empty, the standard prefix will be used.";
} output_filename_prefix;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;

