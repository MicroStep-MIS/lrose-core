/**********************************************************************
 * TDRP params for ./HsrlMon
 **********************************************************************/

//======================================================================
//
// HsrlMon read UW HSRL raw data files in NetCDF format, extracts data 
//   for monitoring, and then writes out text files summarizing the 
//   monitoring information. This is intended for transmission to the 
//   field catalog.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// This application registers with procmap. This is the instance used 
//   for registration.
//
//
// Type: string
//

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//

// In REALTIME mode, the program wakes up at regular intervals, and 
//   processes the latest data files.
//
// In ARCHIVE mode, the program selects the file(s) appropriately for 
//   the start and end times.
//
// In FILELIST mode, it moves through the list of file names specified 
//   on the command line. .
//
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = ARCHIVE;

///////////// input_dir ///////////////////////////////
//
// Input directory for searching for files.
//
// REALTIME and ARCHIVE modes only. Files will be searched for in this 
//   directory, base on the times selected.
//
//
// Type: string
//

input_dir = "/scr/eldora1/rsfdata/cset/hsrl/raw";

///////////// files_sub_dir ///////////////////////////
//
// Name of directory immediately above the files.
//
// Typical path would be: 
//   /data/2015/07/11/raw/gvhsrl_20150711T150000_data_fl1.nc. This is the 
//   name of the subdir between the day-dir and the data files.
//
//
// Type: string
//

files_sub_dir = "raw";

///////////// max_file_time_span_secs /////////////////
//
// Max time span in file (secs).
//
// A new file is always started after this period.
//
//
// Type: int
//

max_file_time_span_secs = 3600;

///////////// monitoring_interval_secs ////////////////
//
// Interval period over which the monitoring is performed (secs).
//
// This is the interval over which the monitoring statistics are 
//   computed.
//
//
// Type: int
//

monitoring_interval_secs = 300;

///////////// realtime_interval_secs //////////////////
//
// Interval between processing latest data (secs).
//
// REALTIME mode only. The program wakes up at this interval, and 
//   processes the latest available data.
//
//
// Type: int
//

realtime_interval_secs = 30;

///////////// realtime_delay_secs /////////////////////
//
// Delay in processing latest data (secs).
//
// REALTIME mode only. We wait by this period to give the latest data 
//   time to be written to the disk files.
//
//
// Type: int
//

realtime_delay_secs = 10;

///////////// file_prefix /////////////////////////////
//
// File name prefix.
//
// We use this prefix to find the files to be processed. The filename 
//   will be prefix_yyyymmddThhmmss*.nc.
//
//
// Type: string
//

file_prefix = "gvhsrl";

///////////// file_ext ////////////////////////////////
//
// File name extension.
//
// The input files will have this extension, since they are netcdf 
//   files.
//
//
// Type: string
//

file_ext = "nc";

//======================================================================
//
// FIELDS FOR MONITORING.
//
//======================================================================
 
///////////// monitoring_fields ///////////////////////
//
//
// Type: struct
//   typedef struct {
//      string name;
//      string qualifier;
//      double minValidValue;
//      double maxValidValue;
//   }
//
// 1D array - variable length.
//

monitoring_fields = {
  {
    name = "TelescopeLocked",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "TelescopeDirection",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "tcsaft_temp1",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsaft_temp2",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsaft_temp3",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsaft_temp4",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsaft_tc_main",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  // ,
  // {
  //   name = "tcsaft_fan1_main",
  //   qualifier = "",
  //   minValidValue = -100,
  //   maxValidValue = 100
  // }
  // ,
  // {
  //   name = "tcsaft_fan2_main",
  //   qualifier = "",
  //   minValidValue = -100,
  //   maxValidValue = 100
  // }
  ,
  {
    name = "tcsaft_main_current",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsaft_fan1_current",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsaft_fan2_current",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  // ,
  // {
  //   name = "tcsfore_fan1_main",
  //   qualifier = "",
  //   minValidValue = -100,
  //   maxValidValue = 100
  // }
  // ,
  // {
  //   name = "tcsfore_fan2_main",
  //   qualifier = "",
  //   minValidValue = -100,
  //   maxValidValue = 100
  // }
  ,
  {
    name = "tcsfore_main_current",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsfore_fan1_current",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsfore_fan2_current",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100
  }
  ,
  {
    name = "tcsfore_goodrecords",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "tcsfore_errorCount",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "shortcell_target",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "l3stats_shotcount",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "l3stats_goodshotcount",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "builduptime_threshhold",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "attenuator",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "etalonposition",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "REGISTERPROTO_test_seedvoltage",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "seedvoltage",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "SlowTuningSeedVoltage",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "opticalbenchairpressure",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "LIDARCTL_mode",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "raw_analog_interferometertemperature",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "raw_analog_etalontemperature",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "pressure",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "CalibrationPowerFilter",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "CrossChannelBlock",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "IodineLongFilter",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "ReceivedSignalFilter",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "RemoveLongI2Cell",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "DetectorShutter",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "OutgoingShutter",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "OutgoingShutterValue",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "OperatorOutgoingShutterValue",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_Lat",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_Lon",
    qualifier = "",
    minValidValue = -100000,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_GPS_MSL_Alt",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 10000000
  }
  ,
  {
    name = "iwg1_Grnd_Spd",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_True_Hdg",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_Pitch",
    qualifier = "",
    minValidValue = -10000,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_Roll",
    qualifier = "",
    minValidValue = -10000,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_Cabin_Pressure",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "iwg1_Solar_Zenith",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "polarization",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 100000
  }
  ,
  {
    name = "total_energy",
    qualifier = "",
    minValidValue = -100,
    maxValidValue = 1.0e10
  }
};

//======================================================================
//
// OUTPUT DIRECTORY.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory path.
//
// Files will be written to this directory.
//
//
// Type: string
//

output_dir = "/tmp/hsrl_mon";

///////////// output_filename_prefix //////////////////
//
// Optional prefix for output filename.
//
// If empty, the standard prefix will be used.
//
//
// Type: string
//

output_filename_prefix = "";

///////////// append_day_dir_to_output_dir ////////////
//
// Add the day directory to the output directory.
//
// Path will be output_dir/yyyymmdd/filename.
//
//
// Type: boolean
//

append_day_dir_to_output_dir = TRUE;

///////////// append_year_dir_to_output_dir ///////////
//
// Add the year directory to the output directory.
//
// Path will be output_dir/yyyy/yyyymmdd/filename.
//
//
// Type: boolean
//

append_year_dir_to_output_dir = FALSE;

///////////// write_latest_data_info //////////////////
//
// Option to write out _latest_data_info files.
//
// If true, the _latest_data_info files will be written after the 
//   converted file is written.
//
//
// Type: boolean
//

write_latest_data_info = FALSE;

