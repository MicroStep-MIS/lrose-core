/**********************************************************************
 * TDRP params for HsrlMon
 **********************************************************************/

//======================================================================
//
// HsrlMon read UW HSRL raw data files in NetCDF format, extracts data 
//   for monitoring, and then writes out text files summarizing the 
//   monitoring information. This is intended for transmission to the 
//   field catalog.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// This application registers with procmap. This is the instance used 
//   for registration.
//
//
// Type: string
//

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//

// In REALTIME mode, the program waits for a new input file.
//
// In FILELIST mode, it moves through the list of file names specified 
//   on the command line. .
//
//
// Type: enum
// Options:
//     REALTIME
//     FILELIST
//

mode = REALTIME;

///////////// input_dir ///////////////////////////////
//
// Input directory for searching for files.
//
// REALTIME mode only. Files will be searched for in this directory.
//
//
// Type: string
//

input_dir = ".";

///////////// max_realtime_data_age_secs //////////////
//
// Maximum age of realtime data (secs).
//
// REALTIME mode only. Only data less old than this will be used.
//
//
// Type: int
//

max_realtime_data_age_secs = 300;

///////////// latest_data_info_avail //////////////////
//
// Is _latest_data_info file available?.
//
// REALTIME mode only. If TRUE, will watch the latest_data_info file. If 
//   FALSE, will scan the input directory for new files.
//
//
// Type: boolean
//

latest_data_info_avail = TRUE;

///////////// search_recursively //////////////////////
//
// Option to recurse to subdirectories while looking for new files.
//
// REALTIME mode only. If TRUE, all subdirectories with ages less than 
//   max_dir_age will be searched. This may take considerable CPU, so be 
//   careful in its use. Only applies if latest_data_info_avail is FALSE.
//
//
// Type: boolean
//

search_recursively = TRUE;

///////////// max_recursion_depth /////////////////////
//
// Maximum depth for recursive directory scan.
//
// REALTIME mode only. Only applies search_recursively is TRUE. This is 
//   the max depth, below input_dir, to which the recursive directory 
//   search will be carried out. A depth of 0 will search the top-level 
//   directory only. A depth of 1 will search the level below the top 
//   directory, etc.
//
//
// Type: int
//

max_recursion_depth = 5;

///////////// wait_between_checks /////////////////////
//
// Sleep time between checking directory for input - secs.
//
// REALTIME mode only. If a directory is large and files do not arrive 
//   frequently, set this to a higher value to reduce the CPU load from 
//   checking the directory. Only applies if latest_data_info_avail is 
//   FALSE.
//
// Minimum val: 1
//
// Type: int
//

wait_between_checks = 2;

///////////// file_quiescence /////////////////////////
//
// File quiescence when checking for files - secs.
//
// REALTIME mode only. This allows you to make sure that a file coming 
//   from a remote machine is complete before reading it. Only applies if 
//   latest_data_info_avail is FALSE.
//
//
// Type: int
//

file_quiescence = 5;

///////////// search_ext //////////////////////////////
//
// File name extension.
//
// REALTIME mode only. If set, only files with this extension will be 
//   processed.
//
//
// Type: string
//

search_ext = "";

//======================================================================
//
// READING RAW NetCDF DATA FILES.
//
//======================================================================
 
///////////// combined_hi_field_name //////////////////
//
// Name of combined_hi field in netCDF file.
//
// This name is also used for the field read in from the instrument raw 
//   FMQ in real-time.
//
//
// Type: string
//

combined_hi_field_name = "combined_hi";

///////////// combined_lo_field_name //////////////////
//
// Name of combined_lo field in netCDF file.
//
// This name is also used for the field read in from the instrument raw 
//   FMQ in real-time.
//
//
// Type: string
//

combined_lo_field_name = "combined_lo";

///////////// molecular_field_name ////////////////////
//
// Name of molecular field in netCDF file.
//
// This name is also used for the field read in from the instrument raw 
//   FMQ in real-time.
//
//
// Type: string
//

molecular_field_name = "molecular";

///////////// cross_field_name ////////////////////////
//
// Name of cross field in netCDF file.
//
// This name is also used for the field read in from the instrument raw 
//   FMQ in real-time.
//
//
// Type: string
//

cross_field_name = "cross";

//======================================================================
//
// OUTPUT DIRECTORY.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory path.
//
// Files will be written to this directory.
//
//
// Type: string
//

output_dir = "/tmp/hsrl_mon";

///////////// output_filename_prefix //////////////////
//
// Optional prefix for output filename.
//
// If empty, the standard prefix will be used.
//
//
// Type: string
//

output_filename_prefix = "";

///////////// append_day_dir_to_output_dir ////////////
//
// Add the day directory to the output directory.
//
// Path will be output_dir/yyyymmdd/filename.
//
//
// Type: boolean
//

append_day_dir_to_output_dir = TRUE;

///////////// append_year_dir_to_output_dir ///////////
//
// Add the year directory to the output directory.
//
// Path will be output_dir/yyyy/yyyymmdd/filename.
//
//
// Type: boolean
//

append_year_dir_to_output_dir = FALSE;

///////////// write_latest_data_info //////////////////
//
// Option to write out _latest_data_info files.
//
// If true, the _latest_data_info files will be written after the 
//   converted file is written.
//
//
// Type: boolean
//

write_latest_data_info = FALSE;

