/******************************************************************
 *
 * Parameter definitions for QpeVerify
 *
 */

commentdef {
  p_header = "QpeVerify reads precip accumulation measurements from SPDB, and compares these with radar-derived QPE values stored in gridded files.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the appropriate level of detail.";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for new input data, and reads data from the latest time back by a specified time margin. In ARCHIVE mode, the program reads all of the SPDB data within a given time interval, and processes it. For each SPDB precip entry, the QPE value is found in the gridded files and these two values are then compared.";
} mode;

commentdef {
  p_header = "MEASURED PRECIP ACCUMULATION AT POINTS";
}

paramdef string {
  p_default = "/tmp/spdb/precip";
  p_descr = "URL for precip measurments.";
  p_help = "Measured precip accumulation is stored in XML format for Wx observations.";
} measured_precip_spdb_url;

paramdef int {
  p_default = 3600;
  p_descr = "Max valid age of precip input data (secs)";
  p_help = "REALTIME mode only. This the max valid age for incoming data. Earlier data will be ignored.";
} realtime_max_valid_age_secs;

paramdef int {
  p_default = 21600;
  p_descr = "How far back to look for realtime data (secs)";
  p_help = "REALTIME mode only.";
} realtime_lookback_secs;

paramdef int {
  p_default = 86400;
  p_descr = "Accumulation period for both measured and qpe data (secs)";
  p_help = "Accumulation period over which the measured and radar-estimated values are compared.";
} accum_period_secs;

paramdef double {
  p_default = 100;
  p_descr = "Max valid accumulation in the measured data (mm)";
  p_help = "If the measured value exceeds this, it is ignored.";
} max_valid_accum_mm;

commentdef {
  p_header = "GRIDDED QPE";
}

paramdef string {
  p_default = "/tmp/mdv/qpe";
  p_descr = "URL for gridded QPE values.";
  p_help = "QPE is stored in grids in either MDV or netCDF. Both are accessed via the MDV interface.";
} qpe_url;

paramdef string {
  p_default = "ACCUM_PID";
  p_descr = "Name of QPE accumulation field in gridded files.";
} qpe_field_name;

paramdef int {
  p_default = -120;
  p_descr = "Time offset for searching for QPE data (secs).";
  p_help = "We search for the first QPE data before the measured data time plus the offset, and within this time margin. Generally this offset should be negative to ensure that we are comparing against the accumulation so far.";
} qpe_read_time_offset_secs;

paramdef int {
  p_default = 3600;
  p_descr = "Time margin for searching for QPE data (secs).";
  p_help = "We search for the first QPE data before the measured data time plus the offset, and within this time margin.";
} qpe_read_time_margin_secs;

paramdef int {
  p_default = 0;
  p_descr = "Margin around the measurement location (grid units)";
  p_help = "We compute the mean QPE value by considering the surrounding points. This is the number of grid points on each side of the measurement location to be used when computing the mean. If the margin is 0, only a single point is used. If the margin is 1, a 3x3 box is used to compute the mean value. If the margin is 2, a 5x5 box is used, etc.";
} qpe_grid_margin;

paramdef double {
  p_default = 100;
  p_descr = "Max valid accumulation in the QPE data (mm)";
  p_help = "If the QPE exceeds this, it is ignored.";
} max_valid_qpe_mm;

commentdef {
  p_header = "USE BOUNDING BOX";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to limit data to within a given bounding box.";
  p_help = "If true, only stations within the box will be accepted.";
} constrain_using_bounding_box;

paramdef double {
  p_default = -90;
  p_descr = "Minimum latitude for bounding box.";
} bounding_box_min_lat;

paramdef double {
  p_default = 90;
  p_descr = "Maximum latitude for bounding box.";
} bounding_box_max_lat;

paramdef double {
  p_default = -180;
  p_descr = "Minimum longitude for bounding box.";
} bounding_box_min_lon;

paramdef double {
  p_default = 180;
  p_descr = "Maximum longitude for bounding box.";
} bounding_box_max_lon;

// commentdef {
//   p_header = "DATA OUTPUT";
// }


