///////////////////////////////////////////////////////
//  parameter definitions for AcGeorefCompare
//
//  Mike Dixon, EOL, NCAR
//  P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
//  March 2016
////////////////////////////////////////////////////////

commentdef {
  p_header = "AcGeorefCompare reads multiple ac georef data sets from SPDB and compares them. It is designed to compare the NCAR GV INS with the HCR Gmigits unit.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Register with procmap.";
} reg_with_procmap;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "OPERATIONS MODE";
}

typedef enum {
  TIME_SERIES_TABLE,
  SINGLE_PERIOD_ARCHIVE,
  SINGLE_PERIOD_REALTIME
} product_type_t;
  
paramdef enum product_type_t {
  p_default = TIME_SERIES_TABLE;
  p_descr = "Type of product that is produced.";
  p_help = "TIME_SERIES_TABLE: produced a text table, one line per primary observation. Results are written to stdout. Each line contains data from both data sets, along with differences between them. The start and end times are specified on the command line.\n\nSINGLE_PERIOD_ARCHIVE: analyze a single specified time period, in archive mode. Print the results in for that single period to stdout. The start time is specified on the command line.\n\nSINGLE_PERIOD_REALTIME: in realtime mode, analyze single time periods. Print the results in for that single period to stdout. Sleep and repeat.";
} product_type;

paramdef string {
  p_default = "2016 09 16 16 00 00";
  p_descr = "Start time in yyyy mm dd hh mm ss";
  p_help = "Applies to TIME_SERIES_TABLE and SINGLE_PERIOD_ARCHIVE product types.";
} start_time;

paramdef string {
  p_default = "2016 09 16 16 00 00";
  p_descr = "End time in yyyy mm dd hh mm ss";
  p_help = "Applies to TIME_SERIES_TABLE product type.";
} end_time;

paramdef double {
  p_default = 2.0;
  p_descr = "Period for analysis (secs).";
  p_help = "Mean values are computed over this period. Applies to SINGLE_PERIOD_REALTIME and SINGLE_PERIOD_ARCHIVE product types.";
} single_period_secs;

paramdef double {
  p_default = 1;
  p_descr = "Sleep time in realtime mode (secs).";
  p_help = "The program repeatedly, sleeping between data retrieval. The end time is the current time, and the start time is the end time minus single_period_secs.";
} realtime_sleep_secs;

commentdef {
  p_header = "DATA INPUT";
  p_text = "We specify a primary and secondary data set. The primary set is read in first, and then data from the secondary data set is matched in time to the entries in the primary.";
}

paramdef string {
  p_default = "/tmp/spdb/ac_georef/raf_1hz";
  p_descr = "SPDB url for primary data set.";
  p_help = "Can take the form of a local directory path, or a full url of the form:\n\n\t'spdbp:://hostname::dir_path'\n\nIf the dir_path starts with '.' or '/', it specifies a relative or absolute path respectively. If not, it specifies a path relative to '$DATA_DIR'.";
} primary_spdb_url;

paramdef string {
  p_default = "/tmp/spdb/ac_georef/cfradial_10hz";
  p_descr = "SPDB url for secondary data set.";
  p_help = "Can take the form of a local directory path, or a full url of the form:\n\n\t'spdbp:://hostname::dir_path'\n\nIf the dir_path starts with '.' or '/', it specifies a relative or absolute path respecively. If not, it specifies a path relative to '$DATA_DIR'.";
} secondary_spdb_url;

commentdef {
  p_header = "DATA ANALYSIS";
  p_text = "Data is written to stdout in ASCII column format.";
}

paramdef double {
  p_default = 1.0;
  p_descr = "Frequency of primary data to be used in the analysis.";
  p_help = "If the data in the primary data set is more frequent than this, we trim it down to this frequency.";
} primary_frequency_hz;

paramdef int {
  p_default = 60;
  p_descr = "Length of data time blocks to be read in (secs).";
  p_help = "The data is read in blocks of this length, to control memory usage for large data sets.";
} time_block_secs;

paramdef double {
  p_default = 0.5;
  p_descr = "Maximum time difference for valid pair (secs).";
  p_help = "This is the max valid time difference between a primary observation and secondary observation.";
} max_time_diff_secs;

commentdef {
  p_header = "AIRCRAFT WEIGHT CALCULATIONS";
}

paramdef double {
  p_default = 11500;
  p_descr = "Fuel burn rate in initial climb (lb/hr).";
} fuel_burn_rate_initial_climb;

paramdef double {
  p_default = 3500;
  p_descr = "Mean Fuel burn rate in cruise after the initial climb (lb/hr).";
} mean_fuel_burn_rate_cruise;

paramdef double {
  p_default = 88000;
  p_descr = "Aircraft takeoff weight (lb).";
} takeoff_weight_lbs;

paramdef double {
  p_default = 20000;
  p_descr = "Target top of climb altitude (ft).";
} top_of_climb_altitude_ft;

commentdef {
  p_header = "TIME SERIES TABLE DETAILS";
};

paramdef boolean {
  p_default = true;
  p_descr = "If true, write a commented header at the start of the output.";
} print_commented_header;

paramdef string {
  p_default = "#";
  p_descr = "Character at start of comment lines.";
  p_help = "Each comment line will be start with this character.";
} comment_character;

paramdef string {
  p_default = " ";
  p_descr = "Delimiter between columns.";
} column_delimiter;

commentdef {
  p_header = "SINGLE PERIOD OUTPUT DETAILS";
};

paramdef boolean {
  p_default = true;
  p_descr = "If true, write the single period statistics to stdout.";
} print_single_period_stats;

paramdef string {
  p_default = "primary";
  p_descr = "Label for primary column in printout.";
} primary_label;

paramdef string {
  p_default = "secondary";
  p_descr = "Label for secondary column in printout.";
} secondary_label;

paramdef boolean {
  p_default = false;
  p_descr = "If true, write the custom variables for primary data set.";
} print_primary_custom_variables;

paramdef string {
  p_default = { "custom0", "custom1", "custom2", "custom3", "custom4",
                "custom5", "custom6", "custom7", "custom8", "custom9" };
  p_descr = "Labels for primary custom variables.";
  p_help = "If the label is left empty, the variable is not printed.";
} primary_custom_labels[10];

paramdef boolean {
  p_default = false;
  p_descr = "If true, write the custom variables for secondary data set.";
} print_secondary_custom_variables;

paramdef string {
  p_default = { "custom0", "custom1", "custom2", "custom3", "custom4",
                "custom5", "custom6", "custom7", "custom8", "custom9" };
  p_descr = "Labels for secondary custom variables.";
  p_help = "If the label is left empty, the variable is not printed.";
} secondary_custom_labels[10];

paramdef boolean {
  p_default = false;
  p_descr = "If true, print the surface velocity stats for HCR.";
  p_help = "The estimated pitch and roll angle errors will also be printed.";
} print_surface_velocity_stats;

paramdef int {
  p_default = 1;
  p_descr = "Index of surface velocity in the custom variables.";
  p_help = "The surface velocity will be in the secondary data set.";
} surface_velocity_custom_index;

