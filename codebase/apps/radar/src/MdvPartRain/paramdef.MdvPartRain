//////////////////////////////////////////////////////////////////////
// parameter definitions MdvPartRain
//
// Mike Dixon, RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// Feb 2008
//

commentdef {
  p_header = "MdvPartRain reads in dual polarization data in an MDV polar file, computes derived fields and writes these out to an MDV file.";
}

commentdef {
  p_header = "DEBUG AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "./input/mdv";
  p_descr = "Directory for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_dir;

paramdef int {
  p_default = 0;
  p_descr = "Max valid age in seconds";
  p_help = "the max valid age for data (secs). The object will not return data which has not arrived within this period. Used only when mode=REALTIME";
} max_valid_age;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set elevation limits";
} set_elev_limits;

paramdef float {
  p_default = 0;
  p_descr = "Lower elev limit (deg).";
} lower_elev;

paramdef float {
  p_default = 0;
  p_descr = "Upper elev limit (deg).";
} upper_elev;

commentdef {
  p_header = "WAVELENGTH";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify the wavelength (cm).";
  p_help = "If FALSE, the wavelength will be obtained from the RADAR chunk in the MDV file. If TRUE, the wavelength will be set from the parameter file.";
} override_wavelength;

paramdef double {
  p_default = 10.0;
  p_descr = "Wavelength (cm).";
  p_help = "Must be supplied if not in MDV file. See 'override_wavelength'.";
} wavelength_cm;

commentdef {
  p_header = "RADAR HEIGHT";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify the radar height.";
  p_help = "If FALSE, the radar height will be obtained from the RADAR chunk in the MDV file. If TRUE, the radar height will be set from the parameter file.";
} override_radar_height;

paramdef double {
  p_default = 10.0;
  p_descr = "Radar height (km msl).";
  p_help = "Must be supplied if not in MDV file. See 'override_radar_height'.";
} radar_height_km;

commentdef {
  p_header = "INPUT FIELD INFORMATION";
  p_text = "Names of input fields in the Dsr queue.";
}

paramdef string {
  p_default = "DBZ";
  p_descr = "Field name for DBZ (ZH) in the input file.";
} DBZ_field_name;

paramdef string {
  p_default = "SNR";
  p_descr = "Field name for SNR in the input file.";
} SNR_field_name;

paramdef string {
  p_default = "ZDR";
  p_descr = "Field name for ZDR in the input file.";
} ZDR_field_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is the LDR field available?.";
} LDR_available;

paramdef string {
  p_default = "LDR";
  p_descr = "Field name for LDR, if available in the input file.";
} LDR_field_name;

paramdef string {
  p_default = "PHIDP";
  p_descr = "Field name for PHIDP in the input file.";
} PHIDP_field_name;

paramdef string {
  p_default = "RHOHV";
  p_descr = "Field name for RHOHV in the input file.";
} RHOHV_field_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compute KDP from PHIDP";
  p_help = "If FALSE, KDP must be available in the input data. See KDP_field_name.";
} compute_kdp;

paramdef string {
  p_default = "KDP_F";
  p_descr = "Field name for KDP in the input file.";
  p_help = "Required if compute_kdp is FALSE.";
} KDP_field_name;

commentdef {
  p_header = "OPTION TO REPLACE MISSING LDR WITH SPECIFIED VALUE";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to replace missing LDR values with a specified value.";
  p_help = "When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.";
} replace_missing_LDR;

paramdef double {
  p_default = 0.0;
  p_descr = "Value to which LDR will be set if missing.";
} LDR_replacement_value;

commentdef {
  p_header = "OPTION TO COMPUTE SNR from DBZ";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to compute the SNR field from the DBZ field.";
  p_help = "If SNR is not available, it can be computed from DBZ, given the noise DBZ at 100 km.";
} compute_snr_from_dbz;

paramdef double {
  p_default = 0.0;
  p_descr = "The noise represented as dBZ at 100km range.";
  p_help = "This is used for computing the signal/noise value from the DBZ field.";
} noise_dbz_at_100km;

commentdef {
  p_header = "SMOOTHING INPUT FIELDS FOR PRECIP AND PID";
  p_text = "DBZ, ZDR, LDR and RHOHV can be somewhat noisy gate-to-gate. This section gives you the option of smoothing the fields in range by applying a median filter.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter DBZ with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_DBZ;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for DBZ - gates.";
  p_help = "See 'appply_median_filter_to_DBZ'";
} DBZ_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter ZDR with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_ZDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for ZDR - gates.";
  p_help = "See 'appply_median_filter_to_ZDR'";
} ZDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter LDR with median filter.";
  p_help = "The filter is computed in range, and affects PID only.";
} apply_median_filter_to_LDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for LDR - gates.";
  p_help = "See 'appply_median_filter_to_LDR'";
} LDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter RHOHV with median filter.";
  p_help = "The filter is computed in range, and affects PID only.";
} apply_median_filter_to_RHOHV;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for RHOHV - gates.";
  p_help = "See 'appply_median_filter_to_RHOHV'";
} RHOHV_median_filter_len;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates for computing standard deviations.";
  p_help = "This applies to computing the standard deviation of zdr and phidp, for PID.";
} ngates_for_sdev;

commentdef {
  p_header = "SMOOTHING FIELDS FOR KDP";
  p_text = "PHIDP can have spikes in it. This section gives you the option of smoothing the fields in range by applying a median filter before computing KDP.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter PHIDP with median filter.";
  p_help = "The filter is applied in range.";
} apply_median_filter_to_PHIDP;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for PHIDP - gates.";
  p_help = "See 'appply_median_filter_to_PHIDP'";
} PHIDP_median_filter_len;

commentdef {
  p_header = "COMPUTING KDP";
  p_text = "Parameters for computing KDP.";
}

typedef enum {
  FIR_LEN_125, FIR_LEN_30, FIR_LEN_20, FIR_LEN_10
} fir_filter_len_t;
  
paramdef enum fir_filter_len_t {
  p_default = FIR_LEN_20;
  p_descr = "Filter length for the FIR filter for PHIDP (gates)";
  p_help = "When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.";
} KDP_fir_filter_len;

paramdef double {
  p_default = 4.0;
  p_descr = "Sets the threshold for difference of phidp.";
  p_help = "This is used to test the difference between the unfolded phidp value and the filtered phidp value. If the difference exceeds this value, we use the original value instead of the filtered value. Applies to computation of KDP only";
} KDP_phidp_difference_threshold;

paramdef double {
  p_default = 12.0;
  p_descr = "Sets the threshold for the standard deviation of phidp in range.";
  p_help = "The sdev of phidp is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_sdev_threshold;

paramdef double {
  p_default = 1.8;
  p_descr = "Sets the threshold for the standard deviation of zdr in range.";
  p_help = "The sdev of zdr is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_zdr_sdev_threshold;

paramdef double {
  p_default = 0.75;
  p_descr = "Sets the threshold for rhohv.";
  p_help = "rhohv is a good test for weather. If rhohv is greater than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_rhohv_threshold;

commentdef {
  p_header = "CENSORING";
}

paramdef double {
  p_default = 0.1;
  p_descr = "Minimum valid precip rate (mm/hr).";
  p_help = "If any computed rate is less than this value, it is set to 0.";
} min_valid_rate;

commentdef {
  p_header = "PRECIP COMPUTATIONS";
  p_text = "Coefficients for the precip equations.";
}

commentdef {
  p_header = "PRECIP_RATE_ZH";
  p_text = "RATE_ZH = zh_aa * (ZH ** zh_bb)";
}

paramdef double {
  p_default = 2.62e-2;
  p_descr = "Coefficient for PRECIP_RATE_ZH.";
} zh_aa;

paramdef double {
  p_default = 0.687;
  p_descr = "Exponent for PRECIP_RATE_ZH.";
} zh_bb;

commentdef {
  p_header = "PRECIP_RATE_Z_ZDR";
  p_text = "RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc)";
}

paramdef double {
  p_default = 7.86e-3;
  p_descr = "Coefficient for PRECIP_RATE_ZZDR.";
} zzdr_aa;

paramdef double {
  p_default = 0.967;
  p_descr = "ZH exponent for PRECIP_RATE_ZZDR.";
} zzdr_bb;

paramdef double {
  p_default = -4.98;
  p_descr = "ZDR exponent for PRECIP_RATE_ZZDR.";
} zzdr_cc;

commentdef {
  p_header = "PRECIP_RATE_KDP";
  p_text = "RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb)";
}

paramdef double {
  p_default = 54.3;
  p_descr = "Coefficient for PRECIP_RATE_KDP.";
} kdp_aa;

paramdef double {
  p_default = 0.806;
  p_descr = "Exponent for PRECIP_RATE_KDP.";
} kdp_bb;

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid precip rate.";
  p_help = "If the SNR at a gate is below this, the precip rate is censored.";
} PRECIP_snr_threshold;

commentdef {
  p_header = "PRECIP_RATE_KDP_ZDR";
  p_text = "RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** kdpzdr_cc)";
}

paramdef double {
  p_default = 136;
  p_descr = "Coefficient for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_aa;

paramdef double {
  p_default = 0.968;
  p_descr = "KDP exponent for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_bb;

paramdef double {
  p_default = -2.86;
  p_descr = "ZDR exponent for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_cc;

commentdef {
  p_header = "PRECIP_RATE_HYBRID";
  p_text = "The HYBRID rate is based on the PID and the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Hybrid et al, JTech, Vol 26, 2009, 2107 - 2122.\n"
    "\t if HAIL is present\n"
    "\t   use RATE_KDP\n"
    "\t else if in SNOW/ICE\n"
    "\t   use RATE_ZH_SNOW\n"
    "\t else if in MIXED PRECIP (brightband)\n"
    "\t   use RATE_ZZDR\n"
    "\t else if in RAIN do the following:\n"
    "\t   if DBZ > threshold and KDP > threshold\n"
    "\t     RATE_HYBRID = RATE_KDP\n"
    "\t   else\n"
    "\t     if ZDR >= THRESHOLD\n"
    "\t       RATE_HYBRID = RATE_ZZDR\n"
    "\t     else\n"
    "\t       RATE_HYBRID = RATE_Z\n";
}

paramdef double {
  p_default = 40;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} hybrid_dbz_threshold;

paramdef double {
  p_default = 0.30;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} hybrid_kdp_threshold;

paramdef double {
  p_default = 0.50;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} hybrid_zdr_threshold;

commentdef {
  p_header = "PARTICLE ID COMPUTATIONS - PID";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to compute particle ID";
} compute_pid;

paramdef string {
  p_descr = "File path for fuzzy logic thresholds for PID.";
  p_help = "This file contains the thresholds and weights for computing particle ID.";
  p_default = "./s_band_pid_input_steraotables27.input";
} pid_thresholds_file_path;

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid PID.";
  p_help = "If the SNR at a gate is below this, the PID is censored.";
} PID_snr_threshold;

paramdef double {
  p_default = 9999.0;
  p_descr = "Maximum SNR for valid PID.";
  p_help = "If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.";
} PID_snr_upper_threshold;

paramdef double {
  p_default = 0.5;
  p_descr = "Minimum valid interest value for identifying a particle.";
  p_help = "If the computed interest value is below this, the PID is set to missing.";
} PID_min_valid_interest;

commentdef {
  p_header = "SOUNDING INPUT FOR PID temperatures - OPTIONAL";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to read sounding data from SPDB.";
  p_help = "If TRUE, the program will read the closest (in time) available sounding from an SPDB data base. The temperature profile from the sounding will be used to override the temperature profile in the PID thresholds config file";
} use_soundings_from_spdb;

paramdef string {
  p_descr = "SPDB URL for sounding data.";
  p_default = "spdb/soundings";
} sounding_spdb_url;

paramdef int {
  p_default = 86400;
  p_descr = "Time margin for retrieving sounding, in secs.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} sounding_search_time_margin_secs;

typedef struct {
  double min_val;
  double max_val;
} data_range_t;

paramdef struct data_range_t {
  p_default = { min_val = 300, max_val = 950 };
  p_descr = "Required pressure range for sounding to be valid (hPa)";
  p_help = "This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_pressure_range_hpa;

paramdef struct data_range_t {
  p_default = { min_val = 500, max_val = 15000 };
  p_descr = "Required height range for sounding to be valid (m)";
  p_help = "This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_height_range_m;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure decreases monotonically.";
  p_help = "If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one."; 
} sounding_check_pressure_monotonically_decreasing;

commentdef {
  p_header = "SMOOTHING OUTPUT PID";
  p_text = "This section gives you the option of smoothing the output pid field in range by applying a median filter.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter PID with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_PID;

paramdef int {
  p_default = 7;
  p_descr = "Length of median filter for PID - gates.";
  p_help = "See 'appply_median_filter_to_PID'";
} PID_median_filter_len;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "./output/mdv/partrain";
  p_descr = "Output URL.";
  p_help = "Output MDV data is written to this URL.";
} output_url;

typedef enum {
  ENCODING_ASIS =      0,
  ENCODING_INT8 =      1,
  ENCODING_INT16 =     2,
  ENCODING_FLOAT32 =   5
} encoding_type_t;

typedef struct {
  string name;
  string long_name;
  string units;
  encoding_type_t encoding;
  boolean write;
} output_field_t;

commentdef {
  p_header = "KDP FIELDS";
}

paramdef struct output_field_t {
  p_default = { "KDP", "KDP", "deg/km", ENCODING_INT16, TRUE };
  p_descr = "If write is TRUE, KDP is included in the output MDV file.";
} KDP_output_field;

paramdef struct output_field_t {
  p_default = { "DBZ_FOR_KDP", "DBZ_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the DBZ used by the kdp algorithm is included in the output MDV file.";
} DBZ_FOR_KDP_output_field;

paramdef struct output_field_t {
  p_default = { "SNR_FOR_KDP", "SNR_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the SNR used by the kdp algorithm is included in the output MDV file.";
} SNR_FOR_KDP_output_field;

paramdef struct output_field_t {
  p_default = { "ZDR_FOR_KDP", "ZDR_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the ZDR used by the kdp algorithm is included in the output MDV file.";
} ZDR_FOR_KDP_output_field;

paramdef struct output_field_t {
  p_default = { "RHOHV_FOR_KDP", "RHOHV_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the RHOHV used by the kdp algorithm is included in the output MDV file.";
} RHOHV_FOR_KDP_output_field;

paramdef struct output_field_t {
  p_default = { "PHIDP_FOR_KDP", "PHIDP_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the PHIDP used by the kdp algorithm is included in the output MDV file.";
} PHIDP_FOR_KDP_output_field;

paramdef struct output_field_t {
  p_default = { "SDPHIDP_FOR_KDP", "SDPHIDP_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the SDPHIDP used by the kdp algorithm is included in the output MDV file.";
} SDPHIDP_FOR_KDP_output_field;

commentdef {
  p_header = "PRECIP FIELDS";
}

paramdef struct output_field_t {
  p_default = { "Rate_ZH", "Precip rate ZH", "mm/hr", ENCODING_INT16, TRUE };
  p_descr = "If write is TRUE, the precip rate from ZH is included in the output MDV file.";
} RATE_ZH_output_field;

paramdef struct output_field_t {
  p_default = { "Rate_Z_ZDR", "Precip rate Z_ZDR", "mm/hr", ENCODING_INT16, TRUE };
  p_descr = "If write is TRUE, the precip rate from Z_ZDR is included in the output MDV file.";
} RATE_Z_ZDR_output_field;

paramdef struct output_field_t {
  p_default = { "Rate_KDP", "Precip rate KDP", "mm/hr", ENCODING_INT16, TRUE };
  p_descr = "If write is TRUE, the precip rate from KDP is included in the output MDV file.";
} RATE_KDP_output_field;

paramdef struct output_field_t {
  p_default = { "Rate_KDP_ZDR", "Precip rate KDP_ZDR", "mm/hr", ENCODING_INT16, TRUE };
  p_descr = "If write is TRUE, the precip rate from KDP_ZDR is included in the output MDV file.";
} RATE_KDP_ZDR_output_field;

paramdef struct output_field_t {
  p_default = { "HYBRID", "Precip rate HYBRID", "mm/hr", ENCODING_INT16, TRUE };
  p_descr = "If write is TRUE, the HYBRID field is included in the output MDV file.";
} RATE_HYBRID_output_field;

paramdef struct output_field_t {
  p_default = { "DBZ_FOR_RATE", "DBZ_used_FOR_RATE_comps", "dBZ", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the DBZ used by the rate algorithm is included in the output MDV file.";
} DBZ_FOR_RATE_output_field;

paramdef struct output_field_t {
  p_default = { "ZDR_FOR_RATE", "ZDR_used_FOR_RATE_comps", "dB", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the ZDR used by the rate algorithm is included in the output MDV file.";
} ZDR_FOR_RATE_output_field;

paramdef struct output_field_t {
  p_default = { "KDP_FOR_RATE", "KDP_used_FOR_RATE_comps", "deg/km", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the KDP used by the rate algorithm is included in the output MDV file.";
} KDP_FOR_RATE_output_field;

commentdef {
  p_header = "PARTICLE ID FIELDS";
}

paramdef struct output_field_t {
  p_default = { "PID", "Particle ID", "", ENCODING_INT8, TRUE };
  p_descr = "If write is TRUE, PID is included in the output MDV file.";
} PID_output_field;

paramdef struct output_field_t {
  p_default = { "PidInterest", "PID interest", "", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, interest for most likely PID is included in the output MDV file.";
} PID_INT_output_field;

paramdef struct output_field_t {
  p_default = { "PID2", "Particle ID2", "", ENCODING_INT8, FALSE };
  p_descr = "If write is TRUE, second most likely PID is included in the output MDV file.";
} PID2_output_field;

paramdef struct output_field_t {
  p_default = { "PidInterest2", "PID interest 2", "", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, interest for second most likely PID is included in the output MDV file.";
} PID_INT2_output_field;

paramdef struct output_field_t {
  p_default = { "PidConfidence", "PID confidence", "", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, confidence in PID is included in the output MDV file.";
} PID_CONFIDENCE_output_field;

paramdef struct output_field_t {
  p_default = { "DBZ_FOR_PID", "DBZ_used_FOR_PID_comps", "dBZ", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the DBZ used by the pid algorithm is included in the output MDV file.";
} DBZ_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "ZDR_FOR_PID", "ZDR_used_FOR_PID_comps", "dB", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the ZDR used by the pid algorithm is included in the output MDV file.";
} ZDR_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "LDR_FOR_PID", "LDR_used_FOR_PID_comps", "dB", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the LDR used by the pid algorithm is included in the output MDV file.";
} LDR_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "PHIDP_FOR_PID", "PHIDP_used_FOR_PID_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the PHIDP used by the pid algorithm is included in the output MDV file.";
} PHIDP_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "RHOHV_FOR_PID", "RHOHV_used_FOR_PID_comps", "", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the RHOHV used by the pid algorithm is included in the output MDV file.";
} RHOHV_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "KDP_FOR_PID", "KDP_used_FOR_PID_comps", "deg/km", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the KDP used by the pid algorithm is included in the output MDV file.";
} KDP_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "SDZDR_FOR_PID", "SDZDR_used_FOR_PID_comps", "dB", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the SDZDR used by the pid algorithm is included in the output MDV file.";
} SDZDR_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "SDPHIDP_FOR_PID", "SDPHIDP_used_FOR_PID_comps", "deg", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, the SDPHIDP used by the pid algorithm is included in the output MDV file.";
} SDPHIDP_FOR_PID_output_field;

paramdef struct output_field_t {
  p_default = { "TEMP_FOR_PID", "PID temperature", "C", ENCODING_INT16, FALSE };
  p_descr = "If write is TRUE, PID temperature is included in the output MDV file.";
} TEMP_FOR_PID_output_field;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output the individual interest fields.";
  p_help = "If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.";
} output_particle_interest_fields;

paramdef enum encoding_type_t {
  p_default = ENCODING_INT8;
  p_descr = "Encoding type for interest fields";
} encoding_for_particle_interest_fields;

commentdef {
  p_header = "ECHO INPUT FIELDS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to copy some of the input fields into the output file.";
  p_help = "If TRUE, the listed fields will be copied to the output MDV file. See 'echo_field_names'";
} echo_input_fields_in_output_file;

paramdef string {
  p_default = {"DBZ", "VEL"};
  p_descr = "List of field names to be copied from the input file to the output file.";
  p_help = "See 'echo_input_fields_in_output_file'";
} echo_field_names[];

