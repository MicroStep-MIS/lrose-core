////////////////////////////////////////////////////////////////////////////////
//
//  Parameter definitions for HsrlSim application
//
//  Mike Dixon, EOL, NCAR, Boulder, CO, 80307, USA
//  April 2017
//
////////////////////////////////////////////////////////////////////////////////
commentdef {
  p_header = "HsrlSim listens for clients. When a client connects, it spawns a child to handle the client. The child opens an HSRL raw NetCDF file, and loops reading the file, creating raw rays and sending them to the client.";
}

paramdef string {
  p_descr = "Process instance";
  p_descr = "This is used to register with the process mapper, procmap";
  p_default = "test";
} instance;  
  
typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef int {
  p_default = 12000;
  p_descr = "Port number.";
  p_help = "The server listens on this port for client requests.";
} port;

paramdef int {
  p_default = 1;
  p_descr = "Max number of clients supported.";
} max_clients;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress the use of
 threads. Set no_threads to TRUE for this type of debugging.";
} no_threads;

paramdef string {
  p_default = "/scr/eldora1/rsfdata/cset/hsrl/instrument/2015/07/07/raw/gvhsrl_20150707T160000_data_fl1.nc";
  p_descr = "Path of raw NetCDF file.";
  p_help = "We read the netCDF file and loop through the contents repeatedly, forming rays and sending them to the client.";
} netcdf_file_path;

paramdef double {
  p_default = 0.5;
  p_descr = "Delay between sending rays (secs).";
  p_help = "We need to simulate real-time ops, so we want to send data at approximatley the correct rate.";
} delay_secs_between_rays;

commentdef {
  p_header = "READING RAW NetCDF DATA FILES";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to combine range gates on read.";
  p_help = "If true, the specified number of range gates will be combined on read to create mean values with lower noisiness.";
} combine_bins_on_read;

paramdef int {
  p_default = 1;
  p_descr = "Number of bins to combine into a single gate.";
  p_help = "In range, we will combine this number of gates to produce a data set with lower spatial resolution but less noiry data.";
} n_bins_per_gate;

paramdef double {
  p_default = -0.300;
  p_descr = "Start range to first bin (km).";
  p_help = "Takes into account dead zone caused by digitizer starting before the pulse.";
} raw_bin_start_range_km;

paramdef double {
  p_default = 0.0075;
  p_descr = "Spacing of raw bins (km).";
  p_help = "The distance between the ray bins in km.";
} raw_bin_spacing_km;

paramdef string {
  p_default = "combined_hi";
  p_descr = "Name of combined_hi field in netCDF file.";
  p_help = "";
} combined_hi_field_name;

paramdef string {
  p_default = "combined_lo";
  p_descr = "Name of combined_lo field in netCDF file.";
  p_help = "";
} combined_lo_field_name;

paramdef string {
  p_default = "molecular";
  p_descr = "Name of molecular field in netCDF file.";
  p_help = "";
} molecular_field_name;

paramdef string {
  p_default = "cross";
  p_descr = "Name of cross field in netCDF file.";
  p_help = "";
} cross_field_name;

