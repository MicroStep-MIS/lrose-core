//////////////////////////////////////////////////////////////////////
// parameter definitions HsrlTcp2Fmq
//
// EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// April 2017
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "HsrlTcp2Fmq reads raw HSRL fields from the instrument server via TCP/IP. It saves the data out to a file message queue (FMQ), which can be read by multiple clients.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef boolean {
  p_default = false;
  p_descr = "Option to register with the process mapper.";
  p_help = "If true, this application will try to register with procmap once per minute. (If unable to do so, no error occurs.)";
} register_with_procmap;

paramdef boolean {
  p_default = false;
  p_descr = "Option to only register with the process mapper during the write.";
  p_help = "Sometimes the reader keeps registering, but no data is being written to the FMQ. If this parameter is true, we only register with procmap during the write. So if no writes are occurring, no registrations will occur and the auto_restarter will kill and restart this application. This makes it robust when the reading hangs for some reason.";
} do_not_register_on_read;

commentdef {
  p_header = "TCP DETAILS";
};

paramdef string {
  p_default = "192.168.84.201";
  p_descr = "Host name on which HSRL raw server is running.";
} hsrl_tcp_server_host;

paramdef int {
  p_default = 40404;
  p_descr = "TCP/IP port on which HSRL server is running.";
} hsrl_tcp_server_port;

commentdef {
  p_header = "OUTPUT FMQ DETAILS";
};

paramdef string {
  p_default = "/tmp/fmq/hsrl_raw";
  p_descr = "Path to output FMQ.";
  p_help = "The FMQ consists of 2 files, ??.buf and ??.stat.";
} output_fmq_path;

paramdef int {
  p_default = 1000000;
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer.";
} output_fmq_size;

paramdef int {
  p_default = 500;
  p_descr = "Number of slots in the output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

commentdef {
  p_header = "DATA MAPPER REGISTRATION";
  p_text = "We let the data mapper know when we write a message.";
};

paramdef int {
  p_default = 5;
  p_descr = "Number of seconds between reports to DataMapper.";
  p_help = "If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.";
} data_mapper_report_interval;

