///////////////////////////////////////////////////////
//  parameter definitions for PartRain
//
//  Mike Dixon, RAP, NCAR
//  P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
//  Oct 2007
////////////////////////////////////////////////////////

commentdef {
  p_header = "PartRain (Particle-ID/Rain-rate) application";
  p_text = "PartRain reads dual-polarization moments in an input DsRadar FMQ, computes rain rate and particle ID, and writes the results to a DsRadar queue.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;
  
paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_descr = "Input URL for dual-pol moments data via DsRadar FMQ";
  p_default = "fmq/moments";
} input_fmq_url;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to seek to the start of the input FMQ.";
  p_help = "If TRUE, the program will seek to the start of the fmq and read in data from the entire queue. If FALSE, it will only read new data as it is added to the FMQ.";
} seek_to_start_of_input;

commentdef {
  p_header = "WAVELENGTH";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify the wavelength (cm).";
  p_help = "If FALSE, the wavelength will be obtained from the input data stream. If TRUE, the wavelength will be set from the parameter file.";
} override_wavelength;

paramdef double {
  p_default = 10.0;
  p_descr = "Wavelength (cm).";
  p_help = "See 'override_wavelength'.";
} wavelength_cm;

commentdef {
  p_header = "INPUT FIELD INFORMATION";
  p_text = "Names of input fields in the Dsr queue. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.";
}

paramdef string {
  p_default = "SNR";
  p_descr = "Dsr field name for SNR.";
  p_help = "Signal-to-noise ratio (dB).";
} dsr_name_SNR;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is SNR data available?";
  p_help = "If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.";
} SNR_available;

paramdef double {
  p_default = 0.0;
  p_descr = "The noise value, represented as dBZ at a range of 100km.";
  p_help = "This is used for computing the SNR from the DBZ field. It is only used if SNR_available is FALSE. The SNR will be computed by range-correcting this value and using it as the noise value.";
} noise_dbz_at_100km;

paramdef string {
  p_default = "DBZ";
  p_descr = "Dsr field name for DBZ.";
  p_help = "Horizontally-polarized reflectivity factor.";
} dsr_name_DBZ;

paramdef string {
  p_default = "VEL";
  p_descr = "Dsr field name for VEL, radial velocity.";
  p_help = "Only used for passing data through. VEL data not used by PartRain.";
} dsr_name_VEL;

paramdef string {
  p_default = "WIDTH";
  p_descr = "Dsr field name for WIDTH, spectrum width.";
  p_help = "Only used for passing data through. WIDTH data not used by PartRain.";
} dsr_name_WIDTH;

paramdef string {
  p_default = "ZDR";
  p_descr = "Dsr field name for ZDR.";
} dsr_name_ZDR;

paramdef string {
  p_default = "PHIDP";
  p_descr = "Dsr field name for PHIDP.";
} dsr_name_PHIDP;

paramdef string {
  p_default = "RHOHV";
  p_descr = "Dsr field name for RHOHV.";
} dsr_name_RHOHV;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is KDP data available?";
  p_help = "If not, KDP will be computed from PHIDP";
} KDP_available;

paramdef string {
  p_default = "KDP";
  p_descr = "Dsr field name for KDP.";
} dsr_name_KDP;

// paramdef boolean {
//   p_default = TRUE;
//   p_descr = "Is LDR data available?";
// } LDR_available;

paramdef string {
  p_default = "LDR";
  p_descr = "Dsr field name for LDR.";
} dsr_name_LDR;

commentdef {
  p_header = "OPTION TO REPLACE MISSING LDR WITH SPECIFIED VALUE";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to replace missing LDR values with a specified value.";
  p_help = "When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.";
} replace_missing_LDR;

paramdef double {
  p_default = 0.0;
  p_descr = "Value to which LDR will be set if missing.";
} LDR_replacement_value;

commentdef {
  p_header = "SMOOTHING INPUT FIELDS";
  p_text = "DBZ, ZDR, LDR and RHOHV can be somewhat noisy gate-to-gate. This section gives you the option of smoothing the fields in range by applying a median filter.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter DBZ with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_DBZ;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for DBZ - gates.";
  p_help = "See 'appply_median_filter_to_DBZ'";
} DBZ_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter ZDR with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_ZDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for ZDR - gates.";
  p_help = "See 'appply_median_filter_to_ZDR'";
} ZDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter LDR with median filter.";
  p_help = "The filter is computed in range, and affects PID only.";
} apply_median_filter_to_LDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for LDR - gates.";
  p_help = "See 'appply_median_filter_to_LDR'";
} LDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter RHOHV with median filter.";
  p_help = "The filter is computed in range, and affects PID only.";
} apply_median_filter_to_RHOHV;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for RHOHV - gates.";
  p_help = "See 'appply_median_filter_to_RHOHV'";
} RHOHV_median_filter_len;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates for computing standard deviations.";
  p_help = "This applies to computing the standard deviation of zdr and phidp, for PID.";
} ngates_for_sdev;

commentdef {
  p_header = "SMOOTHING FIELDS FOR KDP";
  p_text = "PHIDP can have spikes in it. This section gives you the option of smoothing the fields in range by applying a median filter before computing KDP. This only applies to KDP.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter PHIDP with median filter.";
  p_help = "The filter is applied in range.";
} apply_median_filter_to_PHIDP;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for PHIDP - gates.";
  p_help = "See 'appply_median_filter_to_PHIDP'";
} PHIDP_median_filter_len;

commentdef {
  p_header = "COMPUTING KDP";
  p_text = "Parameters for computing KDP.";
}

typedef enum {
  FIR_LEN_125, FIR_LEN_30, FIR_LEN_20, FIR_LEN_10
} fir_filter_len_t;
  
paramdef enum fir_filter_len_t {
  p_default = FIR_LEN_20;
  p_descr = "Filter length for the FIR filter for PHIDP (gates)";
  p_help = "When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.";
} KDP_fir_filter_len;

paramdef double {
  p_default = 4.0;
  p_descr = "Sets the threshold for difference of phidp.";
  p_help = "This is used to test the difference between the unfolded phidp value and the filtered phidp value. If the difference exceeds this value, we use the original value instead of the filtered value. Applies to computation of KDP only";
} KDP_phidp_difference_threshold;

paramdef double {
  p_default = 12.0;
  p_descr = "Sets the threshold for the standard deviation of phidp in range.";
  p_help = "The sdev of phidp is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_sdev_threshold;

paramdef double {
  p_default = 1.8;
  p_descr = "Sets the threshold for the standard deviation of zdr in range.";
  p_help = "The sdev of zdr is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_zdr_sdev_threshold;

paramdef double {
  p_default = 0.75;
  p_descr = "Sets the threshold for rhohv.";
  p_help = "rhohv is a good test for weather. If rhohv is greater than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_rhohv_threshold;

commentdef {
  p_header = "SMOOTHING OUTPUT PID";
  p_text = "This section gives you the option of smoothing the output pid field in range by applying a median filter.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter PID with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_PID;

paramdef int {
  p_default = 7;
  p_descr = "Length of median filter for PID - gates.";
  p_help = "See 'appply_median_filter_to_PID'";
} PID_median_filter_len;

commentdef {
  p_header = "CENSORING";
}

paramdef double {
  p_default = 30;
  p_descr = "KDP-based rates will be set to 0 for gates with DBZ values below this threshold.";
  p_help = "KDP can be a noisy field, which can lead to large KDP-based estimates even in low reflectivity areas. Use of this threshold prevents high KDP estimates in low reflectivity regions.";
} min_DBZ_for_KDP_rates;

paramdef double {
  p_default = 0.1;
  p_descr = "Minimum valid precip rate (mm/hr).";
  p_help = "If any computed rate is less than this value, it is set to 0.";
} min_valid_rate;

commentdef {
  p_header = "PRECIP COMPUTATIONS";
  p_text = "Coefficients for the precip equations.";
}

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid PID.";
  p_help = "If the SNR at a gate is below this, the PID is censored.";
} PRECIP_snr_threshold;

commentdef {
  p_header = "PRECIP_RATE_ZH";
  p_text = "RATE_ZH = zh_aa * (ZH ** zh_bb)";
}

paramdef double {
  p_default = 2.62e-2;
  p_descr = "Coefficient for PRECIP_RATE_ZH.";
} zh_aa;

paramdef double {
  p_default = 0.687;
  p_descr = "Exponent for PRECIP_RATE_ZH.";
} zh_bb;

commentdef {
  p_header = "PRECIP_RATE_SNOW_ZH";
  p_text = "RATE_SNOW_ZH = zh_aa_snow * (ZH ** zh_bb_snow)";
}

paramdef double {
  p_default = 0.0365;
  p_descr = "Coefficient for PRECIP_RATE_ZH in SNOW.";
} zh_aa_snow;

paramdef double {
  p_default = 0.625;
  p_descr = "Exponent for PRECIP_RATE_ZH in SNOW.";
} zh_bb_snow;

commentdef {
  p_header = "PRECIP_RATE_Z_ZDR";
  p_text = "RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc)";
}

paramdef double {
  p_default = 7.86e-3;
  p_descr = "Coefficient for PRECIP_RATE_ZZDR.";
} zzdr_aa;

paramdef double {
  p_default = 0.967;
  p_descr = "ZH exponent for PRECIP_RATE_ZZDR.";
} zzdr_bb;

paramdef double {
  p_default = -4.98;
  p_descr = "ZDR exponent for PRECIP_RATE_ZZDR.";
} zzdr_cc;

commentdef {
  p_header = "PRECIP_RATE_KDP";
  p_text = "RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb)";
}

paramdef double {
  p_default = 54.3;
  p_descr = "Coefficient for PRECIP_RATE_KDP.";
} kdp_aa;

paramdef double {
  p_default = 0.806;
  p_descr = "Exponent for PRECIP_RATE_KDP.";
} kdp_bb;

commentdef {
  p_header = "PRECIP_RATE_KDP_ZDR";
  p_text = "RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** kdpzdr_cc)";
}

paramdef double {
  p_default = 136;
  p_descr = "Coefficient for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_aa;

paramdef double {
  p_default = 0.968;
  p_descr = "KDP exponent for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_bb;

paramdef double {
  p_default = -2.86;
  p_descr = "ZDR exponent for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_cc;

commentdef {
  p_header = "PRECIP_RATE_HYBRID";
  p_text = "The HYBRID rate is based on the PID and the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Hybrid et al, JTech, Vol 26, 2009, 2107 - 2122.\n"
    "\t if HAIL is present\n"
    "\t   use RATE_KDP\n"
    "\t else if in SNOW/ICE\n"
    "\t   use RATE_ZH_SNOW\n"
    "\t else if in MIXED PRECIP (brightband)\n"
    "\t   use RATE_ZZDR\n"
    "\t else if in RAIN do the following:\n"
    "\t   if DBZ > threshold and KDP > threshold\n"
    "\t     RATE_HYBRID = RATE_KDP\n"
    "\t   else\n"
    "\t     if ZDR >= THRESHOLD\n"
    "\t       RATE_HYBRID = RATE_ZZDR\n"
    "\t     else\n"
    "\t       RATE_HYBRID = RATE_Z\n";
}

paramdef double {
  p_default = 40;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} hybrid_dbz_threshold;

paramdef double {
  p_default = 0.30;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} hybrid_kdp_threshold;

paramdef double {
  p_default = 0.50;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} hybrid_zdr_threshold;

commentdef {
  p_header = "PRECIP_RATE_HIDRO";
  p_text = "The HIDRO rate is based on the CSU-HIDRO algorithm. See 'A New Dual-Polarization Radar Rainfall Algorithm: Application to Colorado Precipition Events', Cifelli et al, JTech, Vol 28, 2011, 352 - 364. NOTE - this algorithm is generally only applied to liquid and mixed-phase precip, so you need to run PID for this to work as intended.\n"
    "\t For ice:\n"
    "\t   RATE_HIDRO = MISSING\n"
    "\t For mixed_phase:\n"
    "\t   if KDP >= threshold\n"
    "\t     RATE_HIDRO = RATE_KDP\n"
    "\t   else\n"
    "\t     RATE_HIDRO = MISSING\n"
    "\t For liquid_phase:\n"
    "\t   if KDP >= threshold and DBZ >= threhold\n"
    "\t     if ZDR >= THRESHOLD\n"
    "\t       RATE_HIDRO = RATE_KDPZDR\n"
    "\t     else\n"
    "\t       RATE_HIDRO = RATE_KDP\n"
    "\t   else\n"
    "\t     if ZDR >= THRESHOLD\n"
    "\t       RATE_HIDRO = RATE_Z\n"
    "\t     else\n"
    "\t       RATE_HIDRO = RATE_ZZDR\n";
}

paramdef double {
  p_default = 38;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} hidro_dbz_threshold;

paramdef double {
  p_default = 0.3;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} hidro_kdp_threshold;

paramdef double {
  p_default = 0.5;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} hidro_zdr_threshold;

commentdef {
  p_header = "PRECIP_RATE_BRINGI";
  p_text = "The BRINGI rate is based on the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Bringi et al, JTech, Vol 26, 2009, 2107 - 2122.\n"
    "\t if DBZ > threshold and KDP > threshold\n"
    "\t   RATE_BRINGI = RATE_KDP\n"
    "\t else\n"
    "\t   if ZDR >= THRESHOLD\n"
    "\t     RATE_BRINGI = RATE_ZZDR\n"
    "\t   else\n"
    "\t     RATE_BRINGI = RATE_Z\n";
}

paramdef double {
  p_default = 40;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} bringi_dbz_threshold;

paramdef double {
  p_default = 0.15;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} bringi_kdp_threshold;

paramdef double {
  p_default = 0.1;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} bringi_zdr_threshold;

commentdef {
  p_header = "PARTICLE ID COMPUTATIONS - PID";
}

paramdef string {
  p_descr = "File path for fuzzy logic thresholds for PID.";
  p_help = "This file contains the thresholds and weights for computing particle ID.";
  p_default = "./s_band_pid_input_steraotables27.input";
} pid_thresholds_file_path;

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid PID.";
  p_help = "If the SNR at a gate is below this, the PID is censored.";
} PID_snr_threshold;

paramdef double {
  p_default = 9999.0;
  p_descr = "Maximum SNR for valid PID.";
  p_help = "If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.";
} PID_snr_upper_threshold;

paramdef double {
  p_default = 0.5;
  p_descr = "Minimum valid interest value for identifying a particle.";
  p_help = "If the computed interest value is below this, the PID is set to missing.";
} PID_min_valid_interest;

commentdef {
  p_header = "SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the standard 4/3 earth radius model for refraction.";
  p_help = "If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.";
} override_standard_pseudo_earth_radius;

paramdef double {
  p_default = 1.33333333;
  p_descr = "Ratio for computing the pseudo earth radius for beam height computations.";
  p_help = "For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.";
} pseudo_earth_radius_ratio;

commentdef {
  p_header = "SOUNDING INPUT FOR PID temperatures - OPTIONAL";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to read sounding data from SPDB.";
  p_help = "If TRUE, the program will read the closest (in time) available sounding from an SPDB data base. The temperature profile from the sounding will be used to override the temperature profile in the PID thresholds config file";
} use_soundings_from_spdb;

paramdef string {
  p_descr = "SPDB URL for sounding data.";
  p_default = "spdb/soundings";
} sounding_spdb_url;

paramdef int {
  p_default = 86400;
  p_descr = "Time margin for retrieving sounding, in secs.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} sounding_search_time_margin_secs;

paramdef string {
  p_default = "";
  p_descr = "Name of sounding location.";
  p_help = "If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.";
} sounding_location_name;

typedef struct {
  double min_val;
  double max_val;
} data_range_t;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure covers the required range.";
  p_help = "If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified."; 
} sounding_check_pressure_range;

paramdef struct data_range_t {
  p_default = { min_val = 300, max_val = 950 };
  p_descr = "Required pressure range for sounding to be valid (hPa)";
  p_help = "This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_pressure_range_hpa;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that height covers the required range.";
  p_help = "If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified."; 
} sounding_check_height_range;

paramdef struct data_range_t {
  p_default = { min_val = 500, max_val = 15000 };
  p_descr = "Required height range for sounding to be valid (m)";
  p_help = "This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_height_range_m;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure decreases monotonically.";
  p_help = "If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one."; 
} sounding_check_pressure_monotonically_decreasing;

paramdef double {
  p_default = 0.0;
  p_descr = "Correction to the heights read in with the sounding (km).";
  p_help = "This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.";
} sounding_height_correction_km;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use wet bulb temperature profile.";
  p_help = "If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. This is thought to more closely track the temperature of melting ice.";
} sounding_use_wet_bulb_temp;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_descr = "Output URL for derived data via DsRadar FMQ";
  p_default = "fmq/derived";
} output_fmq_url;

paramdef int {
  p_default = 50000000;
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} output_fmq_size;

paramdef int {
  p_default = 7200;
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = FALSE;
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} output_fmq_compress;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set up the output FMQ as blocking.";
  p_help = "If TRUE, the output FMQ will be set up for blocking operation. If the FMQ becomes full, this app will then block until there is space for more data. WARNING - only use this with a single reader.";
} write_blocking;

typedef enum {

  SNR,
  DBZ,
  VEL,
  WIDTH,
  ZDR,
  LDR,
  PHIDP,
  RHOHV,
  KDP,
  DBZ_FOR_KDP,
  ZDR_FOR_KDP,
  RHOHV_FOR_KDP,
  SNR_FOR_KDP,
  PHIDP_FOR_KDP,
  PHIDP_FILT_FOR_KDP,
  SDPHIDP_FOR_KDP,
  SDZDR_FOR_KDP,
  PRECIP_RATE_ZH,
  PRECIP_RATE_ZH_SNOW,
  PRECIP_RATE_Z_ZDR,
  PRECIP_RATE_KDP,
  PRECIP_RATE_KDP_ZDR,
  PRECIP_RATE_HYBRID,
  PRECIP_RATE_PID,
  PRECIP_RATE_HIDRO,
  PRECIP_RATE_BRINGI,
  DBZ_FOR_RATE,
  ZDR_FOR_RATE,
  KDP_FOR_RATE,
  PARTICLE_ID,
  PID_INTEREST,
  PARTICLE_ID2,
  PID_INTEREST2,
  PID_CONFIDENCE,
  DBZ_FOR_PID,
  ZDR_FOR_PID,
  LDR_FOR_PID,
  PHIDP_FOR_PID,
  RHOHV_FOR_PID,
  KDP_FOR_PID,
  SDZDR_FOR_PID,
  SDPHIDP_FOR_PID,
  TEMP_FOR_PID

} output_field_id_t;

typedef struct {

  output_field_id_t id;
  string name;
  string units;
  double scale;
  double bias;
    
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    { KDP, "KDP", "deg/km", 0.001, -32.0},
    { DBZ_FOR_KDP, "DBZ_FOR_KDP", "dBZ", 0.01, -320},
    { ZDR_FOR_KDP, "ZDR_FOR_KDP", "dB", 0.001, -32},
    { RHOHV_FOR_KDP, "RHOHV_FOR_KDP", "", 0.0001, -1},
    { SNR_FOR_KDP, "SNR_FOR_KDP", "dB", 0.01, -320},
    { PHIDP_FOR_KDP, "PHIDP_FOR_KDP", "deg", 0.06, -200},
    { PHIDP_FOR_KDP, "PHIDP_FOR_KDP", "deg", 0.06, -200},
    { PHIDP_FILT_FOR_KDP, "PHIDP_FILT_FOR_KDP", "deg", 0.06, -200},
    { SDPHIDP_FOR_KDP, "SDPHIDP_FOR_KDP", "deg", 0.001, -1},
    { SDZDR_FOR_KDP, "SDZDR_FOR_KDP", "deg", 0.001, -1},
    { PRECIP_RATE_ZH, "RATE_ZH", "mm/hr", 0.01, 0},
    { PRECIP_RATE_Z_ZDR, "RATE_Z_ZDR", "mm/hr", 0.01, 0},
    { PRECIP_RATE_KDP, "RATE_KDP", "mm/hr", 0.01, 0},
    { PRECIP_RATE_KDP_ZDR, "RATE_KDP_ZDR", "mm/hr", 0.01, 0},
    { PRECIP_RATE_HYBRID, "RATE_HYBRID", "mm/hr", 0.01, 0},
    { PRECIP_RATE_PID, "RATE_PID", "mm/hr", 0.01, 0},
    { DBZ_FOR_RATE, "DBZ_FOR_RATE", "dBZ", 0.01, -320},
    { ZDR_FOR_RATE, "ZDR_FOR_RATE", "dB", 0.001, -32},
    { KDP_FOR_RATE, "KDP_FOR_RATE", "deg/km", 0.001, -32.0},
    { PARTICLE_ID, "PID", "", 1, 0},
    { PID_INTEREST, "PidInterest", "", 0.0001, -1},
    { PARTICLE_ID2, "PID2", "", 1, 0},
    { PID_INTEREST2, "PidInterest2", "", 0.0001, -1},
    { PID_CONFIDENCE, "PidConfidence", "", 0.0001, -1},
    { DBZ_FOR_PID, "DBZ_FOR_PID", "dBZ", 0.01, -320},
    { ZDR_FOR_PID, "ZDR_FOR_PID", "dB", 0.001, -32},
    { LDR_FOR_PID, "LDR_FOR_PID", "dB", 0.001, -32},
    { PHIDP_FOR_PID, "PHIDP_FOR_PID", "deg", 0.06, -200},
    { RHOHV_FOR_PID, "RHOHV_FOR_PID", "", 0.0001, -1},
    { KDP_FOR_PID, "KDP_FOR_PID", "deg/km", 0.001, -32.0},
    { SDZDR_FOR_PID, "SDZDR_FOR_PID", "dB", 0.001, -1},
    { SDPHIDP_FOR_PID, "SDPHIDP_FOR_PID", "deg", 0.001, -1},
    { TEMP_FOR_PID, "TEMP_FOR_PID", "C", 0.01, -100}
  };
  p_descr = "Indicate which fields should be written to the Dsr FMQ.";
  p_help = "Choose the ID from the list. The name and units can be set however the user prefers. The scale and bias are applied to the floating point value to compute the 16-bit output value for the FMQ.";
} output_fields[];

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output the individual interest fields.";
  p_help = "If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.";
} output_particle_interest_fields;

paramdef int {
  p_default = 5;
  p_descr = "Number of seconds between reports to DataMapper.";
  p_help = "If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.";
} data_mapper_report_interval;

