/**********************************************************************
 * TDRP params for ChillTsFile2Fmq
 **********************************************************************/

//======================================================================
//
// ChillTsFile2Fmq reads legacy CHILL time-series data from a file. It 
//   converts the format to IWRF, and saves the time series data out to a 
//   file message queue (FMQ), which can be read by multiple clients. Its 
//   purpose is mainly for simulation and debugging time series 
//   operations.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file to process. 
//   In ARCHIVE mode, it moves through the list of file names specified on 
//   the command line. In SIMULATE mode, the program moves repeatedly 
//   through the file list, creating output files with times set to now. 
//   This is useful for simulating an operational radar.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     SIMULATE
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input volume scan files.
// This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, 
//   the file paths are specified on the command line.
// Type: string
//

input_dir = "$(HOME)/data/time_series/save";

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 360;

//======================================================================
//
// IQ DATA SCALING.
//
//======================================================================
 
///////////// iq_data_scale ///////////////////////////
//
// Scale constant for I and Q data. Applied if apply_scale == TRUE.
// Value written = Value_in * scale + offset.
// Type: double
//

iq_data_scale = 3e-05;

///////////// iq_data_offset ////////////////////////////
//
// Offset for I and Q data. Applied if apply_scale == TRUE.
// Value written = Value_in * scale + offset.
// Type: double
//

iq_data_offset = 0;

//======================================================================
//
// MODIFYING THE OUTPUT DATA.
//
//======================================================================
 
///////////// remove_negative_range_gates /////////////
//
// Option to remove gates with negative range.
// CHILL sometimes starts sampling early so that the burst pulse can be 
//   sampled. If so range_offset_m will be set to indicate how early the 
//   sampling started. If this parameter is set to TRUE, the gates which 
//   have negative range will be removed and the start range will be 
//   adjusted accordingly.
// Type: boolean
//

remove_negative_range_gates = TRUE;

//======================================================================
//
// OUTPUT FMQ DETAILS.
//
//======================================================================
 
///////////// output_fmq_path /////////////////////////
//
// Path to output FMQ.
// The FMQ consists of 2 files, ??.buf and ??.stat.
// Type: string
//

output_fmq_path = "$(DATA_DIR)/fmq/chill_ts";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer.
// Type: int
//

output_fmq_size = 1000000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in the output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: int
//

output_fmq_nslots = 100;

///////////// output_fmq_blocking /////////////////////
//
// Option to set up the FMQ as blocking.
// If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ 
//   becomes full, Test2Dsr will then block until there is space for more 
//   data. This should only be used if there is a single client reading 
//   the FMQ.
// Type: boolean
//

output_fmq_blocking = TRUE;

//======================================================================
//
// OUTPUT MESSAGE DETAILS.
//
// The output messages are written to the FMQ. To improve performance, 
//   each message contains a number of time series pulses.
//
//======================================================================
 
///////////// n_pulses_per_message ////////////////////
//
// Number of pulses per output message.
// The actual number will sometimes be 1 less than this, because an info 
//   data part may will be written once in a while.
// Type: int
//

n_pulses_per_message = 200;

///////////// n_pulses_per_info ///////////////////////
//
// How often to write an info part.
// The info part includes data which does not change on a pulse-to-pulse 
//   basis.
// Type: int
//

n_pulses_per_info = 1000;

///////////// data_mapper_report_interval /////////////
//
// Number of seconds between reports to DataMapper.
// If > 0, the program will register with the DataMapper when the output 
//   FMQ is written to. If <= 0, registration will not be performed.
// Type: int
//

data_mapper_report_interval = 5;

//======================================================================
//
// SIMULATION MODE.
//
//======================================================================
 
///////////// sim_mode_prt_usecs //////////////////////
//
// Simulated PRT (micro-secs).
// Type: double
//

sim_mode_prt_usecs = 1000;

///////////// sim_mode_radar_name /////////////////////
//
// Radar name for simulation mode.
// Type: string
//

sim_mode_radar_name = "CHILL";

///////////// sim_mode_site_name //////////////////////
//
// Site name for simulation mode.
// Type: string
//

sim_mode_site_name = "Greeley";

///////////// sim_mode_latitude_deg ///////////////////
//
// Radar latitude (deg).
// See override_radar_location.
// Type: double
//

sim_mode_latitude_deg = 40.4464;

///////////// sim_mode_longitude_deg //////////////////
//
// Radar longitude (deg).
// See override_radar_location.
// Type: double
//

sim_mode_longitude_deg = -104.637;

///////////// sim_mode_altitude_meters ////////////////
//
// Radar altitude (meters).
// See override_radar_location.
// Type: double
//

sim_mode_altitude_meters = 1432;

