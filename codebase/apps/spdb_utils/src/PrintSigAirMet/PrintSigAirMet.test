/**********************************************************************
 * TDRP params for PrintSigAirMet
 **********************************************************************/

//======================================================================
//
// Application: PrintSigAirMet.
//
// PrintSigAirMet reads SigAirMet data from Spdb, reformats it and 
//   prints it to stdout. Optionally it follows a click point in CIDD 
//   shared memory and prints out the Sigmet or Airmet closest to that 
//   point.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

//======================================================================
//
// TIME AND LOCATION FOR RETRIEVAL.
//
//======================================================================
 
///////////// valid_time //////////////////////////////
//
// Valid time.
// Used if follow_cidd is false.
//
// Type: struct
//   typedef struct {
//      int year;
//      int month;
//      int day;
//      int hour;
//      int min;
//      int sec;
//   }
//
//

valid_time = {
    year = 2001,
    month = 1,
    day = 1,
    hour = 1,
    min = 1,
    sec = 1
};

///////////// closest_point ///////////////////////////
//
// Closest point location.
// Get data closest to this point. This is the default. See bounding_box 
//   alternative below.
//
// Type: struct
//   typedef struct {
//      double lat;
//      double lon;
//   }
//
//

closest_point = {
    lat = 0,
    lon = 0
};

///////////// apply_bounding_box //////////////////////
//
// Apply a bounding box to the data.
// If set, only consider sigmets with centroids within the bounding box. 
//   Default is closest point.
// Type: boolean
//

apply_bounding_box = FALSE;

///////////// bounding_box ////////////////////////////
//
// Bounding box limits.
// See 'apply_bounding_box'. Longitude values should be between -180 and 
//   +180.
//
// Type: struct
//   typedef struct {
//      double min_lon;
//      double max_lon;
//      double min_lat;
//      double max_lat;
//   }
//
//

bounding_box = {
    min_lon = -180,
    max_lon = 180,
    min_lat = -90,
    max_lat = 90
};

//======================================================================
//
// FOLLOW CIDD MODE.
//
//======================================================================
 
///////////// follow_cidd /////////////////////////////
//
// Follow CIDD.
// In this mode the application will watch the CIDD shared memory 
//   interface and print out the sigmets closest to the click point and 
//   time.
// Type: boolean
//

follow_cidd = FALSE;

///////////// use_cidd_time ///////////////////////////
//
// Use times from Cidd to retrieve data.
// If false uses current time.
// Type: boolean
//

use_cidd_time = TRUE;

///////////// mouse_button ////////////////////////////
//
// mouse button recognized.
// 0 = any, 1 = left, 2 = middle, 3 = right.
// Type: int
//

mouse_button = 0;

///////////// sleep_msecs /////////////////////////////
//
// sleep milli-seconds.
// Number of milli-seconds to sleep between checks for mouse clicks.
// Minimum val: 500
// Type: int
//

sleep_msecs = 1000;

///////////// auto_click_interval /////////////////////
//
// Automatic click interval - secs.
// Number of seconds between automatic clicks.  If the user hasn't 
//   clicked anywhere after this number of seconds, we will simulate a 
//   user click in the same place as before and will update the 
//   information.  If <= 0, no automatic updates of the display are done.
// Type: int
//

auto_click_interval = 60;

///////////// startup_location ////////////////////////
//
// startup click location.
// Lat/lon position of METAR station to display if the user hasn't 
//   clicked on a location.
//
// Type: struct
//   typedef struct {
//      double lat;
//      double lon;
//   }
//
//

startup_location = {
    lat = 0,
    lon = 0
};

///////////// coord_shmem_key /////////////////////////
//
// Shared memory status key.
// Id for the shared memory status segment used for communicating with 
//   the display.
// Type: int
//

coord_shmem_key = 42500;

///////////// no_wait_for_shmem ///////////////////////
//
// Flag to not wait for display shared memory.
// If set, this program will not wait for shared memory segment from the 
//   display to be set ready.
// Type: boolean
//

no_wait_for_shmem = FALSE;

//======================================================================
//
// DATA RETRIEVAL.
//
//======================================================================
 
///////////// input_url ///////////////////////////////
//
// URL for reading SPDB data.
// See DIDSS documentation for URL specs.
// Type: string
//

input_url = "spdb/sigmet";

///////////// log_spdb_errors /////////////////////////
//
// Option to log spdb get errors to log directory.
// If true, SPDB errors will be logged to the directory specified by 
//   errors_log_dir. The reason for dealing with errors in this way is 
//   that stdout from this program is displayed as the main product. It is 
//   difficult to separate stderr from stdout and pipe stderr to a logging 
//   filter. Therefore we log the spdb errors directly.
// Type: boolean
//

log_spdb_errors = FALSE;

///////////// errors_log_dir //////////////////////////
//
// Errors log directory.
// See log_spdb_errors.
// Type: string
//

errors_log_dir = "$(ERRORS_LOG_DIR)";

//======================================================================
//
// PRINTING AND DISPLAY OUTPUT.
//
//======================================================================
 
///////////// no_data_message /////////////////////////
//
// Message to print if no data are returned.
// Message is printed followed by a new line if no data are found.
// Type: string
//

no_data_message = "No data found.";

///////////// nmax_items_print ////////////////////////
//
// Max number of items to print in a single request.
// Ignored if negative.
// Type: int
//

nmax_items_print = -1;

///////////// wrap_long_lines /////////////////////////
//
// Option to wrap long text lines.
// If true, lines will be wrapped at word boundaries to fit on a line of 
//   max_line_length.
// Type: boolean
//

wrap_long_lines = TRUE;

///////////// max_line_length /////////////////////////
//
// Maximum number of characters on a line.
// Used for delimiter lines and wrapping of long text lines.
// Type: int
//

max_line_length = 78;

///////////// newline_between_items ///////////////////
//
// Option to print a new-line between items.
// If true, a new line is printed between each item.
// Type: boolean
//

newline_between_items = TRUE;

///////////// delimiter_line_after_each_item //////////
//
// Option to print a delimiter line after individual reports.
// If true, a line of '-' dashes will be printed below each report. The 
//   length of the delimiter line is max_line_length.
// Type: boolean
//

delimiter_line_after_each_item = FALSE;

///////////// reverse /////////////////////////////////
//
// Option to print items in reverse order.
// Type: boolean
//

reverse = FALSE;

///////////// delimiter_line_between_groups ///////////
//
// Option to print a delimiter line between groups of reports.
// If true, a line of '=' dashes will be printed above each group of 
//   items printed. The length of the delimiter line is max_line_length.
// Type: boolean
//

delimiter_line_between_groups = FALSE;

///////////// nlines_scroll_before_printing ///////////
//
// Number of lines to scroll off the top before starting to print.
// This is sometimes useful to clear the output window of previous 
//   output.
// Type: int
//

nlines_scroll_before_printing = 0;

///////////// print_banner ////////////////////////////
//
// Print banner with valid time requested. Only valid with run_once.
// If true, prints a banner with the valid time requested before any 
//   stations.
// Type: boolean
//

print_banner = TRUE;

///////////// print_source_id /////////////////////////
//
// Print interpreted Source and ID.
// Interpreted source and ID.
// Type: boolean
//

print_source_id = TRUE;

///////////// print_start_time ////////////////////////
//
// Print SIG/AIRMET start time.
// Interpreted start time.
// Type: boolean
//

print_start_time = TRUE;

///////////// print_end_time //////////////////////////
//
// Print expire time.
// Interpreted expire time.
// Type: boolean
//

print_end_time = TRUE;

///////////// print_weather_type //////////////////////
//
// Print weather type.
// Interpreted Weather type.
// Type: boolean
//

print_weather_type = TRUE;

///////////// print_flight_levels /////////////////////
//
// Print flight levels.
// Interpreted flight levels.
// Type: boolean
//

print_flight_levels = TRUE;

///////////// print_fir ///////////////////////////////
//
// Print FIR name (if known).
// Interpreted FIR name.
// Type: boolean
//

print_fir = TRUE;

///////////// print_if_polygon_is_fir /////////////////
//
// Print whether polyon is FIR boundary, not SIG/AIRMET boundary. This 
//   occurs when cannot decode SIG/AIRMET polygon but can decode 
//   SIG/AIRMET FIR.
// Polygon is FIR boundary.
// Type: boolean
//

print_if_polygon_is_fir = TRUE;

///////////// print_movement //////////////////////////
//
// Print movement speed and direction.
// Interpreted movement speed and direction.
// Type: boolean
//

print_movement = FALSE;

