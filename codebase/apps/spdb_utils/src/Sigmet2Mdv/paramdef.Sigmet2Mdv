/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.Sigmet2Mdv
 *
 * This file contains the TDRP parameter definitions for
 * Sigmet2Mdv
 */

commentdef
{
  p_header = "Sigmet2Mdv";
  p_text = "This program reads SIGMETs from an SPDB database, grids them "
           "and writes them to an MDV file.";
};


/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_default = false;
} debug;

paramdef boolean
{
  p_descr = "verbose debug flag";
  p_default = false;
} verbose;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef enum
{
  LATEST_DATA,
  TIME_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "\tIn LATEST_DATA mode, the program will process new files as they "
           "appear in the input_url.\n"
           "\tIn TIME_LIST mode, the program will process all of the files "
           "valid at times between the start and end time specified on the "
           "command line.\n";
  p_default = "LATEST_DATA";
} trigger_mode;

paramdef string
{
  p_descr = "URL for the SIGMET SPDB database.";
  p_default = "spdbp:://localhost::spdb/sigmets";
} input_url;

paramdef long
{
  p_descr = "Maximum valid time for input data in seconds";
  p_default = 3600;
} max_valid_secs;

paramdef string
{
  p_descr = "URL for the output MDV files.";
  p_default = "mdvp:://localhost::mdv/sigmets";
} output_url;


/***********************************************************************
 * Algorithm parameters
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
  p_text = "Parameters controlling the algorithm.";
};

typedef enum
{
  PROJ_LATLON,
  PROJ_FLAT
} proj_type_t;

typedef struct
{
  proj_type_t proj_type;
  long nx;
  long ny;
  double minx;
  double miny;
  double dx;
  double dy;
  double origin_lat;
  double origin_lon;
  double rotation;
} output_proj_t;

paramdef struct output_proj_t
{
  p_descr = "Projection to use for the output grid.";
  p_default = { PROJ_LATLON, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
} output_proj;
