////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Tdwr2Dsr
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: Tdwr2Dsr");
    tt->comment_text = tdrpStrDup("Tdwr2Dsr reads TDWR data from a udp socket and writes the data to a DsRadarQueue beam by beam.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL AND DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DEBUGGING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters helpful in debugging problems with the process.");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("PROCESS REGISTRATION PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters for registering process information.");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OPERATIONAL PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("PROCESS I/O PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters describing the input and output locations.");
    tt++;
    
    // Parameter 'playback'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("playback");
    tt->descr = tdrpStrDup("If set to true, data is read from the tape device defined by tape_drive parameter.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &playback - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'tape_drive'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("tape_drive");
    tt->descr = tdrpStrDup("Tape device for data input.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &tape_drive - &_start_;
    tt->single_val.s = tdrpStrDup("/dev/nrst0");
    tt++;
    
    // Parameter 'port'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Udp port for beam data packets");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.l = 10000;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL for DsRadarQueue fmq.");
    tt->help = tdrpStrDup("The URL is of the form 'fmqp:://host::dir/name'. If the output is to the local host you can use just 'dir/name'.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmq/Tdwr2Dsr");
    tt++;
    
    // Parameter 'write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_blocking");
    tt->descr = tdrpStrDup("Option to block on write when the radar queue fills up.");
    tt->help = tdrpStrDup("If false, the program writes data to the output queue without regard to whether the reader is keeping up. This mode should usually be used in realtime, to avoid holding things up if a client becomes slow. If true, the program will not overwrite data in the queue which has not been read by the reader. This is recommended for ARCHIVE and FILELIST mode. In this mode there should be only one reader. If you need to service more than one reader, use Fmq2Fmq in write blocking mode with multiple output urls to multiplex the queue.");
    tt->val_offset = (char *) &write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compression'
    // ctype is '_compression_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_compression");
    tt->descr = tdrpStrDup("Output compression options.");
    tt->help = tdrpStrDup("The data may be optionally compressed for output. BZIP is generally the slowest but most compact. ZLIB uses the gzip compression algorithm, which is faster than BZIP, and for some data more compact as well. LZO is faster than BZIP and ZLIB, but not as compact. RLE is simple run-length encoding compression, which is the fastest and least compact.");
    tt->val_offset = (char *) &output_compression - &_start_;
    tt->enum_def.name = tdrpStrDup("compression_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("NO_COMPRESSION");
      tt->enum_def.fields[0].val = NO_COMPRESSION;
      tt->enum_def.fields[1].name = tdrpStrDup("RLE_COMPRESSION");
      tt->enum_def.fields[1].val = RLE_COMPRESSION;
      tt->enum_def.fields[2].name = tdrpStrDup("LZO_COMPRESSION");
      tt->enum_def.fields[2].val = LZO_COMPRESSION;
      tt->enum_def.fields[3].name = tdrpStrDup("ZLIB_COMPRESSION");
      tt->enum_def.fields[3].val = ZLIB_COMPRESSION;
      tt->enum_def.fields[4].name = tdrpStrDup("BZIP_COMPRESSION");
      tt->enum_def.fields[4].val = BZIP_COMPRESSION;
    tt->single_val.e = ZLIB_COMPRESSION;
    tt++;
    
    // Parameter 'output_n_slots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_n_slots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_n_slots - &_start_;
    tt->single_val.i = 10000;
    tt++;
    
    // Parameter 'output_buf_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_buf_size");
    tt->descr = tdrpStrDup("Size of buffer in output FMQ.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_buf_size - &_start_;
    tt->single_val.i = 200000000;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TDWR DATA FLAGS");
    tt->comment_text = tdrpStrDup("Clutter, point target / thresholding and dealias algorithm failure flags.");
    tt++;
    
    // Parameter 'caf'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("caf");
    tt->descr = tdrpStrDup("Compressed dealias algorithm failure flag.");
    tt->help = tdrpStrDup("If true and flag is set, the program will set dealiased velocity values to zero.");
    tt->val_offset = (char *) &caf - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ctf'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ctf");
    tt->descr = tdrpStrDup("Point target flag.");
    tt->help = tdrpStrDup("If true and flag is set, the program will set width, both velocities and dbz to zero.");
    tt->val_offset = (char *) &ctf - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ccv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ccv");
    tt->descr = tdrpStrDup("Compressed conditioned valid flag removes clutter and implements thresholding on velocity and SNR.");
    tt->help = tdrpStrDup("If true and flag is set, the program will set width and both velocities to zero.");
    tt->val_offset = (char *) &ccv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cv");
    tt->descr = tdrpStrDup("Compressed valid flag removes for low prf scand.");
    tt->help = tdrpStrDup("If true and flag is set, the program will set dbz and snr to zero.");
    tt->val_offset = (char *) &cv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cvf'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cvf");
    tt->descr = tdrpStrDup("Compressed valid flag removes clutter.");
    tt->help = tdrpStrDup("If true and flag is set, the program will set all parameters except SNR to zero.");
    tt->val_offset = (char *) &cvf - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("TDWR RADAR OUTPUT ADJUSTMENT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'eliminate_low_prf'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("eliminate_low_prf");
    tt->descr = tdrpStrDup("Eliminate the low prf scan from output volume.");
    tt->help = tdrpStrDup("If true the low prf scan is removed from the message queue.  Note that the tilt numbers, part of the TDWR header, will be missing the low prf scan number.  Current stratagies contain the first volume scan as low prf, when set to true thevolume starts at scan number 2.");
    tt->val_offset = (char *) &eliminate_low_prf - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'add_missing_low_prf_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_missing_low_prf_fields");
    tt->descr = tdrpStrDup("Add missing low prf fields and set to zero.");
    tt->help = tdrpStrDup("If true the program will add velocity and width fields to the output queue and set the values to zero.");
    tt->val_offset = (char *) &add_missing_low_prf_fields - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'adjust_low_prf_spacing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjust_low_prf_spacing");
    tt->descr = tdrpStrDup("TDWR outputs two gate spacings, make the spacing the same.");
    tt->help = tdrpStrDup("If true the program will change the low prf gate spacing from 300 meter to 150.  Values will be repeated for the higher resolution.");
    tt->val_offset = (char *) &adjust_low_prf_spacing - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'true_north_adj'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("true_north_adj");
    tt->descr = tdrpStrDup("Modify azimuth values to reflect true north.");
    tt->help = tdrpStrDup("TDWR data is oriented to magnetic north.  This adjustment modifies the output azimuths to true north.");
    tt->val_offset = (char *) &true_north_adj - &_start_;
    tt->single_val.f = 11.1;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("TDWR RADAR PARAMETERS");
    tt->comment_text = tdrpStrDup("Output header values, not available from the TDWR header.");
    tt++;
    
    // Parameter 'site_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_name");
    tt->descr = tdrpStrDup("Site name.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_name - &_start_;
    tt->single_val.s = tdrpStrDup("DENVER");
    tt++;
    
    // Parameter 'radar_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radar_name");
    tt->descr = tdrpStrDup("Radar name.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_name - &_start_;
    tt->single_val.s = tdrpStrDup("TDWR");
    tt++;
    
    // Parameter 'normal_prf_num_fields'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("normal_prf_num_fields");
    tt->descr = tdrpStrDup("Number of normal prf input fields.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &normal_prf_num_fields - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'low_prf_num_fields'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("low_prf_num_fields");
    tt->descr = tdrpStrDup("Number of low prf input fields.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &low_prf_num_fields - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'radar_id'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("radar_id");
    tt->descr = tdrpStrDup("Radar identifer / unique number.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_id - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'radar_constant'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("radar_constant");
    tt->descr = tdrpStrDup("Radar Constant in db. Estimate");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_constant - &_start_;
    tt->single_val.f = 65;
    tt++;
    
    // Parameter 'latitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("latitude");
    tt->descr = tdrpStrDup("Radar latitude deg.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &latitude - &_start_;
    tt->single_val.f = 39.7275;
    tt++;
    
    // Parameter 'longitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("longitude");
    tt->descr = tdrpStrDup("Radar longitude deg.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &longitude - &_start_;
    tt->single_val.f = -104.526;
    tt++;
    
    // Parameter 'altitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("altitude");
    tt->descr = tdrpStrDup("Radar altitude km.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &altitude - &_start_;
    tt->single_val.f = 1.71;
    tt++;
    
    // Parameter 'range_to_first_gate'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("range_to_first_gate");
    tt->descr = tdrpStrDup("Radar range to first gate in km.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &range_to_first_gate - &_start_;
    tt->single_val.f = 0.45;
    tt++;
    
    // Parameter 'beam_width'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("beam_width");
    tt->descr = tdrpStrDup("Radar antenna beam width in degrees. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &beam_width - &_start_;
    tt->single_val.f = 0.55;
    tt++;
    
    // Parameter 'pulse_width'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("pulse_width");
    tt->descr = tdrpStrDup("Radar pulse width width in microsecs. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &pulse_width - &_start_;
    tt->single_val.f = 1.1;
    tt++;
    
    // Parameter 'freq_mhz'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("freq_mhz");
    tt->descr = tdrpStrDup("Radar transmitter frequency in mhz. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &freq_mhz - &_start_;
    tt->single_val.f = 5600;
    tt++;
    
    // Parameter 'power_trans'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("power_trans");
    tt->descr = tdrpStrDup("Radar Peak transmitted power in watts. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &power_trans - &_start_;
    tt->single_val.f = 0.25;
    tt++;
    
    // Parameter 'receiver_mds'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("receiver_mds");
    tt->descr = tdrpStrDup("In dBm. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &receiver_mds - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'receiver_gain'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("receiver_gain");
    tt->descr = tdrpStrDup("In db. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &receiver_gain - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'antenna_gain'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("antenna_gain");
    tt->descr = tdrpStrDup("In db. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &antenna_gain - &_start_;
    tt->single_val.f = 50;
    tt++;
    
    // Parameter 'system_gain'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("system_gain");
    tt->descr = tdrpStrDup("In db. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &system_gain - &_start_;
    tt->single_val.f = 45;
    tt++;
    
    // Parameter 'unambig_vel'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("unambig_vel");
    tt->descr = tdrpStrDup("In m/s. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &unambig_vel - &_start_;
    tt->single_val.f = 80;
    tt++;
    
    // Parameter 'unambig_rng'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("unambig_rng");
    tt->descr = tdrpStrDup("In km. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &unambig_rng - &_start_;
    tt->single_val.f = 460;
    tt++;
    
    // Parameter 'low_prf_spacing'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("low_prf_spacing");
    tt->descr = tdrpStrDup("In km. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &low_prf_spacing - &_start_;
    tt->single_val.f = 0.3;
    tt++;
    
    // Parameter 'normal_prf_spacing'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("normal_prf_spacing");
    tt->descr = tdrpStrDup("In km. ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &normal_prf_spacing - &_start_;
    tt->single_val.f = 0.15;
    tt++;
    
    // Parameter 'vel_bias'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("vel_bias");
    tt->descr = tdrpStrDup("Velocity bias (x 100) for converting 16 bit velocities to 8");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vel_bias - &_start_;
    tt->single_val.i = -4000;
    tt++;
    
    // Parameter 'vel_scale'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("vel_scale");
    tt->descr = tdrpStrDup("Velocity scale (x 100) for converting 16 bit velocities to 8");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vel_scale - &_start_;
    tt->single_val.i = 31;
    tt++;
    
    // Parameter 'min_dbz'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("min_dbz");
    tt->descr = tdrpStrDup("Minimum dbz value. If dbz value is less than this, then all fields are set to missing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_dbz - &_start_;
    tt->single_val.f = -1000;
    tt++;
    
    // Parameter 'msDelayPostBeam'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("msDelayPostBeam");
    tt->descr = tdrpStrDup("Milliseconds to delay after sending a beam.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &msDelayPostBeam - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
