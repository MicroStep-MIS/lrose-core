////////////////////////////////////////////////////////
// parameter definitions for edge2dsr
///////////////////////////////////////////////////////

commentdef
{
  p_header = "edge2dsr PARAMETER FILE";
}

commentdef
{
  p_header = "PROGRAM MODES OF OPERATION";
}

paramdef boolean
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed";
  p_default = FALSE;
} debug;

paramdef boolean
{
  p_descr = "Info messaging option";
  p_help = "If set to true, info messages will be printed";
  p_default = TRUE;
} info;

paramdef string
{
  p_descr = "Instance";
  p_help = "Used for process registration";
  p_default = "Test";
} instance;

commentdef
{
  p_header = "INPUT";
}

typedef enum
{
  TCPIP,
  UDP,
  FMQ,
  TAPE
} input_type_t;

paramdef enum input_type_t
{
  p_descr = "Input type";
  p_help = "Specifies where the EDGE data is coming from:\n"
           "\tTCPIP - The EDGE data is coming over a TCP/IP port. "
           "For TCP/IP input, the tcpip_host and port parameters must be set. "
           "The EDGE system uses port number 6605 for TCP/IP connections.\n"
           "\tUDP - The EDGE data is coming over a UDP port. "
           "For UDP input, the port parameter must be specified. "
           "The EDGE system uses port number 6544 for UDP connections.\n"
           "\tFMQ - The EDGE data is being read from an FMQ. "
           "For FMQ input, the input_fmq_url parameter must be set.\n"
           "\tTAPE - The EDGE data is being read from a tape. "
           "For tape input, the input_tape_name and input_tape_wait parameters "
           "must be set.\n"
           "FMQ and tape input are used for testing or for reprocessing old "
           "datasets.";
  p_default = UDP;
} input_type;

paramdef string
{
  p_descr = "Hostname of EDGE host used for TCP/IP packets";
  p_default = "edge";
} tcpip_host;

paramdef long
{
  p_descr = "UDP or TCP/IP port for beam data packets";
  p_help = "Use port number 6544 for retrieving UDP data from the EDGE "
           "system; use port number 6605 for retrieving TCP/IP data "
           "from the EDGE system.";
  p_default = 6544;
} port;

paramdef string
{
  p_descr = "URL for fmq communication";
  p_default = "fmqp:://localhost::./fmq.eec";
} input_fmq_url;

paramdef string
{
  p_descr = "Tape device name for input";
  p_default = "/dev/nrst0";
} input_tape_name;

paramdef long
{
  p_descr = "Tape input read delay (millisecs).";
  p_help = "Wait between beam reads, to allow the user to simulate "
           "varying data rates.";
  p_default = 30;
} input_tape_wait;

commentdef
{
  p_header = "RADAR INFORMATION";
}

paramdef int
{
  p_descr = "Number of gates to write out";
  p_help = "If the number of gates read in is less than the number of "
           "gates to write out, the beams will be padded with zeros.  "
           "If the number of gates read in is greater than the number of "
           "gates to write out, the beams will be truncated ";
  p_default = 136;
} n_gates_out;

paramdef double
{
  p_descr = "Gate spacing in km";
  p_default = 0.125;
} gate_spacing;

paramdef long
{
  p_descr = "Radar ID.";
  p_help = "Project specified ID for the radar";
  p_default = 0;
} radar_id;

paramdef string
{
  p_descr = "Radar name.";
  p_default = "ENTERPRISE";
} radar_name;

paramdef string
{
  p_descr = "Site name.";
  p_default = "RTTC";
} site_name;

paramdef boolean
{
  p_descr = "Override latitude, longitude and altitude in header";
  p_default = TRUE;
} override_latlon;

typedef struct
{
  double latitude;
  double longitude;
  double altitude;
} radar_location_t;

paramdef struct radar_location_t
{
  p_descr = "Radar location";
  p_help = "Used if override_radar_location is TRUE. "
           "Lat and lon in degrees. "
           "Alt in km";
} radar_location;

paramdef long
{
  p_descr = "Radar polarization code.";
  p_help = "1 = hor, 2 = ver, 3 = circ, 4 = ellip. "
           "Should be 3; 1 for Jing compatibility.";
  p_default = 3;
} polarization_code;

paramdef double
{
  p_desr = "Radar constant";
  p_default = 58.8;
} radar_constant;

paramdef double
{
  p_descr = "Beam width";
  p_help = "Radar half-power beam width (deg)";
  p_min = 0.01;
  p_max = 45.0;
  p_default = 0.95;
} beam_width;

paramdef double
{
  p_descr = "Wavelength";
  p_help = "Radar wavelength (cm)";
  p_min = 0.01;
  p_max = 1000.0;
  p_default = 10.0;
} wavelength;

paramdef double
{
  p_descr = "Peak transmitter power (kW)";
  p_help = "For output_format";
  p_default = 1000.0;
} peak_xmit_pwr;

paramdef double
{
  p_descr = "Receiver MDS (dBM)";
  p_help = "Receiver minimum detectable signal (dMD)";
  p_default = -113.0;
} receiver_mds;

paramdef double
{
  p_descr = "Gain of the receiver (dB)";
  p_default = 0.0;
} receiver_gain;

paramdef double
{
  p_descr = "Gain of the antenna (dB)";
  p_default = 45.0;
} antenna_gain;

paramdef double
{
  p_descr = "Gain of the system (dB)";
  p_default = 0.0;
} system_gain;

typedef struct
{
  double scale;
  double bias;
} scaling_info_t;

paramdef struct scaling_info_t
{
  p_descr = "Scale and bias for reflectivity data";
  p_default = {0.5, -32.0};
} dbz_scaling_info;

paramdef struct scaling_info_t
{
  p_descr = "Scale and bias for velocity data";
  p_default = {0.5, -63.5};
} vel_scaling_info;

paramdef struct scaling_info_t
{
  p_descr = "Scale and bias for spectrum width data";
  p_default = {0.5, -63.5};
} sw_scaling_info;

paramdef double
{
  p_descr = "Scan strategy";
  p_default = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 };
} scan_strategy[];

paramdef double
{
  p_descr = "Maximum allowable difference in target elevation from "
            "scan strategy";
  p_help = "This is used to prevent data from coming through that is "
           "not associated witht the scan strategy we are expecting";
  p_default = 0.5;
} max_diff_from_scan;

paramdef double
{
  p_descr = "If the target elevation differs from the actual elevation "
            "by more than this value, the max_diff_from_scan will be "
            "ignored ";
  p_help = "If the actual elevation differs too much from the target "
           "elevation, the antenna is probably moving to the next "
           "elevation angle.  We want to allow these beams to come "
           "through";
  p_default = 0.5;
} max_diff_from_target;

paramdef string
{
  p_descr = "Scan type name";
  p_default = "Default";
} scan_type_name;

typedef enum
{
  TRIGGER_BY_ANGLE_DROP,
  TRIGGER_BY_END_TILT,
  TRIGGER_BY_START_TILT
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Type of end-of-volume trigger.";
  p_help = "Determines when and end-of-volume will be triggered in the data. "
           "\tTRIGGER_BY_ANGLE_DROP: An end-of-volume will be triggered "
           "when a beam is received whose elevation angle is less than the "
           "the maximum elevation received for that volume so far by an "
           "amount greater than or "
           "equal to the amount specified in the end_of_volume_trigger "
           "parameter.\n"
           "\tTRIGGER_BY_END_TILT: An end-of-volume will be triggered when "
           "a beam is received whose elevation angle is not equal to the "
           "end_of_volume_trigger angle after receiving one or more beams "
           "whose elevation is equal to this angle.  "
           "Note that all elevations are mapped to the nearest scan strategy "
           "elevation before any comparisons are done.\n"
           "\tTRIGGER_BY_START_TILT: An end-of-volume will be triggered "
           "when a beam is received whose elevation angle is equal to the "
           "end_of_volume_trigger angle after receiving one or more beams "
           "whose elevation is not equal to this angle.  "
           "Note that all elevations are mapped to the nearest scan strategy "
           "elevation before any comparisons are done.";
  p_default = TRIGGER_BY_ANGLE_DROP;
} trigger_mode;

paramdef double
{
  p_descr = "Elevation angle used to trigger an end-of-volume.";
  p_help = "See the comment for the trigger_mode parameter to see how "
           "this is used.";
  p_default = 10.0;
} end_of_volume_trigger;

paramdef double
{
  p_descr = "When elevation angle drops by this much from the previous beam, "
            "the current beam will not be written";
  p_help = "This is used to prevent data from coming through as the antenna "
           "drops down for a new volume";
  p_default = 0.5;
} max_elev_diff;

paramdef boolean
{
  p_descr = "Flag indicating whether to use local system time for the "
            "EDGE data rather than using the time received with EDGE msgs.";
  p_help = "If true, the beams will be timestamped with the current "
           "system time. "
           "If false, the beams will be timestamped with the time received "
           "in the EDGE message.\n"
           "This option was added because we were having trouble keeping "
           "the system time on the EDGE box correct.";
  p_default = false;
} use_local_system_time;

commentdef
{
  p_header = "OUTPUT";
}

paramdef string
{
  p_descr = "Output URL for DsRadar data via FMQ";
  p_default = "fmqp:://localhost::./fmq.dsRadar";
} output_fmq_url;

paramdef long
{
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. "
           "Some of this buffer will be used for control bytes "
           "(12 bytes per message).";
  p_default = 2000000;
} output_fmq_size;

paramdef long
{
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of "
           "messages which may be written to the buffer before "
           "overwrites occur. "
           "However, overwrites may occur sooner if the size is not "
           "set large enough.";
  p_default = 3600;
} output_fmq_nslots;

paramdef boolean
{
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
  p_default = FALSE;
} output_fmq_compress;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set up the FMQ as blocking.";
  p_help = "If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, edge2dsr will then block until there is space for more data.";
} write_blocking;

commentdef
{
  p_header = "ARCHIVE";
}

paramdef boolean
{
  p_descr = "Use archive fmq";
  p_default = FALSE;
} archive_fmq;

paramdef string
{
  p_descr = "Archive URL for raw Enterprise data via FMQ";
  p_default = "fmqp:://localhost::./fmq.eecArchive";
} archive_fmq_url;

paramdef long
{
  p_descr = "Size of archive FMQ, in bytes.";
  p_help = "This is the total size of the archive FMQ buffer. "
           "Some of this buffer will be used for control bytes "
           "(12 bytes per message).";
  p_default = 2000000;
} archive_fmq_size;

paramdef long
{
  p_descr = "Number of slots in archive FMQ.";
  p_help = "The number of slots corresponds to the maximum number of "
           "messages which may be written to the buffer before "
           "overwrites occur. "
           "However, overwrites may occur sooner if the size is not "
           "set large enough.";
  p_default = 3600;
} archive_fmq_nslots;

paramdef boolean
{
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
  p_default = FALSE;
} archive_fmq_compress;

paramdef boolean
{
  p_descr = "If TRUE, an archive file will be created.";
  p_default = FALSE;
} archive_file;

paramdef string
{
  p_descr = "Archive file path";
  p_help = "If set to empty string, no archive file will be created";
  p_default = "";
} archive_file_path;

commentdef
{
  p_header = "DIAGNOSTICS";
}

paramdef boolean
{
  p_descr = "Print summary";
  p_help = "If TRUE, summary information will be printed";
  p_default = FALSE;
} print_summary;

paramdef long
{
  p_descr = "Print summary interval";
  p_default = 360;
} summary_interval;



