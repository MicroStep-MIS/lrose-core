/*********************************************************
 * parameter definitions for Fmq2Fmq
 *
 * Mike Dixon, RAP, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * November 1999
 */

commentdef {
  p_header = "Fmq2Fmq program";
  p_text = "Fmq2Fmq reads an input FMQ and copies the contents unchanged to an output FMQ. It is useful for reading data from a remote queue and copying it to a local queue. The clients can then read the local queue rather than all access the remote queue.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "fmq_input";
  p_descr = "URL for input FMQ.";
} input_url;

paramdef int {
  p_default = 1000;
  p_descr = "Number of millisecs to sleep while polling the input.";
  p_help = "The reads are done in a polling-blocking mode. This is the number of millisecs to sleep between polls.";
} msecs_sleep_blocking;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef string {
  p_default = {"fmq_output"};
  p_descr = "URLs for output FMQ.";
} output_urls[];

paramdef int {
  p_default = 5;
  p_descr = "Number of seconds between reports to DataMapper.";
  p_help = "If > 0, the program will register with the DataMapper when the output FMQs are written to. If <= 0, registration will not be performed.";
} data_mapper_report_interval;

typedef enum {
  NO_COMPRESSION, RLE_COMPRESSION, LZO_COMPRESSION, ZLIB_COMPRESSION, BZIP_COMPRESSION
} compression_t;
  
paramdef enum compression_t {
  p_default = ZLIB_COMPRESSION;
  p_descr = "Output compression options.";
  p_help = "The data may be optionally compressed for output. BZIP is generally the slowest but most compact. ZLIB uses the gzip compression algorithm, which is faster than BZIP, and for some data more compact as well. LZO is faster than BZIP and ZLIB, but not as compact. RLE is simple run-length encoding compression, which is the fastest and least compact.";
} output_compression;

paramdef int {
  p_default = 1000;
  p_descr = "Number of slots in output FMQ.";
} output_n_slots;

paramdef int {
  p_default = 10000;
  p_descr = "Size of buffer in output FMQ.";
} output_buf_size;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option for blocking write on output.";
  p_help = "If set, the output fmqs will activate blocking on write. This means that if any of the output readers gets behind the entire program will block untils that reader catches up. So be careful using this mode.";
} write_blocking;

paramdef int {
  p_default = 100;
  p_descr = "Max size of the write cache.";
  p_help = "We read data until no more is available, caching it before performing a write. This is the max number of messages in the write cache. If it fills, it will be written before any further reads are performed.";
} max_cache_size;

