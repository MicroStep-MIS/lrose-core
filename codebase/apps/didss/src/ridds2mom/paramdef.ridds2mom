/*********************************************************
 * parameter definitions for nex2mom
 *
 * Mike Dixon, RAP, NCXAR, Boulder, CO, USA, 80307-3000
 *
 * May 1997
 */

paramdef enum debug
{
  p_options = {DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE};
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately. Use DEBUG_VERBOSE for all debug messages.";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance.";
  p_help = "This is used by procmap utilities for registering the process with procmap.";
} instance;

paramdef int {
  p_default = 0;
  p_min = 0;
  p_max = 3;
  p_descr = "Malloc debug level";
  p_help = "0 - none, 1 - corruption checking, 2 - records all malloc blocks and checks, 3 - printout of all mallocs etc.";
} malloc_debug_level;

paramdef enum input_stream_format {
  p_options = {NEXRAD_FORMAT, CONSTANT_FORMAT};
  p_default = NEXRAD_FORMAT;
  p_descr = "Input data stream format.";
  p_help = "Input data stream may be expected in Nexrad format (alternating ref/vel at the lower tilts), or constant format (both ref & vel at every tilt).";
} input_stream_format;

paramdef enum input_device {
  p_options = {IN_TAPE, IN_UDP, IN_SHMEM};
  p_default = IN_UDP;
  p_descr = "Input device type.";
  p_help = "For IN_TAPE, set input_tape_name, input_tape wait and short_tape. For IN_UDP, set input_udp_port. For IN_SHMEM, set input_shmem_key. IN_SHMEM is not supported yet.";
} input_device;

paramdef string {
  p_default = "/dev/nrst0";
  p_descr = "Tape device name for input. Applicable if input_device is IN_TAPE.";
} input_tape_name;

paramdef int {
  p_default = 30;
  p_descr = "Tape input read delay (millisecs).";
  p_help = "Wait between beam reads, to allow the user to simulate varying data rates. Applicable if input_device is IN_TAPE.";
} input_tape_wait;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Short tape option.";
  p_help = "Set to TRUE if reading a standard NCDC Nexrad Level 2 archive tape.  Set to FALSE if reading a RAP generated Level 2 archive tape.  Applicable if input_device is IN_TAPE.";
} short_tape;

paramdef int {
  p_default = 3280;
  p_descr = "Input udp port number. Applicable if input_device is IN_UDP.";
} input_udp_port;

paramdef int {
  p_default = 2750400;
  p_descr = "Shared memory key for input queue. Applicable if input_device is IN_SHMEM.";
} input_shmem_key;

paramdef enum output_format {
  p_options = {LL_FORMAT, DS_FORMAT, RIDDS_FORMAT};
  p_default = LL_FORMAT;
  p_descr = "Output format type.";
  p_help = "Output may be in Lincoln format (LL_FORMAT), DsRadar format (DS_FORMAT) or unchanged from input (RIDDS_FORMAT).";
} output_format;

paramdef enum output_device {
  p_options = {OUT_UDP, OUT_SHMEM, OUT_FMQ};
  p_default = OUT_UDP;
  p_descr = "Primary output device type.";
  p_help = "There must be at least 1 output device, and you use this parameter to set that primary device. If, for example, you set output_device to OUT_FMQ, this has the effect of overriding write_fmq_output and setting it to TRUE. In addition to the primary output device, your can enable secondary outputs by setting any of write_fmq_output, write_udp_output or write_shmem_output to TRUE. For OUT_UDP, set output_udp_port and output_udp_address. For OUT_SHMEM, set output_shmem_key. For OUT_FMQ, set output_fmq_url, output_fmq_size, output_fmq_nslots and output_fmq_compress.";
} output_device;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output FMQ in addition to chosen output_device.";
  p_help = "If set to TRUE, FMQ is output in addition to the strean chosen by output_device.";
} write_fmq_output;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output UDP in addition to chosen output_device.";
  p_help = "If set to TRUE, UDP is output in addition to the strean chosen by output_device.";
} write_udp_output;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output SHMEM in addition to chosen output_device.";
  p_help = "If set to TRUE, SHMEM is output in addition to the strean chosen by output_device.";
} write_shmem_output;

paramdef int {
  p_default = 54321;
  p_descr = "Output udp port number.";
} output_udp_port;

paramdef string {
  p_default = "128.117.199.255";
  p_descr = "Broadcast address for UDP output.";
  p_help = "You can use 'ifconfig -a' (as root) to check which network connections you have.";
} output_udp_address;

paramdef int {
  p_default = 3750400;
  p_descr = "Shared memory key for output queue.";
} output_shmem_key;

paramdef string {
  p_descr = "Output URL for DsRadar data via FMQ";
  p_default = "fmqp:://localhost::./fmq.dsRadar";
} output_fmq_url;

paramdef int {
  p_default = 2000000;
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message.";
} output_fmq_size;

paramdef int {
  p_default = 3600;
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = FALSE;
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} output_fmq_compress;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to output DBZ (reflectivity) field for DS_FORMAT output.";
  p_help = "Only applicable it output_format = DS_FORMAT.";
} output_ds_dbz;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to output VEL (radial velocity) field for DS_FORMAT output.";
  p_help = "Only applicable it output_format = DS_FORMAT.";
} output_ds_vel;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to output SPW (spectral width) field for DS_FORMAT output.";
  p_help = "Only applicable it output_format = DS_FORMAT.";
} output_ds_spw;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to output SNR (signal to noise) field for DS_FORMAT output.";
  p_help = "Only applicable it output_format = DS_FORMAT.";
} output_ds_snr;

paramdef string {
  p_default = "nexrad_vcp.conf";
  p_descr = "Path of volume coverage file.";
  p_help = "This file contains the NEXRAD scan strategies. It is used to compute the tilt numbers.";
} vol_coverage_path;

paramdef int {
  p_default = 0;
  p_descr = "Radar ID.";
  p_help = "Project specified ID for the radar - for DS_FORMAT only.";
} radar_id;

paramdef string {
  p_default = "NEXRAD";
  p_descr = "Radar name.";
} radar_name;

paramdef string {
  p_default = "KFTG-DEN";
  p_descr = "Site name.";
} site_name;

paramdef struct ZR {
  p_descr = "Radar location";
  p_help = "The NEXRAD data stream does not include radar position. Use this parameter to set the Lat and lon in degrees, alt in km.";
  p_field_type = {double, double, double};
  p_field_name = {latitude, longitude, altitude};
} radar_location;

paramdef int {
  p_default = 0;
  p_descr = "Time correction (secs).";
  p_help = "Data time is adjusted by this number of seconds before output.";
} time_correction;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Wallclock time override option.";
  p_help = "If set, wallclock time will be used to override data time.";
} use_wallclock_time;

paramdef int {
  p_default = 64;
  p_min = 1;
  p_descr = "Samples per beam";
  p_help = "Number of pulses used to compute data from a beam";
} samples_per_beam;

paramdef int {
  p_default = 3;
  p_descr = "Radar polarization code.";
  p_help = "1 = hor, 2 = ver, 3 = circ, 4 = ellip. Should be 3; 1 for Jing compatibility.";
} polarization_code;

paramdef double {
  p_default = 0.95;
  p_min = 0.01;
  p_max = 45.0;
  p_descr = "Beam width";
  p_help = "Radar half-power beam width (deg)";
} beam_width;

paramdef double {
  p_default = 10.0;
  p_min = 0.01;
  p_max = 1000.0;
  p_descr = "Wavelength";
  p_help = "Radar wavelength (cm)";
} wavelength;

paramdef double {
  p_default = 7.0;
  p_descr = "Average transmitter power (kW)";
  p_help = "For output_format = LL_FORMAT only.";
} avg_xmit_pwr;

paramdef double {
  p_default = 1000.0;
  p_descr = "Peak transmitter power (kW)";
  p_help = "For output_format = DS_FORMAT only.";
} peak_xmit_pwr;

paramdef double {
  p_default = -113.0;
  p_descr = "Receiver MDS (dBM)";
  p_help = "Receiver minimum detectable signal (dMD) - for DS_FORMAT only.";
} receiver_mds;

paramdef double {
  p_default = -14.0;
  p_descr = "Receiver noise in dBZ.";
  p_help = "Receiver noise in units of dBZ at a range of 100km.";
} noise_dbz_at_100km;

paramdef double {
  p_default = 0.0;
  p_descr = "Gain of the receiver (dB) - for DS_FORMAT only";
} receiver_gain;

paramdef double {
  p_default = 45.0;
  p_descr = "Gain of the antenna (dB) - for DS_FORMAT only";
} antenna_gain;

paramdef double {
  p_default = 0.0;
  p_descr = "Gain of the system (dB) - for DS_FORMAT only";
} system_gain;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Print summary option.";
  p_help = "If TRUE summaries are printed at given interval.";
} print_summary;

paramdef int {
  p_default = 90;
  p_descr = "Interval for summary printouts.";
  p_help = "See print_summary.";
} summary_interval;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Print header option.";
  p_help = "If TRUE headers are printed at given interval.";
} print_header;

paramdef int {
  p_default = 360;
  p_descr = "Interval for header printouts.";
  p_help = "See print_header.";
} header_interval;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to write an FMQ for archive purposes.";
  p_help = "The archive FMQ is written in native RIDDS format. A separate program reads this FMQ and archives the data to tape.";
} write_archive_fmq;

paramdef string {
  p_descr = "Archive URL for DsRadar data via FMQ";
  p_default = {"fmqp:://localhost::./fmq.nexrad"};
} archive_fmq_url;

paramdef int {
  p_default = 2000000;
  p_descr = "Size of archive FMQ, in bytes.";
  p_help = "This is the total size of the archive FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message.";
} archive_fmq_size;

paramdef int {
  p_default = 3600;
  p_descr = "Number of slots in archive FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} archive_fmq_nslots;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Archive FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} archive_fmq_compress;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Compute max and min byte value per beam.";
  p_help = "If TRUE, max and min byte value will be computed for each beam.  Values will be printed with summary.";
} print_max_min_byte; 

