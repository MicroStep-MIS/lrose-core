/*********************************************************
 * parameter definitions for Tcp2Fmq
 *
 * Mike Dixon, RAP, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * August 1999
 */

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef int {
  p_default = 0;
  p_min = 0;
  p_max = 3;
  p_descr = "Malloc debug level";
  p_help = "0 - none, 1 - corruption checking, 2 - records all malloc blocks and checks, 3 - printout of all mallocs etc.";
} malloc_debug_level;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "localhost";
  p_descr = "Host name for input TCP data.";
  p_help = "The program reads the UDP data from this host.";
} input_tcp_host;

paramdef int {
  p_default = 10000;
  p_descr = "Port number of input TCP data.";
  p_help = "The program reads the UDP data from this port.";
} input_tcp_port;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef string {
  p_default = "fmqp:://localhost::fmq/test";
  p_descr = "URL for FMQ output.";
  p_help = "The output data is written to the FMQ at this URL.";
} output_fmq_url;

paramdef int {
  p_default = 4000;
  p_descr = "Number of slots in output FMQ.";
  p_help = "The FMQ wraps around when the slots have been filled.";
} output_fmq_nslots;

paramdef int {
  p_default = 10000000;
  p_descr = "Size of message queue in bytes.";
  p_help = "The FMQ wraps around when the buffer has been filled.";
} output_fmq_size;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to compress data in FMQ.";
} output_fmq_compressed;



