///////////////////////////////////////////////////////
//  parameter definitions for Dsr2Rsl
//
////////////////////////////////////////////////////////

commentdef {
  p_header = "Dsr2Rsl program";
  p_text = "Dsr2Rsl reads input radar data from fmq, dealiases the
data, and writes it to an fmq . ";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_descr = "Input URL for DsRadar data via FMQ";
  p_default = {"fmqp:://localhost::./fmq.dsRadar"};
} input_fmq_url;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to seek to the end of the input FMQ.";
  p_help = "If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.";
} seek_to_end_of_input;

typedef enum {
  END_OF_VOL_FLAG, LAST_TILT_IN_VOL
} end_of_vol_decision_t;
  
paramdef enum end_of_vol_decision_t {
  p_default = END_OF_VOL_FLAG;
  p_descr = "Decision type for end-of-volume.";
  p_help = "If END_OF_VOL_FLAG, the end-of-volume flag in the data will be used to trigger the end of volume. If LAST_TILT_IN_VOL, the end of the tilt number given by 'last_tilt_in_vol' will be used  to trigger the end-of-volume.";
} end_of_vol_decision;

paramdef int {
  p_descr = "The tilt number used to end the volume.";
  p_help = "Only applies if 'end_of_vol_decision' is set to LAST_TILT_IN_VOL.";
  p_default = 0;
} last_tilt_in_vol;


paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to delete repeated tilts in volume";
  p_help = "If TRUE, the program will use option specified in
parameter. ";
} delete_repeat_tilts;

typedef enum {
  KEEP_RECENT_TILT, KEEP_PREV_TILT
} repeated_tilt_decision_t;

paramdef enum repeated_tilt_decision_t {
  p_default =  KEEP_RECENT_TILT;
  p_descr = "Decision type for deleting sequential tilts with repeated target elevation";
  p_help = "Used if delete_repeat_tilts is true ";
} delete_tilt_decision;

commentdef {
  p_header = "RADAR PARAMETERS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar location.";
  p_help = "If TRUE, the program will use location specified in the 'radar_location' parameter.";
} override_radar_location;

typedef struct {
  double latitude;
  double longitude;
  double altitude;
} radar_location_t;

paramdef struct radar_location_t {
  p_default = { 0.0, 0.0, 0.0 };
  p_descr = "Radar location if override is set true.";
  p_help = "The radar_location is only used if 'override_radar_location' is set true. Otherwise the information in the input data stream is used.";
} radar_location;


commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "";
  p_descr = "URL for output files.";
  p_help = "beams are written to fmq at this URL.";
} output_fmq_url;

paramdef long {
  p_default = {30000000};
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message.";
} output_fmq_size;
 
paramdef long {
  p_default = {7200};
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of
messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = {FALSE};
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} output_fmq_compress;


commentdef {
  p_header = "Dealiasing Parameters ";
}
 
paramdef int {
  p_default = 375;
  p_descr = "Maximum number of rays in a sweep.";
  p_help = "Used by FourDD to allocate memory for RSL structs.";
} max_rays;

paramdef int {
  p_default = 1024;
  p_descr = "Maximum number of bins.";
  p_help = "Used by FourDD to allocate memory for RSL structs.";
} max_bins;
	

paramdef  int {
  p_default = 5;
  p_descr = "Unfolding using windowing";
  p_help = "";
} proximity;


paramdef  float {
  p_default = .25;
  p_descr = "The threshold for performing initial dealiasing using a previously unfolded volume.";
  p_help = "";
} comp_thresh;

paramdef  float {
  p_default = .49;
  p_descr = "The threshold for performing initial dealiasing using sounding (or VAD).";
  p_help = "";
} comp_thresh2;

paramdef float {
  p_default = .4;
  p_descr = "The unfolding threshold for unfolding using horizontal continuity/";
  p_help = "";
} thresh;

paramdef  int {
  p_default = 5;
  p_descr = "Number of good values required within unfolding window to unfold the current bin.";
  p_help = "";
} min_good;


paramdef float {
  p_default = .8;
  p_descr = "Fraction of the Nyquist velocity to use as a standard deviation threshold when windowing.";
  p_help = "";
} std_thresh;
	
paramdef float {
  p_default = 0.0;
  p_descr = "All radial velocity bins with dbz values less than low_dbz will be deleted.";
  p_help = "";
} low_dbz;


paramdef float {
  p_default = 80.0;
  p_descr = "All bins with bdz values greater than high_dbz will be deleted.";
  p_help = "";
} high_dbz;

paramdef boolean {
  p_default = false;
  p_descr = "All radial velocity bins with dbz values missing will be deleted";
  p_help = "";
} no_dbz_rm_rv;

paramdef boolean {
  p_default = false;
  p_descr = "If soundvolume is not available, remove cells left over
after first pass";
  p_help = "";
} rm_cells;


paramdef boolean {
  p_default = true;
  p_descr = "Flag specifying the use of a second pass using only the sounding (or VAD).";
  p_help = "";
} pass2 ;

paramdef  int {
  p_default = 0;
  p_descr = "The first del_num_bins velocity bins will be deleted along
each ray(should be between 0 and 5).";
  p_help = "";
} del_num_bins;


paramdef float {
  p_default = 1.0;
  p_descr = "If absolute value of the radial velocity gate is less than this value, it will not be used as a PRELIM gate.";
  p_help = "";
} ck_val ;

paramdef  int {
  p_default = 1;
  p_descr = "Sign convention: if SIGN=-1, negative radial velocity is towards the radar, if SIGN=1 positive value towards radar.";
  p_help = "";
} sign;

paramdef  int {
  p_default = 10;
  p_descr = "Maximum number of folds.";
  p_help = "";
} max_count;

paramdef float {
  p_default = .05;
  p_descr = "Maximum vertical shear allowed in input sounding";
  p_help = "";
} max_shear ;

paramdef boolean {
  p_default = false;
  p_descr = "prep volume before unfolding. Thresholding flag";
  p_help = "";
} prep ;

paramdef boolean {
  p_default = false;
  p_descr = "Use Bergen and Albers filter";
  p_help = "";
} filt ;

paramdef float{
  p_default = 131072.0;
  p_descr = "Missing vel";
  p_help = "";
} missing_vel ;

commentdef {
  p_header = "SOUNDING URL";
};

paramdef string {
  p_descr = "URL for sounding data.";
  p_default = {"spdbp:://localhost::./spdb"};
} sounding_url;

paramdef float {

  p_descr = "Time (in minutes) to search back for a sounding. "
            "Default is 1/2 hour; max is 24 hours.";
  p_help = "This value is overridden by DsSpdbServer when using "
           "a hybrid sounding database with search criteria.";
  p_min = 0;
  p_max = 1440;
  p_default = 30;

} sounding_look_back;


paramdef float {
  p_descr = "Minimum altitude (in km) used from the sounding to calculate average
wind";
  p_min = 0.0;
  p_max = 10.0;
  p_default = 0.0 ;
} wind_alt_min;

paramdef float {
  p_descr = "Maximum altitude (in km) used from the sounding to
calculate average wind";
  p_min =  0.0 ;
  p_max =  10.0 ;
  p_default =  5.0 ;
} wind_alt_max;   

paramdef float {
  p_descr = "Horizontal component of wind dir/speed (in m/s)";
  p_help = "Used only when no sounding wind data are available.";
  p_min = -1000.0;
  p_max = 1000.0;
  p_default = 0.0;
} avg_wind_u;

paramdef float {
  p_descr = "Vertical component of wind dir/speed (in m/s)";
  p_help = "Used only when no sounding wind data are available.";
  p_min = -1000.0;
  p_max = 1000.0;
  p_default = 0.0;
} avg_wind_v;

