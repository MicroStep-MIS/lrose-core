///////////////////////////////////////////////////////
//  parameter definitions for Dsr2Sweep
//
//  Nancy Rehak, RAP, NCAR
//  P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
//  April 2006
////////////////////////////////////////////////////////

commentdef
{
  p_header = "Dsr2Sweep program";
  p_text = "Dsr2Sweep reads an input FMQ containing radar data, and writes "
           "it to a file in Sweep format. "
           "Currently, DORADE and netCDF sweep file formats are "
           "supported.";
}

commentdef
{
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = DEBUG_OFF;
} debug;

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;

commentdef
{
  p_header = "DATA INPUT";
}

paramdef string
{
  p_descr = "Input URL for DsRadar data via FMQ";
  p_default = "fmqp:://localhost::fmq/dsRadar";
} input_fmq_url;

paramdef boolean
{
  p_descr = "Option to seek to the end of the input FMQ.";
  p_help = "If TRUE, the program will seek to the end of the fmq and "
           "only read in new data. "
           "If FALSE, it will start reading from the beginning of the FMQ.";
  p_default = TRUE;
} seek_to_end_of_input;

typedef enum
{
  SWEEP_NUM_EOS_DETECT,
  SCAN_STRATEGY_EOS_DETECT
} end_of_sweep_detection_t;

paramdef enum end_of_sweep_detection_t
{
  p_descr = "Method used for detecting end-of-sweep";
  p_help = "\tSWEEP_NUM_EOS_DETECT - An end-of-sweep is detected if the "
           "sweep number in the DsRadar queue changes. "
           "This can only be used if the sweep number value is set "
           "correctly by the radar software.\n"
           "\tSCAN_STRATEGY_EOS_DETECT - End-of-sweep is determined based on "
           "the scan strategy specified in the scan_strategy parameter.\n";
  p_default = SWEEP_NUM_EOS_DETECT;
} end_of_sweep_detection;

paramdef double
{
  p_descr = "List of expected elevation angles for the radar data.";
  p_help = "Used only if end_of_sweep_detection is set to "
           "SCAN_STRATEGY_EOS_DETECT.\n"
           "Note that there must be more than one elevation angle for "
           "this to work.\n";
  p_default = { 0.5, 1.5, 2.5, 3.5, 6, 8, 10, 15 };
} scan_strategy[];

paramdef double
{
  p_descr = "Allowable error in the elevation angle when matching it to a "
            "target elevation in the scan strategy.";
  p_help = "Used only if end_of_sweep_detection is set to "
           "SCAN_STRATEGY_EOS_DETECT.\n";
  p_default = 0.3;
} scan_strategy_epsilon;

paramdef long
{
  p_descr = "Minimum number of beams allowed in a sweep";
  p_min = 0;
  p_default = 0;
} min_beams_in_sweep;

paramdef boolean
{
  p_descr = "Option to only write sweeps with selected range of elevation angles.";
  p_help = "If TRUE, only sweeps with elevation angles between min_elevation and max_elevation will be written.";
  p_default = FALSE;
} constrain_elevation;

paramdef double
{
  p_descr = "Min elevation angle (deg).";
  p_help = "See 'contrain_elevation' parameter.";
  p_default = 0.0;
} min_elevation;

paramdef double
{
  p_descr = "Max elevation angle (deg).";
  p_help = "See 'contrain_elevation' parameter.";
  p_default = 90.0;
} max_elevation;

commentdef {
  p_header = "CHECK FOR MOVING ANTENNA";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to check that the antenna is moving.";
  p_help = "If true, beams will only be stored if the antenna is moving. If the antenna stops, beams will be ignored.";
} check_antenna_moving;

paramdef double {
  p_default = 0.05;
  p_descr = "Minimun angle change beam-to-beam (deg).";
  p_help = "For the antenna to be considered moving. the antenna much move by this amount from one beam to the next. The angle check is made in both azimuth and elevation.";
} min_angle_change;

commentdef {
  p_header = "TEST PULSE";
}

paramdef boolean {
  p_default = false;
  p_descr = "is there a test pulse in the data?";
  p_help = "Normally the test pulse would appear towards the maximum range.";
} test_pulse_present;

paramdef double {
  p_default = -9999;
  p_descr = "Test pulse power (dBm).";
} test_pulse_power;

paramdef double {
  p_default = -9999;
  p_descr = "Test pulse start range (km).";
} test_pulse_start_range;

paramdef double {
  p_default = -9999;
  p_descr = "Test pulse end range (km).";
} test_pulse_end_range;

paramdef boolean
{
  p_descr = "Option to remove the test pulse data.";
  p_help = "If true, the test pulse data will be removed from the end of the "
           "beam. "
           "The test pulse data generally lies in the last few gates in "
           "the beam. "
           "If true, the number of gates will be reduced by "
           "'ngates_test_pulse'.";
  p_default = false;
} remove_test_pulse;

paramdef int
{
  p_descr = "Number of gates to remove to get rid of test pulse.";
  p_help = "See 'remove_test_pulse'.";
  p_default = 20;
} ngates_test_pulse;

commentdef
{
  p_header = "OUTPUT FILES";
}

paramdef string
{
  p_descr = "Output directory";
  p_default = "data/nc_sweep";
} output_dir;

typedef enum
{
  DORADE_OUTPUT,
  NC_RADAR_OUTPUT
} output_format_t;

paramdef enum output_format_t
{
  p_descr = "Type of output files to create";
  p_default = NC_RADAR_OUTPUT;
} output_format;

paramdef boolean
{
  p_descr = "Option to write to a directory named after the date.";
  p_help = "If FALSE, files will be written to output_dir/."
    "If TRUE, files will be written to output_dir/yyyymmdd/.";
  p_default = FALSE;
} write_to_dated_dir;

paramdef boolean
{
  p_descr = "Option to write latest data info file to output dir.";
  p_help = "If TRUE, latest_data_info files will be written after the file itself.";
  p_default = FALSE;
} write_latest_data_info_file;

paramdef int
{
  p_descr = "Max number of beams in a file";
  p_help = "Set to -1 to impose no maximum";
  p_default = 1024;
} max_nbeams_in_file;

paramdef boolean
{
  p_descr = "Option to use the fixed (target) angle in file name.";
  p_help = "If TRUE, the fixed angle in the center of the sweep will be used to name the file. If FALSE, the mean of the angles in the sweep will be used to name the file.";
  p_default = TRUE;
} use_fixed_angle_for_filename;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter data when the transition flag is set.";
  p_help = "If TRUE, the program will filter out beams which are computed when the antenna is moving from one tilt to the next, or one volume to the next.";
} filter_antenna_transitions;

commentdef
{
  p_header = "RADAR PARAMETERS";
}

paramdef string
{
  p_descr = "Name of project";
  p_default = "REFRACTT";
} project_name;

paramdef string
{
  p_descr = "Name of instrument platform";
  p_help = "This is normally the radar name, and is used in the sweep file name.";
  p_default = "SPOL";
} platform_name;

paramdef string
{
  p_descr = "Name of producer";
  p_default = "NCAR RAL";
} producer_name;

paramdef boolean
{
  p_descr = "Flag indicating whether to use the target elevation";
  p_default = false;
} use_target_elev;

paramdef boolean
{
  p_descr = "Option to override radar location.";
  p_help = "If TRUE, the program will use location specified in the "
           "'radar_location' parameter.";
  p_default = FALSE;
} override_radar_location;

typedef struct
{
  double latitude;
  double longitude;
  double altitude;
} radar_location_t;

paramdef struct radar_location_t
{
  p_descr = "Radar location if override is set true.";
  p_help = "The radar_location is only used if 'override_radar_location' "
           "is set true. "
           "Otherwise the information in the input data stream is used. "
           "Note that the altitude is in kilometers, not meters.";
  p_default = { 0.0, 0.0, 0.0 };
} radar_location;

paramdef boolean
{
  p_descr = "Option to override radar beam width.";
  p_help = "If TRUE, the program will use beam width specified in the "
           "'beam_width' parameter.";
  p_default = FALSE;
} override_beam_width;

paramdef double
{
  p_descr = "Radar beam width if override is set true.";
  p_help = "The beam width is only used if 'override_beam_width' is set true. "
           "Otherwise the information in the input data stream is used.";
  p_default = 1.0;
} beam_width;

paramdef boolean
{
  p_descr = "Option to set the calibrated power as the measured power.";
  p_help = "If TRUE, the measured power will be stored as calibrated power.";
  p_default = FALSE;
} set_calib_power_to_measured_power;

commentdef
{
  p_header = "OUTPUT FIELDS";
}

typedef enum
{
  UNITS_NONE,
  UNITS_REFL,
  UNITS_POWER,
  UNITS_VEL
} field_units_t;

typedef enum
{
  ENCODING_SI16,
  ENCODING_FL32
} field_encoding_t;

typedef struct
{
  string dsr_name;
  string output_name;
  field_units_t output_units;
  field_encoding_t output_encoding;
  double output_scale;
  double output_bias;
} output_field_t;

paramdef struct output_field_t
{
  p_descr = "Array of output fields.";
  p_help = "The program will only output these fields\n"
           "\tdsr_name - the field name in the dsr data.\n"
	   "\toutput_name - the field name in the output file. "
           "If the output_name is an empty string, the output name will "
           "be set to the dsr_name.\n"
	   "\toutput_units - The units to use in the output file. "
	   "This has to be an enumerated list because that's all that's "
           "allowed by the library that creates the output file.\n"
	   "\toutput_encoding - The encoding to use in the output file.\n"
	   "\t  SI16: signed 16-bit integer, with scale and bias\n"
	   "\t        si16 = (float - bias) / scale\n"
	   "\t  FL32: 32-bit floating point\n"
	   "\toutput_scale - the scaling to be used for ENCODING_SI16\n"
	   "\t    set scale to -9999 to use the scaling from the input data\n"
	   "\toutput_bias - the bias to be used for ENCODING_SI16\n"
	   "\t    bias should normally be set to 0.0\n"
           "\n";
  p_default = {
    {"DBZ", "DBZ", UNITS_REFL, ENCODING_FL32, -9999, 0.0 },
    {"VEL", "VEL", UNITS_VEL,  ENCODING_FL32, -9999, 0.0 }
  };
} output_fields[];

paramdef boolean
{
  p_descr = "Option to override nyquist velocity in incoming data.";
  p_help = "If true, the nyquist_velocity parameter is used to specify "
           "the nyquist. "
           "If false, the nyquist is computed from the incoming radar "
           "data stream. "
           "The nyquist is used for velocity interpolation, to ensure that "
           "folded values are treated correctlty.";
  p_default = false;
} override_nyquist;

paramdef double
{
  p_descr = "Specify nyquist velocity (m/s).";
  p_help = "See 'override_nyquist'.";
  p_default = 25.0;
} nyquist_velocity;

paramdef boolean
{
  p_descr = "Option to use scale of 100, bias of 0.";
  p_help = "If TRUE, the program will scale output parameters" 
           "with scale of 100, bias of 0 - needed for S-Pol legacy. "
	   " Rain and Particle ID derived products "
           "If FALSE, it will use 'standard' product scaling.";
  p_default = false;
} scale_by_100_bias_0;
