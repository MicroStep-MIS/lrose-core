/**********************************************************************
 * TDRP params for Test2Dsr
 **********************************************************************/

///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

///////////// output_fmq_path /////////////////////////
//
// output fmq path.
// Path for FMQ output data.
// Type: string
//

output_fmq_path = "/tmp/fmq/dsRadar";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer. Some of this buffer 
//   will be used for control bytes (12 bytes per message.
// Type: int
//

output_fmq_size = 25000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: int
//

output_fmq_nslots = 7200;

///////////// output_fmq_compress /////////////////////
//
// FMQ compression option.
// If TRUE FMQ messages are compressed.
// Type: boolean
//

output_fmq_compress = FALSE;

///////////// output_vel_field ////////////////////////
//
// Option to output veloocity field.
// If FALSE, only dBZ is output. If TRUE, velocity is also output.
// Type: boolean
//

output_vel_field = TRUE;

///////////// output_geom_fields //////////////////////
//
// Option to output geometry fields.
// If TRUE, elevation, azimuth and range fields are also output.
// Type: boolean
//

output_geom_fields = TRUE;

///////////// radar_params ////////////////////////////
//
// radar parameters.
// Default radar parameters.
//
// Type: struct
//   typedef struct {
//      int radar_id;
//      double altitude;
//      double latitude;
//      double longitude;
//      int num_gates;
//      double gate_spacing;
//      double start_range;
//      double beam_width;
//      int samples_per_beam;
//      double pulse_width;
//      double prf;
//      double wavelength;
//      double radar_constant;
//      double xmit_peak_pwr;
//      double receiver_mds;
//      double receiver_gain;
//      double antenna_gain;
//      double system_gain;
//      double unambig_velocity;
//      double unambig_range;
//   }
//
//

radar_params = {
    radar_id = 0,
    altitude = 1.7,
    latitude = 39.8782,
    longitude = -104.759,
    num_gates = 920,
    gate_spacing = 0.25,
    start_range = 0.125,
    beam_width = 0.95,
    samples_per_beam = 64,
    pulse_width = 4000,
    prf = 1100,
    wavelength = 10,
    radar_constant = 63,
    xmit_peak_pwr = 1e+06,
    receiver_mds = 113,
    receiver_gain = 1,
    antenna_gain = 1,
    system_gain = 1,
    unambig_velocity = 25,
    unambig_range = 230
};

///////////// use_scan_table //////////////////////////
//
// Use scan table.
// If set, use scan azimuth table. If not, construct table from 
//   elevation angles, start azimuth and delta azimuth.
// Type: boolean
//

use_scan_table = FALSE;

///////////// scan_table_path /////////////////////////
//
// scan table path.
// Type: string
//

scan_table_path = "./tass_scan_table";

///////////// scan_strategy_name //////////////////////
//
// Name of scan strategy.
// Type: string
//

scan_strategy_name = "Test scan type 1";

///////////// scan_strategy_id ////////////////////////
//
// ID of scan strategy.
// Type: int
//

scan_strategy_id = 1;

///////////// noise_dbz_at_100km //////////////////////
//
// Noise dBZ level at 100 km range.
// Used to compute noise reflectivity at all ranges.
// Type: double
//

noise_dbz_at_100km = -9;

///////////// elev_angles /////////////////////////////
//
// Elevation angle list.
// If use_scan_table is false, these elevation angles are used to 
//   construct the scan table.
// Type: double
// 1D array - variable length.
//

elev_angles = {
 0.5,
 1.5,
 2.4,
 3.4,
 4.3,
 5.3,
 6.2,
 7.5,
 8.7,
 10.0,
 12.0,
 14.0,
 16.7,
 19.5
};

///////////// nazimuths ///////////////////////////////
//
// Number of aziimuths.
// If use_scan_table is false, this is used to construct the scan table.
// Type: int
//

nazimuths = 360;

///////////// start_azimuth ///////////////////////////
//
// Start azimuth angle.
// If use_scan_table is false, this is used to construct the scan table.
// Type: double
//

start_azimuth = 0;

///////////// delta_azimuth ///////////////////////////
//
// Delta azimuth angle.
// If use_scan_table is false, this is used to construct the scan table.
// Type: double
//

delta_azimuth = 1;

///////////// radar_sample_file_path //////////////////
//
// Radar sample file path.
// Path for file from which radar data are sampled.
// Type: string
//

radar_sample_file_path = "testData/19950623/235716.mdv";

///////////// sample_dbz_field ////////////////////////
//
// Sample dbz field num.
// Type: int
//

sample_dbz_field = 0;

///////////// sample_vel_field ////////////////////////
//
// Sample vel field num.
// Type: int
//

sample_vel_field = 1;

///////////// range_scale /////////////////////////////
//
// Sampling range scale factor.
// The range is multiplied by this factor before searching for the data 
//   in the simulation file.
// Type: double
//

range_scale = 0.5;

///////////// override_vel ////////////////////////////
//
// Override velocity with origin movement.
// If TRUE, the velocity field will be set using the motion of the 
//   sampling origin.
// Type: boolean
//

override_vel = FALSE;

///////////// sampling_origin /////////////////////////
//
// Radar data sampling origin.
// Origin from which the dobson radar data are sampled.
//
// Type: struct
//   typedef struct {
//      double start_x;
//      double start_y;
//      double speed;
//      double dirn;
//      double max_dist;
//   }
//
//

sampling_origin = {
    start_x = 0,
    start_y = 0,
    speed = 0,
    dirn = 0,
    max_dist = 400
};

///////////// beam_wait_msecs /////////////////////////
//
// Wait per beam (milli-secs).
// Type: int
//

beam_wait_msecs = 1;

///////////// vol_wait_secs ///////////////////////////
//
// Wait per vol (secs).
// Type: int
//

vol_wait_secs = 1;

///////////// write_blocking //////////////////////////
//
// Option to set up the FMQ as blocking.
// If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ 
//   becomes full, Test2Dsr will then block until there is space for more 
//   data.
// Type: boolean
//

write_blocking = TRUE;

