/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */


commentdef {
  p_header = "Read nssl netcdf QPE files, convert to MDV\n\n"
  "Niles Oien October 2007";
}

paramdef string {
  p_default = "mdvp:://localhost::./mdv";
  p_descr = "Output MDV url, of form mdvp:://host.domain:[port]:dir/dir ";
  p_help = "Data are written here.";
} output_url;

paramdef string {
  p_default = "./";
  p_descr = "Input directory.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef string {
  p_default = "";
  p_descr = "Input file extension.";
  p_help = "If string is NULL, all extensions are valid.";
} fileExtension;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = REALTIME;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;
  

paramdef long {
  p_descr = "How long the data are valid, seconds.";
  p_help = "Depends on input frequency.";
  p_default = 3600;
} Expiry;
 
paramdef string {
  p_descr = "Names of the input fields we want.";
  p_help = "Can be ascertained with ncdump -h";
  p_default = { "6h_rad_hsr", "12h_rad_hsr", "24h_rad_hsr", "48h_rad_hsr", "72h_rad_hsr" };
} fieldNames[];
 
paramdef boolean {
  p_descr = "Determines if we are remapping the data.";
  p_help = "TRUE== remap data according to params below, FALSE== write data on the grid they came in on.";
  p_default = FALSE;
} remapData;

commentdef {
  p_header = "Everything below here is revelant only if remapData is TRUE";
}
 
typedef enum {
  OUTPUT_PROJ_FLAT, OUTPUT_PROJ_LATLON, OUTPUT_PROJ_LAMBERT
} output_projection_t;

paramdef enum output_projection_t {
  p_default = OUTPUT_PROJ_LATLON;
  p_descr = "Projection of output grid.";
  p_help = "FLAT: (x,y) Cartesian data in km from a given origin, typical of local radar data.\n\nLATLON - lat/lon grid with constant grid spacing (Mercator).\n\nLAMBERT - Lambert Conformal projection.";
} output_projection;

typedef struct {
  double lat;
  double lon;
} output_origin_t;

paramdef struct output_origin_t {
  p_descr = "Origin of output grid.";
  p_help = "Applies to OUTPUT_PROJ_FLAT and OUTPUT_PROJ_LAMBERT.";
  p_default = {40.0, -104.0};
} output_origin;

paramdef double {
  p_descr = "Rotation of output grid.";
  p_help = "Applicable to OUTPUT_PROJ_FLAT.";
  p_default = 0.0;
} output_rotation;

typedef struct {
  double lat_1;
  double lat_2;
} output_std_parallels_t;

paramdef struct output_std_parallels_t {
  p_default = {20.0, 45.0};
  p_descr = "Standard parallels.";
  p_help = "Applicable to OUTPUT_PROJ_LAMBERT only.";
} output_std_parallels;

typedef struct {
  long nx;
  long ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_t;

paramdef struct grid_t {
  p_descr = "Output grid parameters.";
  p_help = "For OUTPUT_PROJ_LATLON, minx, miny, dx and dy are in degrees. Otherwise they are in km.";
  p_default = {
    nx = 360,
    ny = 180,
    minx = -180,
    miny = -90,
    dx = 1.0,
    dy = 1.0
  };
} output_grid;
