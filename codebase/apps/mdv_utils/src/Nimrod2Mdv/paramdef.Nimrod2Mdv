/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions - Nimrod2Mdv
//
// Mike Dixon
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// May 2011
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "Nimrod2Mdv converts UK Met Office NIMROD files to MDV.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "MODE OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
};

paramdef string {
  p_default = "./input";
  p_descr = "Dir for input data files.";
  p_help = "This is used in REALTIME mode only. In ARCHIVE mode, the file paths are specified on the command line.";
} input_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use _latest_data_info file as input trigger.";
  p_help = "REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.";
} use_ldata_info_file;

paramdef int {
  p_default = 360;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

commentdef {
  p_header = "DATA DETAILS";
};

paramdef string {
  p_default = "Precip";
  p_descr = "Name of output field in MDV file.";
} field_name;

paramdef string {
  p_default = "Precipitation rate";
  p_descr = "Long name of output field in MDV file.";
} field_name_long;

paramdef string {
  p_default = "mm/hr";
  p_descr = "Units of output field in MDV file.";
} field_units;

paramdef double {
  p_default = 1.0;
  p_descr = "Scale factor for field data.";
  p_help = "The input data is multiplied by this scale factor, to create the output field.";
} data_scale_factor;

paramdef string {
  p_default = "";
  p_descr = "Data set name.";
  p_help = "This short string is placed in the MDV master header for documentation purposes.";
} data_set_name;

paramdef string {
  p_default = "Converted from NIMROD file using Nimrod2Mdv";
  p_descr = "Data set info.";
  p_help = "This long string is placed in the MDV master header for documentation purposes.";
} data_set_info;

typedef enum {
  VERT_TYPE_UNKNOWN =      0,
  VERT_TYPE_SURFACE =      1,
  VERT_TYPE_SIGMA_P =      2,
  VERT_TYPE_PRESSURE =     3,
  VERT_TYPE_Z =            4,
  VERT_TYPE_SIGMA_Z =      5,
  VERT_TYPE_ETA =          6,
  VERT_TYPE_THETA =        7,
  VERT_TYPE_MIXED =        8,
  VERT_TYPE_ELEV =         9,
  VERT_TYPE_COMPOSITE =   10,
  VERT_SATELLITE_IMAGE =  12,
  VERT_FLIGHT_LEVEL =     15,
  VERT_EARTH_IMAGE =      16
} vlevel_type_t;

paramdef enum vlevel_type_t {
  p_default = VERT_TYPE_SURFACE;
  p_descr = "Vertical level type.";
  p_help =
  "Supported types\n"
  "  VERT_TYPE_UNKNOWN\n"
  "  VERT_TYPE_SURFACE - Earth surface field\n"
  "  VERT_TYPE_SIGMA_P - Sigma pressure levels\n"
  "  VERT_TYPE_PRESSURE - Pressure levels, units = mb\n"
  "  VERT_TYPE_Z - Constant altitude, units = Km MSL\n"
  "  VERT_TYPE_SIGMA_Z - Model sigma Z levels\n"
  "  VERT_TYPE_ETA - Model eta levels\n"
  "  VERT_TYPE_THETA - Isentropic surface, units = Kelvin\n"
  "  VERT_TYPE_MIXED - Any hybrid grid\n"
  "  VERT_TYPE_ELEV - Elevation angles - radar\n"
  "  VERT_TYPE_COMPOSITE - A Composite of a set of planes\n"
  "  VERT_SATELLITE_IMAGE - Satelite Image\n"
  "  VERT_FLIGHT_LEVEL - ICAO flight level (100's of ft)\n"
  "  VERT_EARTH_IMAGE - Image, conformal to the surface of the earth \n";
} vlevel_type;

commentdef {
  p_header = "OUTPUT DETAILS";
};

paramdef string {
  p_descr = "Output URL for MDV data";
  p_default = "mdvp:://localhost::./output";
} output_url;

typedef enum {
  ENCODING_INT8 =      1,
  ENCODING_INT16 =     2,
  ENCODING_FLOAT32 =   5
} encoding_type_t;

paramdef enum encoding_type_t {
  p_default = ENCODING_INT16;
  p_descr = "output encoding type.";
} output_encoding;

typedef enum {
  COMPRESSION_NONE =  0,
  COMPRESSION_ZLIB =  3,
  COMPRESSION_BZIP =  4, 
  COMPRESSION_GZIP =  5
} compression_type_t;

paramdef enum compression_type_t {
  p_default = COMPRESSION_GZIP;
  p_descr = "Set compression type.";
} output_compression;

commentdef {
  p_header = "GRID PROJECTION REMAPPING";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to remap grid in x,y.";
  p_help = "If true, set the remap parameters below.";
} remap_xy;

paramdef boolean {
  p_default = false;
  p_descr = "Option to automatically remap the grid to a lat-lon projection.";
  p_help = "If true, the data in the file will be remapped to a latlon grid which matches the existing grid in resolution and extent. Other remap parameters will be ignored.";
} auto_remap_to_latlon;

typedef enum {
  PROJ_LATLON = 0,
  PROJ_LAMBERT_CONF = 3,
  PROJ_MERCATOR =  4,
  PROJ_POLAR_STEREO = 5,
  PROJ_FLAT = 8,
  PROJ_OBLIQUE_STEREO = 12,
  PROJ_TRANS_MERCATOR = 15,
  PROJ_ALBERS = 16,
  PROJ_LAMBERT_AZIM = 17,
  PROJ_VERT_PERSP = 18
} projection_t;

paramdef enum projection_t {
  p_default = PROJ_FLAT;
  p_descr = "Projection for remapping in x,y. See projection param below.";
  p_help =
  "\tPROJ_LATLON: simple lat/lon grid (Equidistant Cylindrical)\n"
  "\tPROJ_FLAT: Azimuthal Equidistant (Radar)\n"
  "\tPROJ_LAMBERT_CONF: Lambert Conformal Conic\n"
  "\tPROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area\n"
  "\tPROJ_MERCATOR: Mercator - EW orientation\n"
  "\tPROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation\n"
  "\tPROJ_POLAR_STEREO: Stereographic- polar aspect\n"
  "\tPROJ_OBLIQUE_STEREO: Stereographic - oblique aspect\n"
  "\tPROJ_ALBERS: Albers Equal Area Conic\n"
  "\tPROJ_VERT_PERSP: Vertical Perspective (satellite view)\n\n";
} remap_projection;

typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_params_t;

paramdef struct grid_params_t {
  p_default = {1, 1, 0.0, 0.0, 1.0, 1.0};
  p_descr = "Grid parameters for remapping in x,y.";
  p_help = "Units in km, except for LATLON, which is in degrees.";
} remap_grid;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid rotation.";
  p_help = "This applies only to PROJ_FLAT projections.";
} remap_rotation;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin latitude.";
  p_help = "This applies to all projections except LATLON.";
} remap_origin_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin longitude.";
  p_help = "This applies to all projections except LATLON.";
} remap_origin_lon;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid reference latitude 1.";
  p_help = "This applies to LAMBERT_CONF and ALBERS projections.";
} remap_lat1;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid reference latitude 2.";
  p_help = "This applies to LAMBERT_CONF and ALBERS projections.";
} remap_lat2;

paramdef double {
  p_default = 1.0;
  p_descr = "Central scale for remapped projections.";
  p_help = "This applies to POLAR_STEREO, OBLIQUE_STEREO and TRANSVERSE_MERCATOR projections.";
} remap_central_scale;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped tangent latitude (deg).";
  p_help = "This applies to OBLIQUE_STEREO only.";
} remap_tangent_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped tangent longitude (deg).";
  p_help = "This applies to OBLIQUE_STEREO and POLAR_STEREO.";
} remap_tangent_lon;

paramdef boolean {
  p_default = true;
  p_descr = "Flag indicating stereogtraphic is over the NORTH pole.";
  p_help = "This applies to POLAR_STEREO. If false, the projection is over the south pole.";
} remap_pole_is_north;

paramdef double {
  p_default = 35786;
  p_descr = "Radius of perspective point (km).";
  p_help = "This applies to VERT_PERSP.";
} remap_persp_radius;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped false northing correction.";
  p_help = "Occasionally, this is added to the Y coordinate so that all coordinates are positive. Normally 0. As an alternative to false_northing and false_easting, you can set the offset_latitude and offset_longitude";
} remap_false_northing;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped false easting correction.";
  p_help = "Occasionally, this is added to the X coordinate so that all coordinates are positive. Normally 0.";
} remap_false_easting;

paramdef boolean {
  p_default = false;
  p_descr = "Do you want to specify an offset origin using lat/lon instead of false_northing and false_easting?";
  p_help = "If true, set remap_offset_origin_latitude and remap_offset_origin_longitude.";
} remap_set_offset_origin;

paramdef double {
  p_default = 0;
  p_descr = "Latitude of offset origin.";
  p_help = "See remap_set_offset_origin.";
} remap_offset_origin_latitude;

paramdef double {
  p_default = 0;
  p_descr = "Longitude of offset origin.";
  p_help = "See remap_set_offset_origin.";
} remap_offset_origin_longitude;

