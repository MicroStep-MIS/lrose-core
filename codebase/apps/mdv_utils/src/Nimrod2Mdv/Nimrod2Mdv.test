/**********************************************************************
 * TDRP params for Nimrod2Mdv
 **********************************************************************/

//======================================================================
//
// Nimrod2Mdv converts UK Met Office NIMROD files to MDV.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "test";

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the list of file names specified on the 
//   command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input data files.
// This is used in REALTIME mode only. In ARCHIVE mode, the file paths 
//   are specified on the command line.
// Type: string
//

input_dir = "./input";

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 360;

//======================================================================
//
// DATA DETAILS.
//
//======================================================================
 
///////////// field_name //////////////////////////////
//
// Name of output field in MDV file.
// Type: string
//

field_name = "PrecipRate";

///////////// field_name_long /////////////////////////
//
// Long name of output field in MDV file.
// Type: string
//

field_name_long = "Precipitation rate";

///////////// field_units /////////////////////////////
//
// Units of output field in MDV file.
// Type: string
//

field_units = "mm/hr";

///////////// data_scale_factor ///////////////////////
//
// Scale factor for field data.
// The input data is multiplied by this scale factor, to create the 
//   output field.
// Type: double
//

data_scale_factor = 0.03125;

///////////// data_set_name ///////////////////////////
//
// Data set name.
// This short string is placed in the MDV master header for 
//   documentation purposes.
// Type: string
//

data_set_name = "";

///////////// data_set_info ///////////////////////////
//
// Data set info.
// This long string is placed in the MDV master header for documentation 
//   purposes.
// Type: string
//

data_set_info = "Converted from NIMROD file using Nimrod2Mdv";

///////////// vlevel_type /////////////////////////////
//
// Vertical level type.
// Supported types
//   VERT_TYPE_UNKNOWN
//   VERT_TYPE_SURFACE - Earth surface field
//   VERT_TYPE_SIGMA_P - Sigma pressure levels
//   VERT_TYPE_PRESSURE - Pressure levels, units = mb
//   VERT_TYPE_Z - Constant altitude, units = Km MSL
//   VERT_TYPE_SIGMA_Z - Model sigma Z levels
//   VERT_TYPE_ETA - Model eta levels
//   VERT_TYPE_THETA - Isentropic surface, units = Kelvin
//   VERT_TYPE_MIXED - Any hybrid grid
//   VERT_TYPE_ELEV - Elevation angles - radar
//   VERT_TYPE_COMPOSITE - A Composite of a set of planes
//   VERT_SATELLITE_IMAGE - Satelite Image
//   VERT_FLIGHT_LEVEL - ICAO flight level (100's of ft)
//   VERT_EARTH_IMAGE - Image, conformal to the surface of the earth .
//
// Type: enum
// Options:
//     VERT_TYPE_UNKNOWN
//     VERT_TYPE_SURFACE
//     VERT_TYPE_SIGMA_P
//     VERT_TYPE_PRESSURE
//     VERT_TYPE_Z
//     VERT_TYPE_SIGMA_Z
//     VERT_TYPE_ETA
//     VERT_TYPE_THETA
//     VERT_TYPE_MIXED
//     VERT_TYPE_ELEV
//     VERT_TYPE_COMPOSITE
//     VERT_SATELLITE_IMAGE
//     VERT_FLIGHT_LEVEL
//     VERT_EARTH_IMAGE
//

vlevel_type = VERT_TYPE_SURFACE;

//======================================================================
//
// OUTPUT DETAILS.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL for MDV data.
// Type: string
//

output_url = "mdvp:://localhost::mdv/nimrod/precip/sw_eng";

///////////// output_encoding /////////////////////////
//
// output encoding type.
//
// Type: enum
// Options:
//     ENCODING_INT8
//     ENCODING_INT16
//     ENCODING_FLOAT32
//

output_encoding = ENCODING_INT16;

///////////// output_compression //////////////////////
//
// Set compression type.
//
// Type: enum
// Options:
//     COMPRESSION_NONE
//     COMPRESSION_ZLIB
//     COMPRESSION_BZIP
//     COMPRESSION_GZIP
//

output_compression = COMPRESSION_GZIP;

//======================================================================
//
// GRID PROJECTION REMAPPING.
//
//======================================================================
 
///////////// remap_xy ////////////////////////////////
//
// Option to remap grid in x,y.
// If true, set the remap parameters below.
// Type: boolean
//

remap_xy = TRUE;

///////////// auto_remap_to_latlon ////////////////////
//
// Option to automatically remap the grid to a lat-lon projection.
// If true, the data in the file will be remapped to a latlon grid which 
//   matches the existing grid in resolution and extent. Other remap 
//   parameters will be ignored.
// Type: boolean
//

auto_remap_to_latlon = FALSE;

///////////// remap_projection ////////////////////////
//
// Projection for remapping in x,y. See projection param below.
// 	PROJ_LATLON: simple lat/lon grid (Equidistant Cylindrical)
// 	PROJ_FLAT: Azimuthal Equidistant (Radar)
// 	PROJ_LAMBERT_CONF: Lambert Conformal Conic
// 	PROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area
// 	PROJ_MERCATOR: Mercator - EW orientation
// 	PROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation
// 	PROJ_POLAR_STEREO: Stereographic- polar aspect
// 	PROJ_OBLIQUE_STEREO: Stereographic - oblique aspect
// 	PROJ_ALBERS: Albers Equal Area Conic
// 	PROJ_VERT_PERSP: Vertical Perspective (satellite view).
//
// Type: enum
// Options:
//     PROJ_LATLON
//     PROJ_LAMBERT_CONF
//     PROJ_MERCATOR
//     PROJ_POLAR_STEREO
//     PROJ_FLAT
//     PROJ_OBLIQUE_STEREO
//     PROJ_TRANS_MERCATOR
//     PROJ_ALBERS
//     PROJ_LAMBERT_AZIM
//     PROJ_VERT_PERSP
//

remap_projection = PROJ_LATLON;

///////////// remap_grid //////////////////////////////
//
// Grid parameters for remapping in x,y.
// Units in km, except for LATLON, which is in degrees.
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
//

remap_grid = { 800, 800, -5.5, 49.6, 0.008, 0.005 };

///////////// remap_rotation //////////////////////////
//
// Remapped grid rotation.
// This applies only to PROJ_FLAT projections.
// Type: double
//

remap_rotation = 0;

///////////// remap_origin_lat ////////////////////////
//
// Remapped grid origin latitude.
// This applies to all projections except LATLON.
// Type: double
//

remap_origin_lat = 0;

///////////// remap_origin_lon ////////////////////////
//
// Remapped grid origin longitude.
// This applies to all projections except LATLON.
// Type: double
//

remap_origin_lon = 0;

///////////// remap_lat1 //////////////////////////////
//
// Remapped grid reference latitude 1.
// This applies to LAMBERT_CONF and ALBERS projections.
// Type: double
//

remap_lat1 = 0;

///////////// remap_lat2 //////////////////////////////
//
// Remapped grid reference latitude 2.
// This applies to LAMBERT_CONF and ALBERS projections.
// Type: double
//

remap_lat2 = 0;

///////////// remap_central_scale /////////////////////
//
// Central scale for remapped projections.
// This applies to POLAR_STEREO, OBLIQUE_STEREO and TRANSVERSE_MERCATOR 
//   projections.
// Type: double
//

remap_central_scale = 1;

///////////// remap_tangent_lat ///////////////////////
//
// Remapped tangent latitude (deg).
// This applies to OBLIQUE_STEREO only.
// Type: double
//

remap_tangent_lat = 0;

///////////// remap_tangent_lon ///////////////////////
//
// Remapped tangent longitude (deg).
// This applies to OBLIQUE_STEREO and POLAR_STEREO.
// Type: double
//

remap_tangent_lon = 0;

///////////// remap_pole_is_north /////////////////////
//
// Flag indicating stereogtraphic is over the NORTH pole.
// This applies to POLAR_STEREO. If false, the projection is over the 
//   south pole.
// Type: boolean
//

remap_pole_is_north = TRUE;

///////////// remap_persp_radius //////////////////////
//
// Radius of perspective point (km).
// This applies to VERT_PERSP.
// Type: double
//

remap_persp_radius = 35786;

///////////// remap_false_northing ////////////////////
//
// Remapped false northing correction.
// Occasionally, this is added to the Y coordinate so that all 
//   coordinates are positive. Normally 0. As an alternative to 
//   false_northing and false_easting, you can set the offset_latitude and 
//   offset_longitude.
// Type: double
//

remap_false_northing = 0;

///////////// remap_false_easting /////////////////////
//
// Remapped false easting correction.
// Occasionally, this is added to the X coordinate so that all 
//   coordinates are positive. Normally 0.
// Type: double
//

remap_false_easting = 0;

///////////// remap_set_offset_origin /////////////////
//
// Do you want to specify an offset origin using lat/lon instead of 
//   false_northing and false_easting?.
// If true, set remap_offset_origin_latitude and 
//   remap_offset_origin_longitude.
// Type: boolean
//

remap_set_offset_origin = FALSE;

///////////// remap_offset_origin_latitude ////////////
//
// Latitude of offset origin.
// See remap_set_offset_origin.
// Type: double
//

remap_offset_origin_latitude = 0;

///////////// remap_offset_origin_longitude ///////////
//
// Longitude of offset origin.
// See remap_set_offset_origin.
// Type: double
//

remap_offset_origin_longitude = 0;

