/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/******************************************************************
 *
 * Parameter definitions for MdvDist2NonMissing
 *
 */

commentdef {
  p_header = "MdvDist2NonMissing calculates the distance in kilometers to non missind data.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the appropriate level of detail.";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

typedef enum {
  TIME_INTERVAL, FILELIST, REALTIME, REALTIME_FCST_DATA
} mode_t;

paramdef enum mode_t {
  p_default = FILELIST;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program triggers off of a latest data info file. "
           "REALTIME_FCST_DATA triggers off RAL forecast directory structure data. "
           "In FILELIST mode the program processed data between start and end times " 
           "entered on the command line." 
           "In FILELIST mode the file processes files entered on the command line";
} mode;

commentdef {
  p_header = "DATA INPUT.";
 }

paramdef string {
  p_default = "mdvp:://localhost::mdv/"; 
  p_help    = "Data input";
} data_url;

paramdef string {
  p_default = "dataField"; 
  p_descr   = "Field name string of data in input file on which to perform filtering";
} field_name;

paramdef int {
  p_default = 0; 
  p_descr    = "Number of field in data input file on which to perform filtering";
} field_number;

paramdef boolean {
   p_default = true;
   p_descr = "Option to use field name instead of number. If false, field_number_will be used.\n";
}use_field_name;


paramdef int {
  p_default = 300;
  p_descr = "Max valid realtime age of input data. Used by data trigger.\n";
}max_valid_realtime_age;


paramdef int {
   p_default = 0;
   p_descr = "This defines the time window around data search time.";
} search_margin;

paramdef boolean {
  p_default = false;
  p_descr = "Set to true to remap the data.";
  p_help = "Defaults to false";
} remap_grid;

typedef enum {
  PROJ_FLAT, PROJ_LATLON, PROJ_LAMBERT
} projection_t;

paramdef enum projection_t {
  p_descr = "Projection type for remapped grid";
  p_default = PROJ_FLAT;
  p_help = "Projections currently supported are PROJ_FLAT, PROJ_LATLON and PROJ_LAMBERT";
} grid_projection;


typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_params_t;

paramdef struct grid_params_t {
p_default = { 812, 485, -99.086,  31.515, .038239, .035933 };
p_descr = "Grid parameters for remapping in x,y.";
p_help = "These params apply to all projection types.";
}grid_params;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin latitude.";
  p_help = "This applies only to PROJ_FLAT and PROJ_LAMBERT projections.";
} origin_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin longitude.";
  p_help = "This applies only to PROJ_FLAT and PROJ_LAMBERT projections.";
} origin_lon;


paramdef double {
  p_descr = "Rotation (in degrees) of grid from true north";
  p_help = "Usually 0 - applied to flat earth only";
  p_min = {-360.0};
  p_default = { 0.0};
} flat_rotation;

paramdef double {
  p_descr = "First true latitude for PROJ_LAMBERT projection.";
  p_help = "Applies only to PROJ_LAMBERT.";
  p_min = {-90.0};
  p_max = {90.0};
  p_default = { 25.1};
} lambert_lat1;

paramdef double {
  p_descr = "Second true latitude for PROJ_LAMBERT projection.";
  p_help = "Applies only to PROJ_LAMBERT.";
  p_min = {-90.0};
  p_max = {90.0};
  p_default = { 25.0};
} lambert_lat2;


paramdef float {
   p_descr = "maximum radius in kilometers within which to look for non missing data around missing data point";
   p_default = 100;
}max_radius;


commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef string {
  p_default = "mdvp:://localhost::$(PROJECT)/mdv";
  p_descr = "Url of output mdv dataset";
} output_url;

