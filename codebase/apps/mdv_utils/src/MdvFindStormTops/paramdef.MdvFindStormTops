/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */

commentdef {
  p_header = "Small program to descend through the data until\n"
	"a threshold is exceeded, thereby identifying the storm top.\n"
	"Input is a 3D volume, output is a 2D map of heights.\n\n"
	"Niles Oien August 2005";

}

paramdef string {
  p_descr = "URL to trigger off, typically of the form\n"
	    "mdvp:://host.domain:[port]:dir/dir";
  p_help = "Program runs when new data appear here."; 
  p_default = {"mdvp:://localhost::mdv/input"};
} TriggerUrl;
 
paramdef string {
  p_descr = "Output mdv URL, typically of the form\n"
	    "mdvp:://host.domain:[port]:dir/dir";
  p_help = "Derived satellite fields are written here."; 
  p_default = {"mdvp:://localhost::mdv/grad"};
} OutUrl;

paramdef string {
  p_descr = "Input field name";
  p_help = "This is the field operations are performed on."; 
  p_default = "counts3D";
} inFieldName;
            
paramdef string {
  p_descr = "Instance to check in to Procmap with";
  p_help = "Set to something unique."; 
  p_default = {"primary"};
} Instance;

paramdef enum mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = {REALTIME};
  p_descr = "Operation mode";
  p_help = "Archive mode automatically invoked by -interval option.";
} Mode;
    
paramdef int {
  p_default = 1800;
  p_private = FALSE;
  p_descr = "Maximum valid age for files";
  p_help = "REALTIME mode only.";
} MaxRealtimeValidAge;         

paramdef boolean {
  p_default = "FALSE";
  p_private = FALSE;
  p_descr = "Set to print debugging messages.";
  p_help = "Defaults to FALSE";
} Debug;   

paramdef double {
  p_descr = "Threshold";
  p_help = "Data values must exceed this to be considered the top of the storm."; 
  p_default = 0.5;
} threshold;
 
paramdef string {
  p_descr = "Units for height";
  p_help = "Will be the same as the heights of the planes in the input 3D volume."; 
  p_default = "Km";
} heightUnits;
 
paramdef boolean {
	p_descr = "Option to do a substitution on output values\n"
	"taken from the vlevel header to change units.";
	p_help = "Uses transTable parameter.";
	p_default = FALSE;
} doTranslation;

typedef struct {
	double minVal;
	double maxVal;
	double subsVal;
} transTable_t;

paramdef struct transTable_t {
	p_descr = "If the option to do a substitution on output values\n"
	"taken from the vlevel header to change units is used, it is done\n"
	"with this table.";
	p_help = "If a value is greater than a minimum value, and\n"
	"less than or equal to a maximum value, it is replaced by the\n"
	"subsVal (substitution value). The default would roughly map\n"
	"Km to m for calculated Km values of 1, 2 and 3 Km.";
	p_default = { {0.9, 1.1, 1000}, {1.9, 2.1, 2000}, {2.9, 3.1, 3000} };
} transTable[];



/////////// Grid parameters.

commentdef {
  p_header = " ------------ GRID PARAMETERS --------\n"
  		"These specify the grid on which the\n"
                "computations will be performed.\n"
		"These are used only if RemapGrid is set\n"
		"to TRUE. If RemapGrid is FALSE then it is assumed\n"
		"that the fields are already on the same grid.";

}

paramdef boolean {
  p_default = "FALSE";
  p_private = FALSE;
  p_descr = "Set to TRUE to remap the data - useful if visible is at\n"
	    "four times the resolution of the IR channels.";
  p_help = "Defaults to FALSE";
} RemapGrid;   

paramdef double {
  p_descr = "Latitude of grid origin";
  p_help = "Must be specified.";
  p_min = {-90.0};
  p_max = {90.0};
  p_default = { 34.0 };
} grid_origin_lat;

paramdef double {
  p_descr = "Longitude of grid origin";
  p_help = "Must be specified.";
  p_min = {-180.0};
  p_max = {180.0};
  p_default = { -77.0};
} grid_origin_lon;

paramdef double {
  p_descr = "Rotation (in degrees) of grid from true north";
  p_help = "Usually 0 - applied to flat earth only";
  p_min = {-360.0};
  p_default = { 0.0};
} grid_rotation;

paramdef double {
  p_descr = "First true latitude for LAMBERT projection.";
  p_help = "Applies only to LAMBERT.";
  p_min = {-90.0};
  p_max = {90.0};
  p_default = { 25.1};
} grid_lat1;

paramdef double {
  p_descr = "Second true latitude for LAMBERT projection.";
  p_help = "Applies only to LAMBERT.";
  p_min = {-90.0};
  p_max = {90.0};
  p_default = { 25.0};
} grid_lat2;

typedef enum {
  FLAT, LATLON, LAMBERT
} projection_t;

paramdef enum projection_t {
  p_descr = "Projection type of grid";
  p_default = {FLAT};
  p_help = "Projections currently supported are FLAT, LATLON and LAMBERT";
} grid_projection;

paramdef int {
  p_descr = "Number of cells in the grid in X";
  p_min = {1};
  p_default = { 100 };
} grid_nx;

paramdef int {
  p_descr = "Number of cells in the grid in Y";
  p_min = {1};
  p_default = {100};
} grid_ny;

paramdef float {
  p_descr = "Size of the cells in the output grid in X";
  p_default = {1.0};
} grid_dx;

paramdef float {
  p_descr = "Size of the cells in the output grid in Y";
  p_default = {1.0};
} grid_dy;


paramdef float {
  p_descr = "X at grid's lower left corner";
  p_help = "Units for this parameter will depend upon the output grid_projection.";
  p_default = {0};
} grid_minx;

paramdef float {
  p_descr = "Y at grid's lower left corner";
  p_help = "Units for this parameter will depend upon the output grid_projection.";
  p_default = {0};
} grid_miny;


commentdef {
  p_header = "------ End of grid parameters. ";
}




