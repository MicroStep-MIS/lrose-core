/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for MdvMosaic
 *
 * Mike Dixon, RAP, NCXAR, Boulder, CO, USA, 80307-3000
 *
 * August 1998
 * 
 * MdvMosaic takes MDV data from a number of input directories and merges
 * them into a single mosaic. The grid information for the input data is
 * read from the first input file in each  directory.
 */

paramdef enum debug {
  p_options = {DEBUG_OFF, DEBUG_WARNINGS, DEBUG_NORM, DEBUG_VERBOSE};
  p_default = {DEBUG_OFF};
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the appropriate level "
           "of detail.";
} debug;

paramdef long {
  p_default = {0};
  p_min = {0};
  p_max = {3};
  p_descr = "Malloc debug level";
  p_help = "0 - none, "
           "1 - corruption checking, "
           "2 - records all malloc blocks and checks, "
           "3 - printout of all mallocs etc.";
} malloc_debug_level;

paramdef char* {
  p_default = {"Test"};
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef enum mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = {ARCHIVE};
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. "
           "In realtime mode, the analysis is performed for each volume "
           "scan as it becomes available. In archive mode, the file list "
           "is obtained from the command line.";
} mode;

paramdef enum trigger {
  p_options = {TIME_TRIGGER, FILE_TRIGGER};
  p_default = {TIME_TRIGGER};
  p_descr = "Trigger mechanism.";
  p_help = "TIME_TRIGGER: the program is triggered at constant time intervals - "
           "see time_trigger_interval. "
           "FILE_TRIGGER: the program watches the first input_dir and triggers "
           "based on data in that directory.";
} trigger;

paramdef long {
  p_min = {0};
  p_default = {300};
  p_descr = "Interval for TIME_TRIGGER - secs.";
  p_help = "For TIME_TRIGGER, this is the interval between trigger events. "
           "In REALTIME mode, a time trigger always occurs on the hour, "
           "and at constant intervals thereafter. "
           "In ARCHIVE mode the trigger starts at start_time and "
           "at constant intervals thereafter.";
} time_trigger_interval;

paramdef long {
  p_min = {0};
  p_default = {600};
  p_descr = "Max time diff for searching for files relative to the "
            "trigger time - secs.";
  p_help = "When matching files up with the trigger time, the difference "
           "between the trigger time and file time must be less than this margin. "
           "This value is also used as the max age of the latest data info file "
           "when in REALTIME mode with FILE_TRIGGER.";
} trigger_time_margin;

paramdef char* {
  p_default = {"."};
  p_descr = "Array of input directories.";
  p_help = "If available, data from these directories will be merged.";
} input_dirs[];

paramdef char* {
  p_default = {"."};
  p_descr = "Output directory.";
  p_help = "The merged files are placed in this directory.";
} output_dir;

paramdef enum output_projection {
  p_options = {OUTPUT_PROJ_FLAT, OUTPUT_PROJ_LATLON};
  p_default = {OUTPUT_PROJ_LATLON};
  p_descr = "Projection of output grid.";
  p_help = "FLAT - (x,y) Cartesian data in km from a given origin. "
           "LATLON - lat/lon grid with constant grid spacing.";
} output_projection;

paramdef struct output_origin {
  p_descr = "Origin of output grid.";
  p_help = "Used with both OUTPUT_PROJ_LATLON and OUTPUT_PROJ_FLAT.";
  p_field_type = {double, double};
  p_field_name = {lat, lon};
  p_default = {40.0, -104.0};
} output_origin;

paramdef struct grid {
  p_descr = "Output grid parameters.";
  p_help = "The grid params for the output grid.";
  p_field_type = {long, long, long, double, double, double, double, double, double};
  p_field_name = {nx, ny, nz, minx, miny, minz, dx, dy, dz};
  //p_default = {300, 300, 1, -149.5, -149.5, 0.5, 1.0, 1.0, 1.0};
  p_default = { 1830, 918, 1, -129.98088, 20.017969, 0.5, 0.038239, 0.0359331, 1 };
} output_grid;

paramdef long {
  p_descr = "List of field numbers to be processed from input files.";
  p_help = "These fields will be read from the input files and "
           "merged into the output files.";
} field_list[];

paramdef char* {
  p_default = {"Unknown"};
  p_descr = "Data set name.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_name;

paramdef char* {
  p_default = {"Merged data created by MdvMosaic."};
  p_descr = "Data set source details.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_source;

paramdef double
{
  p_descr = "scale value used for converting between byte values and data values";
  p_help = "The byte value is calculated from the byte value using the "
           "following formula: byte = (value - data_bias) / data_scale. "
           "Only used if compute_scale_and_bias is TRUE";
  p_default = { 0.3 };
} data_scale;

paramdef double
{
  p_descr = "bias value used for converting between byte values and data values";
  p_help = "The byte value is calculated from the byte value using the "
           "following formula: byte = (value - data_bias) / data_scale. ";
           "Only used if compute_scale_and_bias is TRUE";
  p_default = { 0.0 };
} data_bias;
  
paramdef boolean
{
  p_default = FALSE;
  p_descr = "Option to automatically compute the data scale and bias.";
  p_help = "If set to TRUE, the data scale and bias will automatically be computed "
           "from the input data, otherwise the data_scale and data_bias parameter "
           "values will be used.";
} compute_scale_and_bias;

