/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.RunForest
 *
 * This file contains the TDRP parameter definitions for
 * RunForest.
 */

commentdef
{
  p_header = "RunForest Application";
  p_text = "RunForest runs a already created random forest, which has "
	  " been saved to file, with Mdv input and output data sets";
};

/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = false;
} debug;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;

typedef enum
{
  REALTIME,
  ARCHIVE,
} run_mode_t;

paramdef enum run_mode_t
{
  p_descr = "Running mode";
  p_help = "In REALTIME mode, the program continuously runs with triggering dependent on trigger_mode_t\n"
           "ARCHIVE mode is set by using the -start and -end command line args.\n";
  p_default = "REALTIME";
} run_mode;

typedef enum
{
  DATA,
  INTERVAL
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In DATA mode, the program waits for new data from the "
           "first MDV location specified in the input_list parameter.\n"
           "In INTERVAL mode, the program will trigger every n minutes"
           "as specified in the interval_trigger parameter."
           "An ARCHIVE mode for both DATA and INTERVAL can be invoked"
	   "using the -start and -end command line args.\n";
  p_default = "DATA";
} trigger_mode;

paramdef long {
  p_default = {15};
  p_descr = "Trigger interval in minutes";
  p_help = "The application will start its run every so many minutes.";
} interval_trigger;

/***********************************************************************
 * Input Parameters
 */

commentdef
{
  p_header = "INPUT PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef enum
{
  PARF_FOREST,
  RFOREST
} input_type_t;

paramdef enum input_type_t
{
  p_descr = "Input forest type";
  p_default = "PARF_FOREST";
} forest_type;

paramdef string
{
  p_descr = "Input forest path and base name";
  p_help = "Input path for forest file(s), including the base name.";
  p_default = "/d1/parf/run2/run2_forest";
} forest_name;

typedef struct {
  char* mdv_url;
  int mdv_read_margin;
  boolean required;
  float vert_min;
  float vert_max;
  boolean do_composite;
  int mdv_read_offset;
} input_t;

paramdef struct input_t {
  p_default = { {"mdvp:://localhost::mdv/input", 30, false, -1, -1, false, 0} };
  p_descr = "List of input urls";
  p_help =  "Each input will read in a list of variables as defined in var_list.\n"
            "mdv_read_margin specifies maximum age of file to still be valid, in minutes.\n"
            "required flag states if this input is a requirement for the forest to run.\n"
	    "It is also a requirement that one input have the same nz as output_nz param.\n"
            "Optional vert_min and vert_max used to subset the vertical dimension.\n"
	    "Optional do_composite will do a vertical composite of the input data.\n"
            "Optional mdv_read_offset will load with a offset from the trigger time, in minutes.";
} input_list[];

typedef enum
{
  BASIC,
  INTERP,
  INTERP_FLAT,
  MAX,
  MEAN,
  MIN
} remap_option_t;

typedef struct {
  char* mdv_name;
  int mdv_number;
  int input_list_index;
  float fill_value;
  float no_data_value;
  float vertical_level;
  remap_option_t remap_option;
} input_var_t;

paramdef struct input_var_t {
  p_default = { {"PRES", 0, 0, 46000, -999.0, -1.0, BASIC},
                {"HGT", 0, 0, 6000, -999.0, -1.0, BASIC}
	       };
  p_descr = "List of input variables, uses mdv_name or mdv_number.";
  p_help =  "Must be the same order as the attributes from the trained input forest.\n"
            "Input list index is the input url index to read this variable from.\n"
            "Fill_value is used to replace mdv missing_value and bad_data_value.\n"
            "No_data_value is used only if the entire field cannot be loaded.\n"
            "vertical_level is only used for a 2d forest and specifies the level from a 3d field.\n"
            "If the input field does not match output projection they will be remaped based "
            "on the remap_option type,\n"
  	    "  BASIC is nearest neighbor.\n"
            "  INTERP is 3d Interpolatoin.\n"
	    "  INTERP_FLAT is horizontal interpolation at nearest level.\n"
	    "  MAX, MEAN, MIN uses the max/mean/min from a higher resolution grid.\n"
            "A input_list_index of -1 is a dummy variable, will use no_data_value for entire field.\n";
} var_list[];

/***********************************************************************
 * Output parameters.
 */

commentdef
{
  p_header = "OUTPUT PARAMETERS";
};

paramdef int
{
  p_descr = "Number of output vertical levels.";
  p_help = "Program will force at least one input mdv file to have "
           "this many input vertical levels.";
  p_default = 10;
} output_nz;

paramdef string
{
  p_descr = "Output URL.";
  p_help = "URL for the output MDV files.";
  p_default = "mdvp:://localhost::mdv/output";
} output_url;

paramdef float
{
  p_descr = "Optional polygon mask. Outside of polygon nothing will be run"
            " and points will be set to missing.";
  p_help = "Array is a lat long list containing the points of the polygon."
           "Leave array blank for no polygon check.";
  p_default = {}; 
} polygon_mask[];

typedef enum {
  COMPRESSION_NONE = 0,
  COMPRESSION_RLE = 1,
  COMPRESSION_ZLIB = 3,
  COMPRESSION_GZIP = 5
} output_compression_t;

paramdef enum output_compression_t {
  p_default = COMPRESSION_ZLIB;
  p_descr = "Compression method for output fields.";
} output_compression;

typedef enum {
  INT8 = 1,   // unsigned 8 bit IEEE integer 
  INT16 = 2,  // unsigned 16 bit IEEE integer
  FLOAT32 = 5 // 32-bit IEEE float
} encoding_t;

paramdef enum encoding_t {
  p_default = FLOAT32;
  p_descr = "Encoding method for output fields.";
} output_encoding;

paramdef string {
  p_default = "Unknown";
  p_descr = "Data set name.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} output_data_set_name;

paramdef string {
  p_default = "Data created by RunForest.";
  p_descr = "Data set source details.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} output_data_set_source;

typedef enum {
  PROJ_LATLON		= 0,
  PROJ_LAMBERT_CONF	= 3,
  PROJ_FLAT		= 8
} projection_t;

typedef struct {
  projection_t type;
  double rotation;
  double origin_lat;
  double origin_lon;
  double ref_lat_1;
  double ref_lat_2;
} projection_info_t;

paramdef struct projection_info_t {
  p_descr = "This is the projection information for the output mdv file.";
  p_help = "The choice of projections are PROJ_LATLON, PROJ_LAMBERT_CONF and "
           "PROJ_FLAT. PROJ_LATLON is a latitude/longitude projection, and if "
           "it is chosen the remaining parameters can be ignored. PROJ_FLAT is "
           "a flat projection, and if it is chosen the parameters rotation, "
           "origin_lat, origin_lon must be set. PROJ_LAMBERT_CONF is a Lambert "
           "conformal projection, and if it is chosen the parameters origin_lat, "
           "origin_lon, ref_lat_1 and ref_lat_2 must be set.";
  p_default = {PROJ_LAMBERT_CONF, 0.0, 25.0, -95.0, 25.0, 25.0};
} projection_info; 
  
typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_info_t;

paramdef struct grid_info_t {
  p_descr = "This is the grid information for the output mdv file.";
  p_help = "";
  p_default = {301, 225, -3332.142334, -588.890442, 20.318001, 20.318001};
} grid_info; 

paramdef boolean
{
  p_descr = "Flag to use vote_remap function.";
  p_help = "Creates an extra field with name remap_field_name.";
  p_default = false;
} use_vote_remaping;

paramdef string
{
  p_descr = "Vote remap mdv field name.";
  p_help = "Only used when use_vote_remaping is true.";
  p_default = "";
} remap_field_name;

paramdef string
{
  p_descr = "Vote remap mdv field units.";
  p_help = "Only used when use_vote_remaping is true.";
  p_default = "";
} remap_field_units;

paramdef float
{
  p_descr = "Optional vote remaping function. Remaps the vount counts of each"
            " category to the specified value.";
  p_help = "Array should be n+1 trees by m-1 categories long. (category 0 not used)"
           "The first n values will mapped by the number of votes in category 1."
           " Example: Forest with 2 categories and 5 trees:  0.0 5.0 10.0 25.0 50.0 100.0"
           " A forest vote of 4 in category 1 (1 vote in category 0) will be remaped to 50.0";
  p_default = {}; 
} vote_remap[];

paramdef boolean
{
  p_descr = "Flag to output the input fields in the output mdv file.";
  p_help = "Creates a large output mdv file with all inputs and outputs.";
  p_default = false;
} output_input_fields;

paramdef boolean
{
  p_descr = "Output as forecast";
  p_help = "Output data in RAL's mdv forecast directory structure";
  p_default = false;
} output_fcst;

paramdef int 
{
  p_descr = "Forecast lead seconds.";
  p_help = "If output_fcst is set to true, this will be the forecast lead appened to time_centroid of the input data to create a forecast time";
  p_default = 7200;
} fcst_lead_secs;


