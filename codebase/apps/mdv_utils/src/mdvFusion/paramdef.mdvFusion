/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */

commentdef {
  p_header = "fusionNowcaster by Niles Oien March 2005";

}

paramdef string {
  p_descr = "List of input fusion files.";
  p_help = "One output field is produced for each input\n"
	"fusion file."; 
  p_default = { 
      "$(FUSION_HOME)/U.fusionList",
      "$(FUSION_HOME)/V.fusionList",
      "$(FUSION_HOME)/Temp.fusionList"
  };
} fusionFileList[];

paramdef string {
  p_descr = "Units for the above fields.";
  p_help = "Used in the MDV output. Set as appropriate."; 
  p_default = { 
      "m/s",
      "m/s",
      "C"
  };
} units[];


typedef enum {
  PROJ_FLAT, PROJ_LATLON, PROJ_LAMBERT
} output_projection_t;


paramdef enum output_projection_t {
  p_default = PROJ_FLAT;
  p_descr = "Projection of output grid.";
  p_help = "FLAT - (x,y) Cartesian data in km from a given origin.\n"
           "LATLON - lat/lon grid with constant grid spacing.\n";
           "LAMBERT - Lambert Conformal projection with constant grid spacing.\n";
} output_projection;


typedef enum {
  MDV_READ_FIRST_BEFORE, MDV_READ_CLOSEST
} mdv_read_method_t;


paramdef enum mdv_read_method_t {
  p_default = MDV_READ_FIRST_BEFORE;
  p_descr = "Controls how MDV data are read.";
  p_help = "Options are relatively self explanitory.";
} mdv_read_method;



typedef struct {
  int nx;
  int ny;
  int nz;
  double latOrig;
  double lonOrig;
  double minx;
  double miny;
  double dx;
  double dy;
  double lambertLat1;
  double lambertLat2;
  double flatEarthRotation;
} output_grid_t;

paramdef struct output_grid_t {
  p_descr = "Output grid definition.";
  p_help = "All input grids are remapped to this.";
  p_default = {300, 300, 3, 40.0, -104.0, -149.5, -149.5, 1.0, 1.0, 35.0, 40.0, 0.0 };
} output_grid;

paramdef double {
  p_descr = "Output vertical levels, in Km.";
  p_help = "Needs to be the same as nz above.";
  p_default = { 0.18, 0.5, 1.0};
} vlevels[];
 
paramdef int {
  p_descr = "How many seconds data are valid for.";
  p_help = "Depend on frequencies of inputs."; 
  p_default = 900;
} Expiry;


paramdef string {
  p_descr = "Output mdv URL, typically of the form\n"
	    "mdvp:://host.domain:[port]:dir/dir";
  p_help = "Derived satellite fields are written here."; 
  p_default = {"mdvp:://localhost::mdv/grad"};
} OutUrl;
            
paramdef string {
  p_descr = "Instance to check in to Procmap with";
  p_help = "Set to something unique."; 
  p_default = {"primary"};
} Instance;

paramdef enum mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = {REALTIME};
  p_descr = "Operation mode";
  p_help = "Archive mode automatically invoked by -interval option.";
} Mode;

paramdef boolean {
  p_descr = "Option to base triggering, in either archive or realtime\n"
	"mode, on the data in TriggerUrl. If FALSE, the program triggers\n"
	"at regular intervals set by the triggerTime parameter.";
  p_help = "Will probably be set to FALSE in the operational system."; 
  p_default = TRUE;
} fileBasedTriggering;

paramdef string {
  p_descr = "URL to trigger off, typically of the form\n"
	    "mdvp:://host.domain:[port]:dir/dir";
  p_help = "See comments for Mode and fileBasedTriggering. Relevant\n"
	"only if fileBasedTriggering is TRUE."; 
  p_default = {"mdvp:://localhost::mdv/input"};
} TriggerUrl;
 
paramdef int {
  p_default = 300;
  p_private = FALSE;
  p_descr = "Time interval for time-based triggering, in seconds.";
  p_help = "Relevant only if fileBasedTriggering is FALSE.";
} triggerInterval;

paramdef int {
  p_default = 1800;
  p_private = FALSE;
  p_descr = "Maximum valid age for files";
  p_help = "REALTIME mode only.";
} MaxRealtimeValidAge;

paramdef boolean {
  p_default = "FALSE";
  p_private = FALSE;
  p_descr = "Set to print debugging messages.";
  p_help = "Defaults to FALSE";
} Debug;

paramdef boolean {
  p_default = "FALSE";
  p_private = FALSE;
  p_descr = "Option to sync the file system after writing an MDV file.\n"
	"the sync() function is actually called twice.";
  p_help = "Defaults to FALSE";
} syncFSpostWrite;

