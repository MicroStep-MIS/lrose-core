/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.MdvAreaCoverage
 *
 * This file contains the TDRP parameter definitions for
 * MdvAreaCoverage.
 */


commentdef
{
  p_header = "MdvAreaCoverage";
  p_text = "This program reads an MDV file and produces an ASCII table that "
           "gives the area covered at the specified threshold levels.";
};

/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_default = false;
} debug;

paramdef boolean
{
  p_descr = "verbose debug flag";
  p_help = "If true, verbose debug messages will be printed.";
  p_default = false;
} verbose;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process triggering.
 */

commentdef
{
  p_header = "PROCESS TRIGGERING PARAMETERS";
  p_text = "Parameters describing the process triggering.";
};

typedef enum
{
  TIME_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In TIME_LIST mode, the program operates on archive data as "
           "specified in the time_list_trigger parameter.\n";
  p_default = TIME_LIST;
} trigger_mode;

paramdef string
{
  p_descr = "Trigger URL";
  p_default = "mdvp:://localhost::mdv/trigger";
} trigger_url;

typedef struct
{
  string start_time;
  string end_time;
} time_list_trigger_t;

paramdef struct time_list_trigger_t
{
  p_descr = "Trigger information used when using the TIME_LIST trigger";
  p_help = "url specifies the triggering url.\n"
           "start_time specifies the archive start time in any format "
           "recognized by the DateTime class.\n"
           "end_time specifies the archive end time in any format "
           "recognized by the DateTime class.";
  p_default = { "2001/1/1 00:00:00",
                "2002/1/2 00:00:00" };
} time_list_trigger;

/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef struct
{
  string url;
  boolean use_field_name;
  string field_name;
  long field_num;
  long level_num;
  long max_input_secs;
} input_field_t;

paramdef struct input_field_t
{
  p_descr = "Information about the input fields for the scatter plot.";
  p_help = "\turl - The URL for retrieving the field.\n"
           "\tuse_field_name - Flag indicating whether to identify the "
           "field based on its name or number in the MDV file.\n"
           "\tfield_name - The name of the field in the MDV file. "
           "Used only if use_field_name is set to true.\n"
           "\tfield_num - The number of the field in the MDV file. "
           "Field numbers start at 0. "
           "Used only iif use_field_name is set to false.\n"
           "\tlevel_num - The vertical level number to use for the coverage "
           "calculations. "
           "Set to -1 to do the coverage on a composite of the data. "
	   "Set to any other negative value to do the coverage calculations "
           "over the entire volume.\n"
           "\tmax_input_secs - The maximum number of seconds that this "
           "input field is valid. "
           "If there is no data available for this field within this number "
           "of seconds of the trigger time, no scatter plot will be produced "
           "for this time period.\n";
  p_default = { "mdvp:://localhost::mdv/field1",
                true,
                "field1",
                0,
                -1,
                3600 };
} input_field;


/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

typedef enum
{
  COVERAGE_GREATER_THAN,
  COVERAGE_GREATER_THAN_OR_EQUAL_TO,
  COVERAGE_LESS_THAN,
  COVERAGE_LESS_THAN_OR_EQUAL_TO,
  COVERAGE_EQUAL_TO,
  COVERAGE_NOT_EQUAL_TO,
  COVERAGE_MISSING,
  COVERAGE_NON_MISSING
} coverage_type_t;

typedef struct
{
  double threshold;
  coverage_type_t type;
  string column_label;
} coverage_info_t;

paramdef struct coverage_info_t
{
  p_descr = "List of coverage values to calculate";
  p_default = { { 0.0, COVERAGE_GREATER_THAN, ">0" },
                { 0.0, COVERAGE_EQUAL_TO, "=0" },
                { 0.0, COVERAGE_LESS_THAN, "<0" },
                { 0.0, COVERAGE_NON_MISSING, "Total" } };
} coverage_values[];
