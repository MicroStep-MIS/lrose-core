/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions Mdv2TextHdr
//
// Mike Dixon, RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// Dec 2001
//

commentdef {
  p_header = "Program name: Mdv2TextHdr";
  p_text = "Mdv2TextHdr reads the master header from an mdv file, and writes text information to an output file. The format of the output text is controlled by this parameter file. The usage is 'Mdv2TextHdr -params params_file'.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "MODE OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in FILELIST mode, at least) MUST contain a day-directory below the data file -- ./data_file.mdv will not work as a file path";
} mode;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "mdv/input";
  p_descr = "URL for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_url;

paramdef int {
  p_default = 360;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

commentdef {
  p_header = "OUTPUT TEXT FORMATTING.";
}

typedef enum {
  TIME_GEN,
  TIME_BEGIN,
  TIME_END,
  TIME_CENTROID,
  TIME_EXPIRE,
  N_FIELDS,
  N_CHUNKS,
  SENSOR_LON,
  SENSOR_LAT,
  SENSOR_ALT,
  DATA_SET_INFO,
  DATA_SET_NAME,
  DATA_SET_SOURCE,
  NO_VALUE
} master_hdr_entry_t;

typedef struct {
  string label;
  master_hdr_entry_t entry;
  string format;
  string ending;
} text_line_t;

paramdef struct text_line_t {
  p_default = {
    { "start_time = ", TIME_BEGIN, "%Y/%m/%d %H:%M:%S", "" },
    { "centroid_time = ", TIME_CENTROID, "%Y/%m/%d %H:%M:%S", "" },
    { "end_time = ", TIME_END, "%Y/%m/%d %H:%M:%S", "" },
    { "n_fields = ", N_FIELDS, "%d", "" },
    { "n_chunks = ", N_CHUNKS, "%d", "" },
    { "lat = ", SENSOR_LAT, "%g", "" },
    { "lon = ", SENSOR_LON, "%g", "" },
    { "alt = ", SENSOR_ALT, "%g", "" },
    { "info = ", DATA_SET_INFO, "%s", "" },
    { "name = ", DATA_SET_NAME, "%s", "" },
    { "source = ", DATA_SET_SOURCE, "%s", "" },
    { "mode = ", NO_VALUE, "", "test" }
  };
  p_descr = "Specify output fields, with labels.";
  p_help = "The fields will be printed in order. The label first, followed by the value, followed by the ending and a new line. The value is formatted according to the format string. For time values, the format is passed to strftime. If NO_VALUE is specified, the label is followed immediately by the ending";
} text_lines[];

commentdef {
  p_header = "OUTPUT FILE.";
}

paramdef string {
  p_default = "/tmp";
  p_descr = "Temporary directory.";
  p_help = "Output files are written to this directory first, and then renamed to the correct path.";
} tmp_dir;

paramdef string {
  p_default = "./output";
  p_descr = "Output directory for text files.";
  p_help = "The file paths will be computed in the same way as the MDV files. i.e. yyyymmdd/hhmmss.ext.";
} output_dir;

paramdef string {
  p_default = "hdr";
  p_descr = "File extension for output files.";
} output_file_ext;

