/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */

commentdef {
  p_header = "MdvRepeatOne";
  p_text = "Repeatedly output one particular MDV data volume over and over, with real time time stamp (with delay)";
}

typedef enum {
  DEBUG_OFF, DEBUG_ON, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = {DEBUG_OFF};
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef int {
  p_min = 0;
  p_default = 60; 
  p_private = FALSE;
  p_descr = "Frequencey (seconds) at which to output the data";
} Delay;     
               
paramdef string {
  p_default = ".";
  p_private = FALSE;
  p_descr = "URL where we find example MDV data to replay.";
  p_help = "Input data source.";
} InUrl;

typedef struct {
  int year;
  int month;
  int day;
  int hour;
  int min;
  int sec;
} date_t;

paramdef struct date_t {
  p_descr = "Date to replay again and again from input URL.";
  p_help = "Data are replayed for this date.";
  p_default = { 2005, 01, 25, 00, 00, 00 };
} date;

paramdef string {
  p_default = ".";
  p_private = FALSE;
  p_descr = "Place to write data to.";
  p_help = "Output URL.";
} OutUrl;

paramdef string {
  p_default = "primary";
  p_private = FALSE;
  p_descr = "Single string value";
  p_help = "ProcMap instance.";
} instance;

paramdef int {
  p_default = 0;
  p_private = FALSE;
  p_descr = "Simulated realtime delay, seconds.";
  p_help = "If set to 900 seconds == 15 minutes then data timestamped\n"
	"at, say, 23:00 will not be written until 23:15 at the earliest.\n\n"
	"Note that the realtimeDelay can be made negative if\n"
	"for some reason you want to simulate data coming in\n"
	"a little too early - unfortunately unlikely in actual\n"
	"realtime systems (otherwise Niles would patent it).";
} realtimeDelay;

commentdef {
  p_header = "Option to resample the data";
}

paramdef boolean
{
  p_descr = "TRUE to resample in x and y";
  p_default = FALSE;
} do_resample;

typedef struct
{
  double minx;
  double miny;
  int nx;
  int ny;
} proj_info_t;

paramdef struct proj_info_t
{
  p_descr = "Projection information for the resampled grid.";
  p_default = { 0.0, 0.0, 0, 0 };
} resample_proj_info;

