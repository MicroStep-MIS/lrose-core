/*********************************************************
 * parameter definitions for CwbRadar2Mdv
 *
 * Mike Dixon, RAP, NCXAR, Boulder, CO, USA, 80307-3000
 *
 * June 2003
 * 
 * CwbRadar2Mdv takes CWB 3D radar files and converts to MDV format.
 */

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_WARNINGS, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with the appropriate level of detail.";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

typedef enum {
  ARCHIVE, REALTIME
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the analysis is performed for each volume scan as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;

commentdef {
  p_header = "INPUT DATA.";
}

paramdef string {
  p_default = "./input";
  p_descr = "Directory for input radar data - REALTIME mode.";
  p_help = "The latest_data_info file in this directory is updated each time the model adds a forecast time step to the output file.";
} realtime_input_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use latest_data_info file.";
  p_help = "It true, the program will use the _latest_data_info file for identifying the incoming data file name. If false, it will scan the input directory.";
} use_latest_data_info_file;

paramdef int {
  p_min = 0;
  p_default = 300;
  p_descr = "Max age of input data - REALTIME mode.";
  p_help = "For realtime only - max age of input data for it to be valid. If the latest_data_info file is older than this, the program waits for new data.";
} max_realtime_valid_age;

commentdef {
  p_header = "OUTPUT DATA.";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output URL.";
  p_help = "The radar data is output to URL in MDV format.";
} output_url;

paramdef string {
  p_default = "MOSA";
  p_descr = "Short field name for MDV field header.";
  p_help = "The long field name is taken from the input file. The short field name is set from this parameter. This is done so that it can be backward compatible with previous CWB radar products.";
} output_short_field_name;

paramdef double {
  p_default =  -32.0;
  p_descr = "Minimum value for reflectivity (dBZ).";    
  p_descr = "Reflectivity values less than this are set to missing.";
} reflectivity_min_value;

typedef enum {
  OUT_INT8 = 1,
  OUT_INT16 = 2,
  OUT_FLOAT32 = 5
} output_encoding_t;

paramdef enum output_encoding_t {
  p_default = OUT_INT8;
  p_descr = "Encoding for data in output file.";
} output_encoding;

typedef enum {
  OUTPUT_PROJ_FLAT,
  OUTPUT_PROJ_LATLON,
  OUTPUT_PROJ_LAMBERT,
  OUTPUT_PROJ_NATIVE
} output_projection_t;

paramdef enum output_projection_t {
  p_default = OUTPUT_PROJ_NATIVE;
  p_descr = "Projection of output grid.";
  p_help = "FLAT - (x,y) Cartesian data in km from a given origin. LATLON - lat/lon grid with constant grid spacing. LAMBERT - Lambert conformal projection. NATIVE - use the native data grid, copy to output.";
} output_projection;

typedef enum {
  VLEVEL_KM,
  VLEVEL_FL
} vlevel_units_t;

paramdef enum vlevel_units_t {
  p_default = VLEVEL_FL;
  p_descr = "Units for vertical levels.";
  p_help = "The input file contains data with vertical levels in km. If  VLEVEL_FL is chose, these will be converted to flight levels.";
} vlevel_units;

typedef struct {
  double lat;
  double lon;
} output_origin_t;

paramdef struct output_origin_t {
  p_descr = "Origin of output grid.";
  p_help = "Used with OUTPUT_PROJ_FLAT only.";
  p_default = {40.0, -104.0};
} output_origin;

paramdef double {
  p_default = 10.0;
  p_descr = "lat 1 value for Lambert conformal projection.";
} lambert_lat1;

paramdef double {
  p_default = 60.0;
  p_descr = "lat 2 value for Lambert conformal projection.";
} lambert_lat2;

typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} output_grid_t;

paramdef struct output_grid_t {
  p_descr = "Output grid parameters.";
  p_help = "The grid params for the output grid.";
  p_default = {300, 300, -149.5, -149.5, 1.0, 1.0};
} output_grid;

commentdef {
  p_header = "FILE HEADER INFO";
}

paramdef string {
  p_default = "This MDV file was created by CwbRadar2Mdv.";
  p_descr = "Data set info.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_info;

paramdef string {
  p_default = "Radar data mosaic from Taiwan CWB.";
  p_descr = "Data set name.";
  p_help = "This is placed in the MDV master header for documentation purposes.";
} data_set_name;

