/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */


commentdef {
  p_header = "windtracerPrf2mdv is a small conversion utility that\n"
  "reads the PRF format profile from the wind tracer and writes\n"
  "a small MDV file that can then be incorporated into the\n"	
  "blend. Niles Oien August 2008.";
}

paramdef string {
  p_default = "mdvp:://localhost::./mdv";
  p_descr = "Output MDV url, of form mdvp:://host.domain:[port]:dir/dir ";
  p_help = "Data are written here.";
} output_url;

paramdef string {
  p_default = "./";
  p_descr = "Input directory.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef string {
  p_default = "";
  p_descr = "Input file extension.";
  p_help = "If string is NULL, all extensions are valid.";
} fileExtension;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}


paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;


paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = REALTIME;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;
  

paramdef double {
  p_descr = "Heights are rounded by this number, in meters.";
  p_help = "Default should be fine.";
  p_default = 10;
} heightRound;
 

typedef struct {
	int nx;
	int ny;
	double dx;
	double dy;
} grid_t;

paramdef struct grid_t {
  p_descr = "Grid to populate. Units for dx, dy are Km.\n"
	"Flat earth centered at profile is assumed.";
  p_help = "Default should be fine.";
  p_default = {11, 11, 1, 1};
} grid;
 
