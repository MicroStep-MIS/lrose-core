/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions Mdv2Plain
//
// Mike Dixon, RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// July 2000
//

commentdef {
  p_header = "Program name: Mdv2Plain";
  p_text = "Mdv2Plain writes out Mdv data in plain binary array format.";
}

commentdef {
  p_header = "DEBUGGING and PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "mdv/input";
  p_descr = "URL for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_url;

commentdef {
  p_header = "DATA CONVERSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to set horizontal limits.";
} set_horiz_limits;

typedef struct {
  float min_lat;
  float min_lon;
  float max_lat;
  float max_lon;
} horiz_limits_t;

paramdef struct horiz_limits_t {
  p_default = {-90.0, -180.0, 90.0, 180.0};
  p_descr = "Set horizontal limits.";
} horiz_limits;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set plane vlevel limits";
  p_help = "Mutually exclusive with set_plane_num_limits.";
} set_vlevel_limits;

paramdef float {
  p_default = 0;
  p_descr = "Lower plane vlevel limit.";
} lower_vlevel;

paramdef float {
  p_default = 0;
  p_descr = "Upper plane vlevel limit.";
} upper_vlevel;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set plane number limits";
  p_help = "Mutually exclusive with set_vlevel_limits.";
} set_plane_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower plane num limit.";
} lower_plane_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper plane num limit.";
} upper_plane_num;

typedef enum {
  ENCODING_INT8 =      1,
  ENCODING_INT16 =     2,
  ENCODING_FLOAT32 =   5
} encoding_type_t;

paramdef enum encoding_type_t {
  p_default = ENCODING_FLOAT32;
  p_descr = "Set encoding type.";
} encoding_type;

paramdef boolean {
  p_default = false;
  p_descr = "Option for creating composite.";
} composite;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set field numbers";
} set_field_nums;

paramdef int {
  p_default = 0;
  p_descr = "Field number list.";
} field_nums[];

paramdef boolean {
  p_default = false;
  p_descr = "Option to set field names";
} set_field_names;

paramdef string {
  p_default = 0;
  p_descr = "Field nameber list.";
} field_names[];

paramdef boolean {
  p_default = false;
  p_descr = "Option to remap grid in x,y.";
  p_help = "If true, set the remap parameters below.";
} remap_xy;

typedef enum {
  PROJ_LATLON = 0,
  PROJ_LAMBERT_CONF = 3,
  PROJ_FLAT = 8
} projection_t;

paramdef enum projection_t {
  p_default = PROJ_FLAT;
  p_descr = "Projection for remapping in x,y.";
} remap_projection;

typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_params_t;

paramdef struct grid_params_t {
  p_default = {1, 1, 0.0, 0.0, 1.0, 1.0};
  p_descr = "Grid parameters for remapping in x,y.";
  p_help = "These params apply to all projection types.";
} remap_grid;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid rotation.";
  p_help = "This applies only to PROJ_FLAT projections.";
} remap_rotation;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin latitude.";
  p_help = "This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.";
} remap_origin_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid origin longitude.";
  p_help = "This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.";
} remap_origin_lon;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid reference latitude 1.";
  p_help = "This applies only to PROJ_LAMBERT_CONF projections.";
} remap_lat1;

paramdef double {
  p_default = 0.0;
  p_descr = "Remapped grid reference latitude 2.";
  p_help = "This applies only to PROJ_LAMBERT_CONF projections.";
} remap_lat2;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory.";
  p_help = "Output data is written to this directory.";
} output_dir;

typedef enum
{
  SOUTH_ROW_FIRST,
  NORTH_ROW_FIRST
} row_ordering_t;

paramdef enum row_ordering_t {
  p_default = SOUTH_ROW_FIRST;
  p_descr = "Ordering of rows in the output data.";
} output_row_ordering;

paramdef boolean {
  p_default = true;
  p_descr = "Option to output data in big-endian format.";
  p_help = "If true, the binary data is byte-swapped as required into big-endian format. If false, it is written in native host byte order.";
} big_endian_output;

paramdef boolean {
  p_default = false;
  p_descr = "Option to output file with FORTRAN record markers";
  p_help = "If this is set, the output file will have a leading and trailing      4-byte word indicating the array length. This allows FORTRAN to read the array as Unformatted Sequential";
} fortran_output;

paramdef boolean {
  p_default = false;
  p_descr = "Option to compress output files.";
  p_help = "If this is set, the output data will be compressed using gzip after being written.";
} gzip_output;




