/**********************************************************************
 * TDRP params for ./SimLidarAndNoise
 **********************************************************************/

//======================================================================
//
// SimLidarAndNoise blends a SCIPUFF concentration and
// a noise field into a set of lidar beams.
//
//======================================================================
 
///////////// TriggerUrl //////////////////////////////
//
// URL to trigger off, typically of the form
// mdvp:://host.domain:[port]:dir/dir.
// This is where the SCIPUFF run is.
// Type: string
//

TriggerUrl = "mdvp:://localhost::/d2/oien/OSSE/data/mdv/conc";

///////////// NoiseUrl ////////////////////////////////
//
// URL to read noise from, typically of the form
// mdvp:://host.domain:[port]:dir/dir.
// Noise is generated by MdvNoise in mdv_utils.
// Type: string
//

NoiseUrl = "mdvp:://localhost::/d2/oien/OSSE/data/mdv/noise";

///////////// Instance ////////////////////////////////
//
// Instance to check in to Procmap with.
// Set to something unique.
// Type: string
//

Instance = "OSSE";

///////////// Mode ////////////////////////////////////
//
// Operation mode.
// Archive mode automatically invoked by -interval option.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     TIMESTEP
//

Mode = TIMESTEP;

///////////// startTime ///////////////////////////////
//
// Start time for TIMESTEP mode.
// Format is YYYY MM DD hh mm ss.
// Type: string
//

startTime = "2004 12 17 10 00 00";

///////////// endTime /////////////////////////////////
//
// End time for TIMESTEP mode.
// Format is YYYY MM DD hh mm ss.
// Type: string
//

endTime = "2004 12 17 10 10 00";

///////////// timeStep ////////////////////////////////
//
// Time step, seconds, for TIMESTEP mode.
// Defines temporal resolution.
// Type: int
//

timeStep = 20;

///////////// MaxRealtimeValidAge /////////////////////
//
// Maximum valid age for files.
// REALTIME mode only.
// Type: int
//

MaxRealtimeValidAge = 1800;

///////////// Debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with
// the appropriate level of detail. The 'special' option is
// for looking closely atthe 45 degree azimuth beam.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTREME
//     DEBUG_SPECIAL
//

Debug = DEBUG_OFF;

///////////// geometry ////////////////////////////////
//
// Geometry for lidar scanning.
// Set as appropriate. Distances in meters.
//
// Type: struct
//   typedef struct {
//      double lidarLat;
//      double lidarLon;
//      double r0;
//      double dR;
//      double Rmax;
//      double azMin;
//      double delAz;
//      double azMax;
//   }
//
//

geometry = { $(SIM_LIDAR_LAT),
             $(SIM_LIDAR_LON),
             100, 3, 10000, 
             $(SIM_AZ_MIN),
             0.4,
             $(SIM_AZ_MAX) };

// geometry = { 38.8765, -77.0441, 100, 3, 6000, 0, 0.4, 90 };

//======================================================================
//
//  ------ FMQ definition ---------.
//
//======================================================================
 
///////////// output_fmq_url //////////////////////////
//
// output fmq url.
// Path for FMQ output data.
// Type: string
//

output_fmq_url = "fmqp:://localhost::./fmq/fmq.dsLidar";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer. Some of this buffer 
//   will be used for control bytes (12 bytes per message.
// Type: long
//

output_fmq_size = 2000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: long
//

output_fmq_nslots = 360;

///////////// output_fmq_compress /////////////////////
//
// FMQ compression option.
// If TRUE FMQ messages are compressed.
// Type: boolean
//

output_fmq_compress = FALSE;

///////////// fileDelaySecs ///////////////////////////
//
// After finishing a file, delay for this
// many seconds.
// The intent is to allows Dsr2Vol some catchup time.
// Type: int
//

fileDelaySecs = 2;

///////////// fieldNames //////////////////////////////
//
// MDV field names.
// First is noise, second is scipuff concentration.
// Type: string
// 1D array - variable length.
//

fieldNames = { "conc", "noise" };

///////////// msgLog_dir //////////////////////////////
//
// Message log directory.
// Set as appropriate.
// Type: string
//

msgLog_dir = "./";

///////////// beamsPerMessage /////////////////////////
//
// How many beams to send before sending lidar params.
// Set as appropriate.
// Type: int
//

beamsPerMessage = 30;

///////////// horizBeamWidth //////////////////////////
//
// Nominal horizontal beam width, degrees.
// The default should be OK.
// Type: double
//

horizBeamWidth = 1;

///////////// vertBeamWidth ///////////////////////////
//
// Nominal vertical beam width, degrees.
// The default should be OK.
// Type: double
//

vertBeamWidth = 0.1;

//======================================================================
//
//  ------ Constants relating to scipuff ---------.
//
//======================================================================
 
///////////// ParticleDensity /////////////////////////
//
// Particle density, particles/Kg.
// Depends on the SCIPUFF run.
// Type: double
//

ParticleDensity = 1e+15;

///////////// ParticleRadius //////////////////////////
//
// Particle radius, m.
// Depends on the SCIPUFF run.
// Type: double
//

ParticleRadius = 2.5e-06;

///////////// Qsc /////////////////////////////////////
//
// Particle scattering efficency, unitless.
// Depends on the SCIPUFF run.
// Type: double
//

Qsc = 2.5e-07;

///////////// NoiseBias ///////////////////////////////
//
// Bias to apply to noise. Noise has unity mean.
// Bias is applied before scale.
// Type: double
//

NoiseBias = 0;

///////////// NoiseScale //////////////////////////////
//
// Scale to apply to noise. Noise has unity mean.
// Bias is applied before scale.
// Type: double
//

// NoiseScale = 1e-06;

NoiseScale = $(SIM_NOISE_SCALE);

///////////// sensorRadius ////////////////////////////
//
// Radius of lidar arpeture.
// Units are meters.
// Type: double
//

sensorRadius = 0.2;

///////////// RxTrans /////////////////////////////////
//
// Transmission factor of reciever with filter.
// Unitless.
// Type: double
//

RxTrans = 0.705;

///////////// pulseEnergy /////////////////////////////
//
// Pulse energy of laser.
// Units are mJ.
// Type: double
//

pulseEnergy = 200;

///////////// betaRayleigh ////////////////////////////
//
// Rayleigh extinction co-efficient.
// Units are inverse meters.
// Type: double
//

betaRayleigh = 1e-06;

///////////// betaExt /////////////////////////////////
//
// Aerosol extinction co-efficient.
// Units are inverse meters.
// Type: double
//

betaExt = 1e-06;

///////////// ampGain /////////////////////////////////
//
// Amplifier gain.
// Related returned power in mJ to an A/D count.
// Type: double
//

ampGain = 1e+27;

///////////// sendPower ///////////////////////////////
//
// Option to send signal rather than backscatter.
// Default is not to do this.
// Type: boolean
//

sendPower = FALSE;
