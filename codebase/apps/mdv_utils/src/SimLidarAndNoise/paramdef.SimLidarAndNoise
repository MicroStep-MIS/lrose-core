/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */

commentdef {
  p_header = "SimLidarAndNoise blends a SCIPUFF concentration and\n"
	"a noise field into a set of lidar beams.";

}

paramdef string {
  p_descr = "URL to trigger off, typically of the form\n"
	    "mdvp:://host.domain:[port]:dir/dir";
  p_help = "This is where the SCIPUFF run is."; 
  p_default = {"mdvp:://localhost::mdv/scipuff"};
} TriggerUrl;

paramdef string {
  p_descr = "URL to read noise from, typically of the form\n"
	    "mdvp:://host.domain:[port]:dir/dir";
  p_help = "Noise is generated by MdvNoise in mdv_utils"; 
  p_default = {"mdvp:://localhost::mdv/noise"};
} NoiseUrl;
            
paramdef string {
  p_descr = "Instance to check in to Procmap with";
  p_help = "Set to something unique."; 
  p_default = {"primary"};
} Instance;

paramdef enum mode {
  p_options = {ARCHIVE, REALTIME, TIMESTEP};
  p_default = {TIMESTEP};
  p_descr = "Operation mode";
  p_help = "Archive mode automatically invoked by -interval option.";
} Mode;
    
paramdef string {
  p_descr = "Start time for TIMESTEP mode.";
  p_help = "Format is YYYY MM DD hh mm ss";
  p_default = "2004 12 17 10 00 00";
} startTime;

paramdef string {
  p_descr = "End time for TIMESTEP mode.";
  p_help = "Format is YYYY MM DD hh mm ss";
  p_default = "2004 12 17 10 10 00";
} endTime;

paramdef int {
  p_descr = "Time step, seconds, for TIMESTEP mode.";
  p_help = "Defines temporal resolution.";
  p_default = 20;
} timeStep;

paramdef int {
  p_default = 1800;
  p_private = FALSE;
  p_descr = "Maximum valid age for files";
  p_help = "REALTIME mode only.";
} MaxRealtimeValidAge;         

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTREME, DEBUG_SPECIAL
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed with\n"
	"the appropriate level of detail. The 'special' option is\n"
	"for looking closely atthe 45 degree azimuth beam.";
} Debug;

typedef struct {
  double lidarLat;
  double lidarLon;
  double r0;
  double dR;
  double Rmax;
  double azMin;
  double delAz;
  double azMax;
} geometry_t;

paramdef struct geometry_t {
  p_descr = "Geometry for lidar scanning.";
  p_help = "Set as appropriate. Distances in meters.";
  p_default = {40.0, -104.0, 100.0, 3.0, 7000.0, 45.0, 0.5, 135.0 };
} geometry;

commentdef {
  p_header = " ------ FMQ definition ---------";
}

paramdef string {
  p_descr = "output fmq url";
  p_help = "Path for FMQ output data.";
  p_default = {"fmqp:://localhost::./fmq/fmq.dsLidar"};
} output_fmq_url;

paramdef long {
  p_default = {2000000};
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message.";
} output_fmq_size;

paramdef long {
  p_default = {360};
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = {FALSE};
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} output_fmq_compress;

paramdef int {
  p_descr = "After finishing a file, delay for this\n"
        "many seconds.";
  p_help = "The intent is to allows Dsr2Vol some catchup time.\n";
  p_default = 2;
} fileDelaySecs;

paramdef string {
  p_descr = "MDV field names";
  p_help = "First is noise, second is scipuff concentration.";
  p_default = {"conc", "noise" };
} fieldNames[];

paramdef string {
  p_descr = "Message log directory.";
  p_help = "Set as appropriate";
  p_default = "./";
} msgLog_dir;

paramdef int {
  p_descr = "How many beams to send before sending lidar params.";
  p_help = "Set as appropriate";
  p_default = 30;
} beamsPerMessage;

paramdef double {
  p_descr = "Nominal horizontal beam width, degrees.";
  p_help = "The default should be OK.\n";
  p_default = 1.0;
} horizBeamWidth;

paramdef double {
  p_descr = "Nominal vertical beam width, degrees.";
  p_help = "The default should be OK.\n";
  p_default = 0.1;
} vertBeamWidth;

commentdef {
  p_header = " ------ Constants relating to scipuff ---------";
}

paramdef double {
  p_descr = "Particle density, particles/Kg";
  p_help = "Depends on the SCIPUFF run";
  p_default = 1.0e18;
} ParticleDensity;

paramdef double {
  p_descr = "Particle radius, m";
  p_help = "Depends on the SCIPUFF run";
  p_default = 1.0e-18;
} ParticleRadius;

paramdef double {
  p_descr = "Particle scattering efficency, unitless";
  p_help = "Depends on the SCIPUFF run";
  p_default = 0.1;
} Qsc;

paramdef double {
  p_descr = "Bias to apply to noise. Noise has unity mean.";
  p_help = "Bias is applied before scale.";
  p_default = -1.0;
} NoiseBias;

paramdef double {
  p_descr = "Scale to apply to noise. Noise has unity mean.";
  p_help = "Bias is applied before scale.";
  p_default = 1.0;
} NoiseScale;

paramdef double {
  p_descr = "Radius of lidar arpeture.";
  p_help = "Units are meters.";
  p_default = 0.2;
} sensorRadius;

paramdef double {
  p_descr = "Transmission factor of reciever with filter.";
  p_help = "Unitless.";
  p_default = 0.705;
} RxTrans;

paramdef double {
  p_descr = "Pulse energy of laser";
  p_help = "Units are mJ";
  p_default = 200;
} pulseEnergy;

paramdef double {
  p_descr = "Rayleigh extinction co-efficient";
  p_help = "Units are inverse meters";
  p_default = 1e-6;
} betaRayleigh;

paramdef double {
  p_descr = "Aerosol extinction co-efficient";
  p_help = "Units are inverse meters";
  p_default = 1e-6;
} betaExt;

paramdef double {
  p_descr = "Amplifier gain.";
  p_help = "Related returned power in mJ to an A/D count.";
  p_default = 5e10;
} ampGain;


paramdef boolean {
  p_descr = "Option to send signal rather than backscatter.";
  p_help = "Default is not to do this.";
  p_default = FALSE;
} sendPower;

paramdef boolean {
  p_descr = "Option to do subsampling and then avreage inside each gate.";
  p_help = "Default is not to do this.";
  p_default = FALSE;
} doSubSampling;

paramdef double {
  p_descr = "Sub sampling distance, m";
  p_help = "Relevant only if doSubSampling is TRUE.";
  p_default = 0.0;
} subSamplingDr;

paramdef boolean {
  p_descr = "Option to send log10(values) rather than the values themselves.";
  p_help = "Default is not to do this.";
  p_default = FALSE;
} sendLog10;






