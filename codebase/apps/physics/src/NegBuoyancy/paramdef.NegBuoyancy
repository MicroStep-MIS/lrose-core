/**********************************************************
 * paramdef.NegBuoyancy
 *
 * This file contains the TDRP parameter definitions for
 * NegBuoyancy.
 */


/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = false;
} debug;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

typedef enum
{
  LATEST_DATA,
  TIME_LIST,
  FCST_TIME_LIST,
  INTERVAL
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In LATEST_DATA mode, the program waits for new data from the "
           "MDV location specified by the latest_data_trigger parameter.\n"
           "In TIME_LIST mode, the program operates on archive data as "
           "specified in the time_list_trigger parameter.\n"
           "In FCST_TIME_LIST mode, the program operates on archive data "
           "in a forecast directory structure as "
           "specified in the time_list_trigger parameter.\n"
           "In INTERVAL mode, the program operates on archive data as "
           "specified in the interval_trigger parameter.";
  p_default = "LATEST_DATA";
} trigger_mode;

paramdef string
{
  p_descr = "URL to use when using a LATEST_DATA trigger";
  p_default = "mdvp:://localhost::./mdv/ruc";
} latest_data_trigger;

typedef struct
{
  string url;
  string start_time;
  string end_time;
} time_list_trigger_t;

paramdef struct time_list_trigger_t
{
  p_descr = "Trigger information used when using the TIME_LIST trigger";
  p_help = "url specifies the URL to use to get the available data times.\n"
           "start_time specifies the archive start time in any format "
           "recognized by the DateTime class.\n"
           "end_time specifies the archive end time in any format "
           "recognized by the DateTime class.";
  p_default = { "mdvp:://localhost::./mdv/ruc",
                "2001/1/1 00:00:00",
                "2002/1/2 00:00:00" };
} time_list_trigger;

typedef struct
{
  string start_time;
  string end_time;
  long interval;
} interval_trigger_t;

paramdef struct interval_trigger_t
{
  p_descr = "Trigger information used when using the INTERVAL trigger";
  p_help = "start_time specifies the archive start time in any format "
           "recognized by the DateTime class.\n"
           "end_time specifies the archive end time in any format "
           "recognized by the DateTime class.\n"
           "interval gives the number of seconds between each trigger time.";
  p_default = { "2001/1/1 00:00:00",
                "2001/1/2 00:00:00",
                3600 };
} interval_trigger;

typedef struct
{
  string url;
  string field_name;
  long field_num;
} input_info_t;

paramdef struct input_info_t
{
  p_descr = "Information about the input pressure field";
  p_help = "Pressure is assumed to be in mb.\n"
           "Uses field_name to identify field in MDV file unless "
           "field_name is \"\" in which case it uses field_num to "
           "identify the input field.";
  p_default = { "mdvp:://localhost::./mdv/ruc",
                "PRES", 0 };
} pressure_field_info;

paramdef struct input_info_t
{
  p_descr = "Information about the input temperature field";
  p_help = "Temperature is assumed to be in K.\n"
           "Uses field_name to identify field in MDV file unless "
           "field_name is \"\" in which case it uses field_num to "
           "identify the input field.";
  p_default = { "mdvp:://localhost::./mdv/ruc",
                "TMP", 0 };
} temperature_field_info;

paramdef struct input_info_t
{
  p_descr = "Information about the input water vapor mixing ratio field";
  p_help = "Mixing ratio is assumed to be in g/kg.\n"
           "Uses field_name to identify field in MDV file unless "
           "field_name is \"\" in which case it uses field_num to "
           "identify the input field.";
  p_default = { "mdvp:://localhost::./mdv/ruc",
                "WVMR", 0 };
} mixing_ratio_field_info;

paramdef struct input_info_t
{
  p_descr = "Information about the input geopotential height field";
  p_help = "Height is assumed to be in gpm.\n"
           "Uses field_name to identify field in MDV file unless "
           "field_name is \"\" in which case it uses field_num to "
           "identify the input field.";
  p_default = { "mdvp:://localhost::./mdv/ruc",
                "HGT", 0 };
} height_field_info;

paramdef struct input_info_t
{
  p_descr = "Information about the input terrain field";
  p_help = "Terrain is assumed to be in m.\n"
           "Uses field_name to identify field in MDV file unless "
           "field_name is \"\" in which case it uses field_num to "
           "identify the input field.";
  p_default = { "mdvp:://localhost::./mdv/ruc",
                "Terrain", 0 };
} terrain_field_info;

paramdef long
{
  p_descr = "Maximum input valid age in seconds";
  p_help = "Once the algorithm is triggered, it will not use any input data "
           "older than this value.";
  p_default = 1800;
} max_input_valid_secs;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::./mdv/output";
} output_url;

paramdef boolean
{
  p_descr = "Flag indicating whether the input fields should be included "
            "in the output file";
  p_default = false;
} include_input_fields;

paramdef boolean
{
  p_descr = "Flag to read forecast directory structure mdv data";
  p_default = false;
} read_forecast_data;

paramdef boolean
{
  p_descr = "Option to write output in forecast directory structure";
  p_default = false;
} write_as_forecast;


/***********************************************************************
 * Remapping parameters.
 */

commentdef
{
  p_header = "REMAPPING PARAMETERS";
};

paramdef boolean
{
  p_descr = "Flag indicated whether to remap the input before processing";
  p_default = false;
} remap_input;

typedef enum
{
  PROJ_LATLON,
  PROJ_FLAT
} proj_type_t;

typedef struct
{
  proj_type_t proj_type;
  long nx;
  long ny;
  double dx;
  double dy;
  double minx;
  double miny;
  double origin_lat;
  double origin_lon;
  double rotation;
} proj_info_t;

paramdef struct proj_info_t
{
  p_descr = "Remap projection information";
  p_help = "Used only if remap_input is set to true.";
  p_default = { PROJ_LATLON, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
} remap_info;


/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

paramdef string
{
  p_descr = "File containing the adiabat temperature lookup table.";
  p_help = "This file originally comes from the MM5 RIP code and must "
           "follow that format.  "
           "The current RIP code file can be found in CVS under:\n"
           "\tlibs/physics/data/psadilookup.dat";
  p_default = "./psadilookup.dat";
} adiabat_temp_lookup_filename;

paramdef boolean
{
  p_descr = "Flag indicating whether to generate 3D fields.";
  p_default = true;
} process_3d;

typedef struct
{
  double lower_level;
  double upper_level;
} pressure_limits_t;

paramdef struct pressure_limits_t
{
  p_descr = "The minimum and maximum pressure levels to process";
  p_help = "All levels of the input fields are read in and used for "
           "calculating the CAPE/CIN values at these levels.  "
           "Currently, all levels of the input fields are output in the "
           "CAPE/CIN fields, but only the levels between these (inclusive) "
           "are calculated.  "
           "The CAPE/CIN values for other levels will be 0.0 (unless the "
           "dynamically calculated scale and bias make these a little off "
           "from 0.0).";
  p_default = { 1000.0, 700.0 };
} pressure_limits;

paramdef boolean
{
  p_descr = "Flag indicating whether the intermediate fields should "
            "also be output";
  p_default = false;
} output_intermediate_fields;
