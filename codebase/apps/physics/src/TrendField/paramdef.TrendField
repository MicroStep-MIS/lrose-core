/**********************************************************
 * paramdef.TrendField
 *
 * This file contains the TDRP parameter definitions for
 * TrendField.
 */


commentdef
{
  p_header = "TrendField";
  p_text = "This program trends a field at a given URL.";
};

/***********************************************************************
 * Debugging
 */

commentdef
{
  p_header = "DEBUGGING PARAMETERS";
  p_text = "Parameters controlling debug outputs.";
};

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = false;
} debug;


/***********************************************************************
 * Process parameters
 */

commentdef
{
  p_header = "PROCESS PARAMETERS";
};

paramdef string
{
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
  p_default = "Test";
} instance;


/***********************************************************************
 * Process triggering.
 */

commentdef
{
  p_header = "PROCESS TRIGGERING PARAMETERS";
  p_text = "Parameters describing the process triggering.";
};

typedef enum
{
  LATEST_DATA,
  TIME_LIST
} trigger_mode_t;

paramdef enum trigger_mode_t
{
  p_descr = "Input triggering mode";
  p_help = "In LATEST_DATA mode, the program waits for new data from the "
           "input_field.url parameter.\n"
           "In TIME_LIST mode, the program operates on archive data as "
           "specified in the time_list_trigger parameter.";
  p_default = "LATEST_DATA";
} trigger_mode;

typedef struct
{
  string start_time;
  string end_time;
} time_list_trigger_t;

paramdef struct time_list_trigger_t
{
  p_descr = "Trigger information used when using the TIME_LIST trigger";
  p_help = "start_time specifies the archive start time in any format "
           "recognized by the DateTime class.\n"
           "end_time specifies the archive end time in any format "
           "recognized by the DateTime class.";
  p_default = { "2001/1/1 00:00:00",
                "2002/1/2 00:00:00" };
} time_list_trigger;


/***********************************************************************
 * Process I/O.
 */

commentdef
{
  p_header = "PROCESS I/O PARAMETERS";
  p_text = "Parameters describing the input and output locations.";
};

paramdef boolean
{
  p_descr = "Flag indicating whether to use the field_name or the field_num "
            "field in the input_fields array to identify the input fields.";
  p_default = true;
} use_field_name;

typedef struct
{
  string url;
  string field_name;
  long field_num;
} input_info_t;

paramdef struct input_info_t
{
  p_descr = "Information about the fields to be averaged";
  p_help = "If use_field_name is true, uses the field_name field to "
           "identify the input fields.  "
           "Otherwise, uses field_num to identify the input fields.";
  p_default = { "mdvp:://localhost::./mdv/derived_ruc", "RH", 0 };
} input_field;

paramdef long
{
  p_descr = "Maximum input valid age in seconds";
  p_help = "Once the algorithm is triggered, it will not use any input data "
           "older than this value.";
  p_default = 1800;
} max_input_valid_secs;

paramdef string
{
  p_descr = "Output URL";
  p_default = "mdvp:://localhost::./mdv/output";
} output_url;


/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

typedef enum
{
  FIRST_ORDER_TRENDING
} trending_type_t;

paramdef enum trending_type_t
{
  p_descr = "Type of trending to do";
  p_default = FIRST_ORDER_TRENDING;
} trending_type;
