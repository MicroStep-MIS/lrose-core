#! /bin/bash -f
#
# create a release
# package defaults to lrose
#

# Mike Dixon, EOL, NCAR, Boulder, CO, USA
# August 2016

# set the path

export PATH=.:/bin:./make_bin:/usr/bin:/sbin:/usr/sbin:/usr/bin/X11:/usr/local/bin:/usr/local/sbin:$HOME/bin

# save starting location and script name

startingDir=`pwd`
runDir=$(basename $startingDir)
scriptName=$(basename $0)

#######################################################
# get run time

year=`date -u +'%Y'`
month=`date -u +'%m'`
day=`date -u +'%d'`
hour=`date -u +'%H'`
min=`date -u +'%M'`
sec=`date -u +'%S'`

#--------------------------------------------------------------------
# usage function
#

function usage() {
    echo
    echo "Usage: $scriptName [options below]"
    echo "  -h   :  produce this usage list"
    echo "  -d   :  turn debugging on"
    echo "  -f   :  force, do not request user to check it is OK to proceed"
    echo "  -p ? :  set package name"
    echo "            default is 'lrose'"
    echo "  -r ? :  set top release dir"
    echo "            default is $HOME/releases"
    echo "  -s   :  produce distribution for static linking"
    echo "            default is dynamic linking"
    echo "  -v   :  turn verbose debugging on"
    echo
}

#--------------------------------------------------------------------

# defaults

package=lrose
releaseTop=$HOME/releases
debug=true
verbose=false
static=false
force=false

# Parse command line options.
while getopts hdvfsp:r: OPT; do
    case "$OPT" in
        h)
            usage
            exit 0
            ;;
        d)
            debug=true
            ;;
        v)
            verbose=true
            ;;
        f)
            force=true
            ;;
        s)
            static=true
            ;;
        p)
            package=$OPTARG
            ;;
        r)
            releaseTop=$OPTARG
            ;;
        \?)
            # getopts issues an error message
            echo "Problems with command line usage"
            usage
            exit 1
            ;;
    esac
done

releaseDir=${releaseTop}/${package}
tmpDir=${releaseDir}/tmp

if [ "$debug" == "true" ]
then
  echo "Running $scriptName"
  echo "  package: $package"
  echo "  releaseTop: $releaseTop"
  echo "  releaseDir: $releaseDir"
  echo "  tmpDir: $tmpDir"
  echo "  static: $static"
  echo "  force: $force"
  echo "  debug: $debug"
  echo "  verbose: $verbose"
fi

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# set up debug string

debug_str=
if [ "$verbose" == "true" ]
then
    debug_str=--verbose
else
    debug_str=--debug
fi

# make sure previous_releases dir exists

cd $releaseDir
prevDir=previous_releases
if [ -f $prevDir ]
then
#   file instead of directory, so remove
    /bin/rm -f $prevDir
fi
mkdir -p $prevDir

# move old releases into prev dir

ls /home/mdtest/releases/lrose/lrose-????????*.tgz

cd $releaseDir
tarPath=`ls *.tgz`
echo $tarPath
tarPath=`ls /home/mdtest/releases/lrose/lrose-????????*.tgz`
echo $tarPath
res=`mv -f ${releaseDir}/${package}-????????*.tgz ${releaseDir}/${prevDir}`
echo $res
exit 1

# delete tmpDir if it exists

if [ -d $tmpDir ]
then
    cd $tmpDir
    if [ "$force" != "true" ]
    then
        echo "WARNING: you are about to remove all contents in dir: `pwd`"
        echo "========================================================="
        ls -al
        echo "========================================================="
        read -ep "WARNING: do you wish to proceed (y/n)? " answer
        test "$answer" || answer=n
        if [ "$answer" != "y" ]
        then
            echo "Aborted"
            exit 1
        fi
    fi
    echo "Proceeding ......."
    echo "  Removing all contents in dir: $tmpDir"
    cd $releaseDir
    echo /bin/rm -rf $tmpDir
    /bin/rm -rf $tmpDir
fi

# make tmp dir, go there

mkdir -p $tmpDir

# temp dir path for core

tmpCoreDir=$tmpDir/lrose-core

# perform checkout

cd $tmpDir
git clone https://github.com/NCAR/lrose-core
cd $tmpCoreDir
git clone https://github.com/NCAR/lrose-netcdf

# in codebase
# create configure.ac, makefile.am files
# run AutoConf

cd $tmpCoreDir/codebase
/bin/cp ../build/configure.base . || exit 1
/bin/cp ../build/configure.base.shared . || exit 1
/bin/cp ../build/Makefile.top Makefile || exit 1

# create project-specific makefiles

./make_bin/install_distro_makefiles.py --distro ${package} --codedir . || exit 1

# set up automake configure

if [ "$static" == "true" ]
then
    ./make_bin/createConfigure.am.py --dir . --pkg ${package} $debug_str || exit 1
else
    ./make_bin/createConfigure.am.py --dir . --baseName configure.base.shared \
        $debug_str --shared --pkg ${package} || exit 1
fi

# copy in the netcdf support from the lrose-netcdf repo

#cd $tmpCoreDir
#rsync -av ../lrose-netcdf .|| exit 1

# copy docs to this level

#cp ../LICENSE.txt . || exit 1
#cp ./build/docs/*.TXT . || exit 1
#cp -r ../release_notes/${package}_release_notes.txt . || exit 1

# copy build scripts to top level

#/bin/cp ../../lrose-netcdf/build_and_install_netcdf . || exit 1
#/bin/cp ./build/build_${package} . || exit 1
#/bin/cp ./release/prepare_bin_release.${package} . || exit 1

# copy in the package tar file dependencies

#mkdir -p tar_files || exit 1
#/bin/cp -rf ../../lrose-netcdf/tar_files/* tar_files || exit 1

# compute release name and dir name

today=${year}${month}${day}
distName=${package}-${today}.src
srcTarName=${distName}.tgz
echo Preparing source release file $srcTarName

# make temporary dist dir

#/bin/rm -rf ${package}-????????* || exit 1
cd $tmpCoreDir
mkdir -p $distName || exit 1

# move everything there

mv LICENSE.txt README.md build codebase docs lrose-netcdf make_release release_notes $distName

# make the tar file

echo "tar cvfz $srcTarName --dereference $distName" || exit 1
tar cvfz $srcTarName --dereference $distName || exit 1

# move everything back, remove distName dir

#echo 55555555555
#pwd
#ls $distName
#echo "mv $distName/* ." || exit 1
#cd $distName
#mv LICENSE.txt README.md build codebase docs lrose-netcdf make_release release_notes ..
#cd ..
#mv $distName/LICENSE.txt $distName/README.md $distName/build $distName/codebase $distName/docs $distName/lrose-netcdf $distName/make_release $distName/release_notes . || exit 1
#mv $distName/* . || exit 1
#echo "/bin/rm -rf $distName"
#/bin/rm -rf $distName || exit 1
#echo 5555555555555

# create brew formula for mac OSX

cd $tmpCoreDir
tar_url=https://github.com/NCAR/lrose-core/releases/${srcTarName}
formula_name="${package}.rb"
./${distName}/build/build_${package}_formula $tar_url $srcTarName $formula_name

# move the tar file and formula up into release dir

mv ${srcTarName} $formula_name ../..

# clean up tmp dir

cd $releaseDir
/bin/rm -rf $tmpDir

echo "-------- done --------"

exit 0
